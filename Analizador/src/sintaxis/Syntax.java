
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 30 10:30:35 CST 2023
//----------------------------------------------------

package sintaxis;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Collection;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 30 10:30:35 CST 2023
  */
public class Syntax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\301\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\004\003\000\002\004\003\000\002\005\003\000\002" +
    "\005\003\000\002\007\003\000\002\007\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\011\006\000\002\012\004\000" +
    "\002\012\004\000\002\013\004\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\015\003\000\002\015\005\000\002\015\005" +
    "\000\002\016\006\000\002\017\006\000\002\020\010\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\022\006\000\002\023\010\000\002\024\003\000\002\024" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\005" +
    "\000\002\025\003\000\002\031\006\000\002\032\010\000" +
    "\002\032\011\000\002\033\003\000\002\033\003\000\002" +
    "\034\003\000\002\034\003\000\002\035\006\000\002\036" +
    "\010\000\002\037\003\000\002\037\003\000\002\040\003" +
    "\000\002\040\003\000\002\041\006\000\002\042\010\000" +
    "\002\043\003\000\002\043\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\045\007\000\002\046\007" +
    "\000\002\047\007\000\002\050\007\000\002\051\007\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\053\003\000\002\053\003\000\002\054" +
    "\003\000\002\054\003\000\002\055\005\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\056\003\000\002\056\005\000\002" +
    "\057\003\000\002\057\004\000\002\057\005\000\002\060" +
    "\003\000\002\060\004\000\002\135\002\000\002\060\006" +
    "\000\002\060\005\000\002\123\003\000\002\123\003\000" +
    "\002\061\005\000\002\065\004\000\002\065\003\000\002" +
    "\065\003\000\002\066\006\000\002\067\011\000\002\067" +
    "\010\000\002\134\003\000\002\030\004\000\002\027\002" +
    "\000\002\070\003\000\002\071\005\000\002\072\007\000" +
    "\002\073\003\000\002\073\003\000\002\073\003\000\002" +
    "\107\003\000\002\074\012\000\002\125\002\000\002\075" +
    "\007\000\002\075\010\000\002\133\003\000\002\132\003" +
    "\000\002\076\003\000\002\076\003\000\002\076\003\000" +
    "\002\076\003\000\002\077\005\000\002\130\005\000\002" +
    "\100\003\000\002\100\004\000\002\101\006\000\002\131" +
    "\002\000\002\102\007\000\002\127\006\000\002\103\003" +
    "\000\002\103\003\000\002\103\003\000\002\103\003\000" +
    "\002\110\005\000\002\026\003\000\002\026\005\000\002" +
    "\104\005\000\002\104\004\000\002\105\007\000\002\124" +
    "\005\000\002\106\007\000\002\126\003\000\002\126\003" +
    "\000\002\126\003\000\002\117\004\000\002\111\003\000" +
    "\002\111\003\000\002\111\003\000\002\111\003\000\002" +
    "\111\003\000\002\111\003\000\002\112\003\000\002\112" +
    "\005\000\002\113\006\000\002\113\005\000\002\114\004" +
    "\000\002\062\003\000\002\062\003\000\002\062\003\000" +
    "\002\063\003\000\002\063\003\000\002\063\003\000\002" +
    "\063\003\000\002\064\003\000\002\064\003\000\002\064" +
    "\004\000\002\064\003\000\002\064\003\000\002\115\003" +
    "\000\002\115\003\000\002\115\003\000\002\115\003\000" +
    "\002\115\003\000\002\115\003\000\002\115\003\000\002" +
    "\115\003\000\002\115\003\000\002\115\003\000\002\116" +
    "\003\000\002\116\003\000\002\116\003\000\002\120\004" +
    "\000\002\121\003\000\002\121\004\000\002\121\004\000" +
    "\002\121\005\000\002\122\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0140\000\020\040\021\041\026\042\012\043\031\044" +
    "\010\066\025\067\013\001\002\000\004\002\uff41\001\002" +
    "\000\020\040\uff53\041\uff53\042\uff53\043\uff53\044\uff53\066" +
    "\uff53\067\uff53\001\002\000\020\040\uff4c\041\uff4c\042\uff4c" +
    "\043\uff4c\044\uff4c\066\uff4c\067\uff4c\001\002\000\020\040" +
    "\u012f\041\026\042\012\043\031\044\010\066\025\067\013" +
    "\001\002\000\004\005\u013a\001\002\000\020\040\uff4a\041" +
    "\uff4a\042\uff4a\043\uff4a\044\uff4a\066\uff4a\067\uff4a\001\002" +
    "\000\006\005\163\065\uff6c\001\002\000\026\035\ufff3\040" +
    "\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\057\ufff3\060\ufff3" +
    "\066\ufff3\067\ufff3\001\002\000\004\040\u0136\001\002\000" +
    "\020\040\uff50\041\uff50\042\uff50\043\uff50\044\uff50\066\uff50" +
    "\067\uff50\001\002\000\020\040\uff47\041\uff47\042\uff47\043" +
    "\uff47\044\uff47\066\uff47\067\uff47\001\002\000\020\040\uff4f" +
    "\041\uff4f\042\uff4f\043\uff4f\044\uff4f\066\uff4f\067\uff4f\001" +
    "\002\000\020\040\uff49\041\uff49\042\uff49\043\uff49\044\uff49" +
    "\066\uff49\067\uff49\001\002\000\006\005\u0134\065\uff6e\001" +
    "\002\000\020\040\uff4e\041\uff4e\042\uff4e\043\uff4e\044\uff4e" +
    "\066\uff4e\067\uff4e\001\002\000\004\032\053\001\002\000" +
    "\020\040\uff48\041\uff48\042\uff48\043\uff48\044\uff48\066\uff48" +
    "\067\uff48\001\002\000\026\035\ufff4\040\ufff4\041\ufff4\042" +
    "\ufff4\043\ufff4\044\ufff4\057\ufff4\060\ufff4\066\ufff4\067\ufff4" +
    "\001\002\000\006\005\373\065\uff6d\001\002\000\022\002" +
    "\uff45\040\u012f\041\026\042\012\043\031\044\010\066\025" +
    "\067\013\001\002\000\004\032\053\001\002\000\004\005" +
    "\042\001\002\000\020\040\uff4b\041\uff4b\042\uff4b\043\uff4b" +
    "\044\uff4b\066\uff4b\067\uff4b\001\002\000\020\040\uff51\041" +
    "\uff51\042\uff51\043\uff51\044\uff51\066\uff51\067\uff51\001\002" +
    "\000\020\040\uff52\041\uff52\042\uff52\043\uff52\044\uff52\066" +
    "\uff52\067\uff52\001\002\000\020\040\uff4d\041\uff4d\042\uff4d" +
    "\043\uff4d\044\uff4d\066\uff4d\067\uff4d\001\002\000\004\065" +
    "\041\001\002\000\004\002\040\001\002\000\004\002\001" +
    "\001\002\000\004\032\uff6b\001\002\000\004\065\043\001" +
    "\002\000\006\004\044\010\045\001\002\000\054\022\uffcc" +
    "\023\uffcc\035\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044" +
    "\uffcc\045\uffcc\046\uffcc\047\uffcc\051\uffcc\052\uffcc\053\uffcc" +
    "\055\uffcc\056\uffcc\057\uffcc\060\uffcc\065\uffcc\066\uffcc\067" +
    "\uffcc\001\002\000\006\063\050\065\046\001\002\000\004" +
    "\004\uffcd\001\002\000\004\004\051\001\002\000\004\004" +
    "\uffce\001\002\000\054\022\uffcb\023\uffcb\035\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047" +
    "\uffcb\051\uffcb\052\uffcb\053\uffcb\055\uffcb\056\uffcb\057\uffcb" +
    "\060\uffcb\065\uffcb\066\uffcb\067\uffcb\001\002\000\004\034" +
    "\071\001\002\000\014\033\060\040\054\041\056\042\055" +
    "\043\061\001\002\000\004\005\uff7a\001\002\000\004\005" +
    "\uff78\001\002\000\004\005\uff79\001\002\000\006\007\067" +
    "\033\uff75\001\002\000\004\034\uff72\001\002\000\004\005" +
    "\uff77\001\002\000\004\005\065\001\002\000\004\033\064" +
    "\001\002\000\004\034\uff73\001\002\000\004\065\066\001" +
    "\002\000\006\007\uff76\033\uff76\001\002\000\012\040\054" +
    "\041\056\042\055\043\061\001\002\000\004\033\uff74\001" +
    "\002\000\046\022\105\023\104\040\136\041\113\042\147" +
    "\043\031\044\010\045\141\046\076\047\140\051\112\052" +
    "\114\053\uff8b\055\077\056\075\065\117\066\025\067\013" +
    "\001\002\000\004\034\u011a\001\002\000\054\022\uffb7\023" +
    "\uffb7\035\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\051\uffb7\052\uffb7\053\uffb7\055" +
    "\uffb7\056\uffb7\057\uffb7\060\uffb7\065\uffb7\066\uffb7\067\uffb7" +
    "\001\002\000\054\022\uffb5\023\uffb5\035\uffb5\040\uffb5\041" +
    "\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5" +
    "\051\uffb5\052\uffb5\053\uffb5\055\uffb5\056\uffb5\057\uffb5\060" +
    "\uffb5\065\uffb5\066\uffb5\067\uffb5\001\002\000\004\005\u0112" +
    "\001\002\000\004\032\u0105\001\002\000\004\004\u0104\001" +
    "\002\000\054\022\uff5b\023\uff5b\035\uff5b\040\uff5b\041\uff5b" +
    "\042\uff5b\043\uff5b\044\uff5b\045\uff5b\046\uff5b\047\uff5b\051" +
    "\uff5b\052\uff5b\053\uff5b\055\uff5b\056\uff5b\057\uff5b\060\uff5b" +
    "\065\uff5b\066\uff5b\067\uff5b\001\002\000\054\022\uffd8\023" +
    "\uffd8\035\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8" +
    "\045\uffd8\046\uffd8\047\uffd8\051\uffd8\052\uffd8\053\uffd8\055" +
    "\uffd8\056\uffd8\057\uffd8\060\uffd8\065\uffd8\066\uffd8\067\uffd8" +
    "\001\002\000\054\022\uffdc\023\uffdc\035\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc" +
    "\051\uffdc\052\uffdc\053\uffdc\055\uffdc\056\uffdc\057\uffdc\060" +
    "\uffdc\065\uffdc\066\uffdc\067\uffdc\001\002\000\054\022\uffcf" +
    "\023\uffcf\035\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044" +
    "\uffcf\045\uffcf\046\uffcf\047\uffcf\051\uffcf\052\uffcf\053\uffcf" +
    "\055\uffcf\056\uffcf\057\uffcf\060\uffcf\065\uffcf\066\uffcf\067" +
    "\uffcf\001\002\000\040\004\ufff5\011\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\024\ufff5\025\ufff5\026\ufff5\027" +
    "\ufff5\030\ufff5\031\ufff5\033\ufff5\065\ufff5\001\002\000\040" +
    "\004\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016" +
    "\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6" +
    "\033\ufff6\065\ufff6\001\002\000\054\022\uffca\023\uffca\035" +
    "\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca" +
    "\046\uffca\047\uffca\051\uffca\052\uffca\053\uffca\055\uffca\056" +
    "\uffca\057\uffca\060\uffca\065\uffca\066\uffca\067\uffca\001\002" +
    "\000\054\022\uff58\023\uff58\035\uff58\040\uff58\041\uff58\042" +
    "\uff58\043\uff58\044\uff58\045\uff58\046\uff58\047\uff58\051\uff58" +
    "\052\uff58\053\uff58\055\uff58\056\uff58\057\uff58\060\uff58\065" +
    "\uff58\066\uff58\067\uff58\001\002\000\010\035\uff9a\057\uff9a" +
    "\060\uff9a\001\002\000\054\022\uffbd\023\uffbd\035\uffbd\040" +
    "\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd" +
    "\047\uffbd\051\uffbd\052\uffbd\053\uffbd\055\uffbd\056\uffbd\057" +
    "\uffbd\060\uffbd\065\uffbd\066\uffbd\067\uffbd\001\002\000\004" +
    "\032\u0101\001\002\000\004\005\373\001\002\000\004\032" +
    "\uff87\001\002\000\004\004\372\001\002\000\004\004\371" +
    "\001\002\000\012\010\366\022\105\023\104\032\227\001" +
    "\002\000\054\022\uffbf\023\uffbf\035\uffbf\040\uffbf\041\uffbf" +
    "\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\051" +
    "\uffbf\052\uffbf\053\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf" +
    "\065\uffbf\066\uffbf\067\uffbf\001\002\000\054\022\uff57\023" +
    "\uff57\035\uff57\040\uff57\041\uff57\042\uff57\043\uff57\044\uff57" +
    "\045\uff57\046\uff57\047\uff57\051\uff57\052\uff57\053\uff57\055" +
    "\uff57\056\uff57\057\uff57\060\uff57\065\uff57\066\uff57\067\uff57" +
    "\001\002\000\004\032\337\001\002\000\054\022\uffb6\023" +
    "\uffb6\035\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6" +
    "\045\uffb6\046\uffb6\047\uffb6\051\uffb6\052\uffb6\053\uffb6\055" +
    "\uffb6\056\uffb6\057\uffb6\060\uffb6\065\uffb6\066\uffb6\067\uffb6" +
    "\001\002\000\054\022\uff5c\023\uff5c\035\uff5c\040\uff5c\041" +
    "\uff5c\042\uff5c\043\uff5c\044\uff5c\045\uff5c\046\uff5c\047\uff5c" +
    "\051\uff5c\052\uff5c\053\uff5c\055\uff5c\056\uff5c\057\uff5c\060" +
    "\uff5c\065\uff5c\066\uff5c\067\uff5c\001\002\000\054\022\uff55" +
    "\023\uff55\035\uff55\040\uff55\041\uff55\042\uff55\043\uff55\044" +
    "\uff55\045\uff55\046\uff55\047\uff55\051\uff55\052\uff55\053\uff55" +
    "\055\uff55\056\uff55\057\uff55\060\uff55\065\uff55\066\uff55\067" +
    "\uff55\001\002\000\054\022\uff5e\023\uff5e\035\uff5e\040\uff5e" +
    "\041\uff5e\042\uff5e\043\uff5e\044\uff5e\045\uff5e\046\uff5e\047" +
    "\uff5e\051\uff5e\052\uff5e\053\uff5e\055\uff5e\056\uff5e\057\uff5e" +
    "\060\uff5e\065\uff5e\066\uff5e\067\uff5e\001\002\000\054\022" +
    "\uffd0\023\uffd0\035\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0" +
    "\044\uffd0\045\uffd0\046\uffd0\047\uffd0\051\uffd0\052\uffd0\053" +
    "\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\065\uffd0\066\uffd0" +
    "\067\uffd0\001\002\000\054\022\105\023\104\035\uff9b\040" +
    "\136\041\113\042\147\043\031\044\010\045\141\046\076" +
    "\047\140\051\112\052\114\053\uff8b\055\077\056\075\057" +
    "\uff9b\060\uff9b\065\117\066\025\067\013\001\002\000\004" +
    "\032\337\001\002\000\054\022\uffde\023\uffde\035\uffde\040" +
    "\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde" +
    "\047\uffde\051\uffde\052\uffde\053\uffde\055\uffde\056\uffde\057" +
    "\uffde\060\uffde\065\uffde\066\uffde\067\uffde\001\002\000\054" +
    "\022\uffc4\023\uffc4\035\uffc4\040\uffc4\041\uffc4\042\uffc4\043" +
    "\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\051\uffc4\052\uffc4" +
    "\053\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\065\uffc4\066" +
    "\uffc4\067\uffc4\001\002\000\054\022\uffc0\023\uffc0\035\uffc0" +
    "\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046" +
    "\uffc0\047\uffc0\051\uffc0\052\uffc0\053\uffc0\055\uffc0\056\uffc0" +
    "\057\uffc0\060\uffc0\065\uffc0\066\uffc0\067\uffc0\001\002\000" +
    "\054\022\uffb4\023\uffb4\035\uffb4\040\uffb4\041\uffb4\042\uffb4" +
    "\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\051\uffb4\052" +
    "\uffb4\053\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\065\uffb4" +
    "\066\uffb4\067\uffb4\001\002\000\004\005\314\001\002\000" +
    "\004\053\274\001\002\000\004\005\273\001\002\000\004" +
    "\032\267\001\002\000\054\022\uffc2\023\uffc2\035\uffc2\040" +
    "\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2" +
    "\047\uffc2\051\uffc2\052\uffc2\053\uffc2\055\uffc2\056\uffc2\057" +
    "\uffc2\060\uffc2\065\uffc2\066\uffc2\067\uffc2\001\002\000\054" +
    "\022\uffc1\023\uffc1\035\uffc1\040\uffc1\041\uffc1\042\uffc1\043" +
    "\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\051\uffc1\052\uffc1" +
    "\053\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\065\uffc1\066" +
    "\uffc1\067\uffc1\001\002\000\054\022\uff5f\023\uff5f\035\uff5f" +
    "\040\uff5f\041\uff5f\042\uff5f\043\uff5f\044\uff5f\045\uff5f\046" +
    "\uff5f\047\uff5f\051\uff5f\052\uff5f\053\uff5f\055\uff5f\056\uff5f" +
    "\057\uff5f\060\uff5f\065\uff5f\066\uff5f\067\uff5f\001\002\000" +
    "\054\022\uff59\023\uff59\035\uff59\040\uff59\041\uff59\042\uff59" +
    "\043\uff59\044\uff59\045\uff59\046\uff59\047\uff59\051\uff59\052" +
    "\uff59\053\uff59\055\uff59\056\uff59\057\uff59\060\uff59\065\uff59" +
    "\066\uff59\067\uff59\001\002\000\054\022\uffbe\023\uffbe\035" +
    "\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe" +
    "\046\uffbe\047\uffbe\051\uffbe\052\uffbe\053\uffbe\055\uffbe\056" +
    "\uffbe\057\uffbe\060\uffbe\065\uffbe\066\uffbe\067\uffbe\001\002" +
    "\000\004\005\163\001\002\000\054\022\uffc9\023\uffc9\035" +
    "\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9" +
    "\046\uffc9\047\uffc9\051\uffc9\052\uffc9\053\uffc9\055\uffc9\056" +
    "\uffc9\057\uffc9\060\uffc9\065\uffc9\066\uffc9\067\uffc9\001\002" +
    "\000\054\022\uffdd\023\uffdd\035\uffdd\040\uffdd\041\uffdd\042" +
    "\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\051\uffdd" +
    "\052\uffdd\053\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\065" +
    "\uffdd\066\uffdd\067\uffdd\001\002\000\054\022\uff54\023\uff54" +
    "\035\uff54\040\uff54\041\uff54\042\uff54\043\uff54\044\uff54\045" +
    "\uff54\046\uff54\047\uff54\051\uff54\052\uff54\053\uff54\055\uff54" +
    "\056\uff54\057\uff54\060\uff54\065\uff54\066\uff54\067\uff54\001" +
    "\002\000\004\035\162\001\002\000\054\022\uffc3\023\uffc3" +
    "\035\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045" +
    "\uffc3\046\uffc3\047\uffc3\051\uffc3\052\uffc3\053\uffc3\055\uffc3" +
    "\056\uffc3\057\uffc3\060\uffc3\065\uffc3\066\uffc3\067\uffc3\001" +
    "\002\000\054\022\uff5a\023\uff5a\035\uff5a\040\uff5a\041\uff5a" +
    "\042\uff5a\043\uff5a\044\uff5a\045\uff5a\046\uff5a\047\uff5a\051" +
    "\uff5a\052\uff5a\053\uff5a\055\uff5a\056\uff5a\057\uff5a\060\uff5a" +
    "\065\uff5a\066\uff5a\067\uff5a\001\002\000\054\022\uff5d\023" +
    "\uff5d\035\uff5d\040\uff5d\041\uff5d\042\uff5d\043\uff5d\044\uff5d" +
    "\045\uff5d\046\uff5d\047\uff5d\051\uff5d\052\uff5d\053\uff5d\055" +
    "\uff5d\056\uff5d\057\uff5d\060\uff5d\065\uff5d\066\uff5d\067\uff5d" +
    "\001\002\000\054\022\uffd9\023\uffd9\035\uffd9\040\uffd9\041" +
    "\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9" +
    "\051\uffd9\052\uffd9\053\uffd9\055\uffd9\056\uffd9\057\uffd9\060" +
    "\uffd9\065\uffd9\066\uffd9\067\uffd9\001\002\000\004\065\161" +
    "\001\002\000\036\004\uffeb\011\uffeb\012\uffeb\013\uffeb\014" +
    "\uffeb\015\uffeb\016\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb" +
    "\030\uffeb\031\uffeb\033\uffeb\001\002\000\022\002\uff71\040" +
    "\uff71\041\uff71\042\uff71\043\uff71\044\uff71\066\uff71\067\uff71" +
    "\001\002\000\004\065\164\001\002\000\006\004\165\010" +
    "\166\001\002\000\054\022\uffd3\023\uffd3\035\uffd3\040\uffd3" +
    "\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047" +
    "\uffd3\051\uffd3\052\uffd3\053\uffd3\055\uffd3\056\uffd3\057\uffd3" +
    "\060\uffd3\065\uffd3\066\uffd3\067\uffd3\001\002\000\014\021" +
    "\176\032\170\036\175\037\167\065\177\001\002\000\020" +
    "\004\uffff\007\uffff\017\uffff\020\uffff\030\uffff\031\uffff\033" +
    "\uffff\001\002\000\014\005\213\021\215\032\216\036\175" +
    "\037\167\001\002\000\010\004\uffd7\030\uffb1\031\uffb1\001" +
    "\002\000\006\030\204\031\203\001\002\000\004\004\202" +
    "\001\002\000\004\004\uffd4\001\002\000\020\004\000\007" +
    "\000\017\000\020\000\030\000\031\000\033\000\001\002" +
    "\000\012\032\170\036\175\037\167\065\177\001\002\000" +
    "\010\004\uffd6\030\uffb0\031\uffb0\001\002\000\004\004\201" +
    "\001\002\000\054\022\uffd1\023\uffd1\035\uffd1\040\uffd1\041" +
    "\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1" +
    "\051\uffd1\052\uffd1\053\uffd1\055\uffd1\056\uffd1\057\uffd1\060" +
    "\uffd1\065\uffd1\066\uffd1\067\uffd1\001\002\000\054\022\uffd2" +
    "\023\uffd2\035\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044" +
    "\uffd2\045\uffd2\046\uffd2\047\uffd2\051\uffd2\052\uffd2\053\uffd2" +
    "\055\uffd2\056\uffd2\057\uffd2\060\uffd2\065\uffd2\066\uffd2\067" +
    "\uffd2\001\002\000\020\022\uffb2\023\uffb2\036\uffb2\037\uffb2" +
    "\061\uffb2\062\uffb2\065\uffb2\001\002\000\020\022\uffb3\023" +
    "\uffb3\036\uffb3\037\uffb3\061\uffb3\062\uffb3\065\uffb3\001\002" +
    "\000\010\036\175\037\167\065\206\001\002\000\004\004" +
    "\uffb0\001\002\000\004\004\uffaf\001\002\000\004\004\uffb1" +
    "\001\002\000\010\017\uffa2\020\uffa2\033\266\001\002\000" +
    "\010\017\uffa4\020\uffa4\033\uffa4\001\002\000\004\065\265" +
    "\001\002\000\010\017\uffa7\020\uffa7\033\uffa7\001\002\000" +
    "\012\005\213\032\253\036\175\037\167\001\002\000\026" +
    "\005\213\021\215\022\105\023\104\032\216\036\175\037" +
    "\167\061\226\062\223\065\225\001\002\000\036\004\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\024" +
    "\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\033\uffe5" +
    "\001\002\000\036\004\uffe6\011\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6" +
    "\030\uffe6\031\uffe6\033\uffe6\001\002\000\020\024\255\025" +
    "\261\026\256\027\257\030\204\031\203\033\uffa9\001\002" +
    "\000\004\033\254\001\002\000\036\004\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\024\uffe8\025\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\031\uffe8\033\uffe8\001\002\000" +
    "\010\017\uffa2\020\uffa2\033\246\001\002\000\044\004\uffe7" +
    "\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\022" +
    "\105\023\104\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7" +
    "\031\uffe7\032\227\033\uffe7\001\002\000\036\004\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\024\uffe9" +
    "\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\033\uffe9\001" +
    "\002\000\020\033\240\036\175\037\167\061\233\062\237" +
    "\063\234\065\241\001\002\000\036\004\uffec\011\uffec\012" +
    "\uffec\013\uffec\014\uffec\015\uffec\016\uffec\024\uffec\025\uffec" +
    "\026\uffec\027\uffec\030\uffec\031\uffec\033\uffec\001\002\000" +
    "\006\007\uff65\033\uff65\001\002\000\006\007\243\033\uff64" +
    "\001\002\000\006\007\uff6a\033\uff6a\001\002\000\006\007" +
    "\uff68\033\uff68\001\002\000\004\033\242\001\002\000\006" +
    "\007\uff67\033\uff67\001\002\000\006\007\uff69\033\uff69\001" +
    "\002\000\040\004\uff61\007\uff61\011\uff61\012\uff61\013\uff61" +
    "\014\uff61\015\uff61\016\uff61\024\uff61\025\uff61\026\uff61\027" +
    "\uff61\030\uff61\031\uff61\033\uff61\001\002\000\010\007\uff66" +
    "\032\227\033\uff66\001\002\000\040\004\uff62\007\uff62\011" +
    "\uff62\012\uff62\013\uff62\014\uff62\015\uff62\016\uff62\024\uff62" +
    "\025\uff62\026\uff62\027\uff62\030\uff62\031\uff62\033\uff62\001" +
    "\002\000\016\036\175\037\167\061\233\062\237\063\234" +
    "\065\241\001\002\000\004\033\uff63\001\002\000\006\017" +
    "\247\020\251\001\002\000\010\017\uffa0\020\uffa0\033\uffa0" +
    "\001\002\000\012\005\ufff8\032\ufff8\036\ufff8\037\ufff8\001" +
    "\002\000\012\005\213\032\253\036\175\037\167\001\002" +
    "\000\012\005\ufff7\032\ufff7\036\ufff7\037\ufff7\001\002\000" +
    "\010\017\uffa1\020\uffa1\033\uffa1\001\002\000\014\022\105" +
    "\023\104\061\226\062\223\065\225\001\002\000\010\017" +
    "\uffa5\020\uffa5\033\uffa5\001\002\000\014\022\uffae\023\uffae" +
    "\061\uffae\062\uffae\065\uffae\001\002\000\014\022\uffac\023" +
    "\uffac\061\uffac\062\uffac\065\uffac\001\002\000\014\022\uffab" +
    "\023\uffab\061\uffab\062\uffab\065\uffab\001\002\000\014\022" +
    "\105\023\104\061\226\062\223\065\225\001\002\000\014" +
    "\022\uffad\023\uffad\061\uffad\062\uffad\065\uffad\001\002\000" +
    "\014\022\uffaa\023\uffaa\061\uffaa\062\uffaa\065\uffaa\001\002" +
    "\000\004\033\uffa8\001\002\000\010\017\uffa3\020\uffa3\033" +
    "\uffa3\001\002\000\010\017\uffa6\020\uffa6\033\uffa6\001\002" +
    "\000\004\004\uffd5\001\002\000\004\065\270\001\002\000" +
    "\004\033\271\001\002\000\004\004\272\001\002\000\054" +
    "\022\uffbc\023\uffbc\035\uffbc\040\uffbc\041\uffbc\042\uffbc\043" +
    "\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\051\uffbc\052\uffbc" +
    "\053\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\065\uffbc\066" +
    "\uffbc\067\uffbc\001\002\000\004\032\uff95\001\002\000\004" +
    "\032\275\001\002\000\014\022\105\023\104\061\226\062" +
    "\223\065\225\001\002\000\004\033\uff8d\001\002\000\006" +
    "\004\310\033\uff93\001\002\000\004\033\uff8f\001\002\000" +
    "\004\033\uff90\001\002\000\004\033\uff8e\001\002\000\004" +
    "\033\304\001\002\000\004\034\305\001\002\000\046\022" +
    "\105\023\104\040\136\041\113\042\147\043\031\044\010" +
    "\045\141\046\076\047\140\051\112\052\114\053\uff8b\055" +
    "\077\056\075\065\117\066\025\067\013\001\002\000\004" +
    "\035\307\001\002\000\054\022\uff8c\023\uff8c\035\uff8c\040" +
    "\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c" +
    "\047\uff8c\051\uff8c\052\uff8c\053\uff8c\055\uff8c\056\uff8c\057" +
    "\uff8c\060\uff8c\065\uff8c\066\uff8c\067\uff8c\001\002\000\014" +
    "\022\105\023\104\061\226\062\223\065\225\001\002\000" +
    "\006\004\312\033\uff92\001\002\000\014\022\105\023\104" +
    "\061\226\062\223\065\225\001\002\000\004\033\uff91\001" +
    "\002\000\004\065\315\001\002\000\006\004\316\010\317" +
    "\001\002\000\054\022\uffe0\023\uffe0\035\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0" +
    "\051\uffe0\052\uffe0\053\uffe0\055\uffe0\056\uffe0\057\uffe0\060" +
    "\uffe0\065\uffe0\066\uffe0\067\uffe0\001\002\000\016\022\105" +
    "\023\104\032\322\061\226\062\223\065\225\001\002\000" +
    "\022\004\uffe4\011\332\012\326\013\331\014\334\015\330" +
    "\016\333\033\uffe4\001\002\000\004\004\325\001\002\000" +
    "\016\022\105\023\104\032\322\061\226\062\223\065\225" +
    "\001\002\000\004\033\324\001\002\000\006\004\uffe2\033" +
    "\uffe2\001\002\000\054\022\uffdf\023\uffdf\035\uffdf\040\uffdf" +
    "\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047" +
    "\uffdf\051\uffdf\052\uffdf\053\uffdf\055\uffdf\056\uffdf\057\uffdf" +
    "\060\uffdf\065\uffdf\066\uffdf\067\uffdf\001\002\000\016\022" +
    "\ufffd\023\ufffd\032\ufffd\061\ufffd\062\ufffd\065\ufffd\001\002" +
    "\000\016\022\105\023\104\032\322\061\226\062\223\065" +
    "\225\001\002\000\016\022\ufffa\023\ufffa\032\ufffa\061\ufffa" +
    "\062\ufffa\065\ufffa\001\002\000\016\022\ufffc\023\ufffc\032" +
    "\ufffc\061\ufffc\062\ufffc\065\ufffc\001\002\000\016\022\ufffe" +
    "\023\ufffe\032\ufffe\061\ufffe\062\ufffe\065\ufffe\001\002\000" +
    "\016\022\ufff9\023\ufff9\032\ufff9\061\ufff9\062\ufff9\065\ufff9" +
    "\001\002\000\016\022\ufffb\023\ufffb\032\ufffb\061\ufffb\062" +
    "\ufffb\065\ufffb\001\002\000\006\004\uffe3\033\uffe3\001\002" +
    "\000\004\034\345\001\002\000\016\005\213\021\215\032" +
    "\216\036\175\037\167\065\343\001\002\000\004\034\uff96" +
    "\001\002\000\004\033\344\001\002\000\010\017\uffa2\020" +
    "\uffa2\033\uff9f\001\002\000\004\033\uff9e\001\002\000\004" +
    "\034\uff9d\001\002\000\046\022\105\023\104\040\136\041" +
    "\113\042\147\043\031\044\010\045\141\046\076\047\140" +
    "\051\112\052\114\053\uff8b\055\077\056\075\065\117\066" +
    "\025\067\013\001\002\000\004\035\347\001\002\000\056" +
    "\022\uff94\023\uff94\035\uff94\040\uff94\041\uff94\042\uff94\043" +
    "\uff94\044\uff94\045\uff94\046\uff94\047\uff94\050\350\051\uff94" +
    "\052\uff94\053\uff94\055\uff94\056\uff94\057\uff94\060\uff94\065" +
    "\uff94\066\uff94\067\uff94\001\002\000\004\034\354\001\002" +
    "\000\054\022\uff97\023\uff97\035\uff97\040\uff97\041\uff97\042" +
    "\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97\051\uff97" +
    "\052\uff97\053\uff97\055\uff97\056\uff97\057\uff97\060\uff97\065" +
    "\uff97\066\uff97\067\uff97\001\002\000\054\022\uff94\023\uff94" +
    "\035\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045" +
    "\uff94\046\uff94\047\uff94\051\uff94\052\uff94\053\uff94\055\uff94" +
    "\056\uff94\057\uff94\060\uff94\065\uff94\066\uff94\067\uff94\001" +
    "\002\000\054\022\uff98\023\uff98\035\uff98\040\uff98\041\uff98" +
    "\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98\051" +
    "\uff98\052\uff98\053\uff98\055\uff98\056\uff98\057\uff98\060\uff98" +
    "\065\uff98\066\uff98\067\uff98\001\002\000\046\022\105\023" +
    "\104\040\136\041\113\042\147\043\031\044\010\045\141" +
    "\046\076\047\140\051\112\052\114\053\uff8b\055\077\056" +
    "\075\065\117\066\025\067\013\001\002\000\004\035\356" +
    "\001\002\000\054\022\uff99\023\uff99\035\uff99\040\uff99\041" +
    "\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99" +
    "\051\uff99\052\uff99\053\uff99\055\uff99\056\uff99\057\uff99\060" +
    "\uff99\065\uff99\066\uff99\067\uff99\001\002\000\010\035\uff9c" +
    "\057\uff9c\060\uff9c\001\002\000\004\034\362\001\002\000" +
    "\004\034\uff88\001\002\000\046\022\105\023\104\040\136" +
    "\041\113\042\147\043\031\044\010\045\141\046\076\047" +
    "\140\051\112\052\114\053\uff8b\055\077\056\075\065\117" +
    "\066\025\067\013\001\002\000\004\035\364\001\002\000" +
    "\056\022\uff8a\023\uff8a\035\uff8a\040\uff8a\041\uff8a\042\uff8a" +
    "\043\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\050\350\051" +
    "\uff8a\052\uff8a\053\uff8a\055\uff8a\056\uff8a\057\uff8a\060\uff8a" +
    "\065\uff8a\066\uff8a\067\uff8a\001\002\000\054\022\uff89\023" +
    "\uff89\035\uff89\040\uff89\041\uff89\042\uff89\043\uff89\044\uff89" +
    "\045\uff89\046\uff89\047\uff89\051\uff89\052\uff89\053\uff89\055" +
    "\uff89\056\uff89\057\uff89\060\uff89\065\uff89\066\uff89\067\uff89" +
    "\001\002\000\016\022\105\023\104\032\322\061\226\062" +
    "\223\065\225\001\002\000\004\004\370\001\002\000\054" +
    "\022\uffe1\023\uffe1\035\uffe1\040\uffe1\041\uffe1\042\uffe1\043" +
    "\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\051\uffe1\052\uffe1" +
    "\053\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\065\uffe1\066" +
    "\uffe1\067\uffe1\001\002\000\054\022\uffea\023\uffea\035\uffea" +
    "\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea\046" +
    "\uffea\047\uffea\051\uffea\052\uffea\053\uffea\055\uffea\056\uffea" +
    "\057\uffea\060\uffea\065\uffea\066\uffea\067\uffea\001\002\000" +
    "\054\022\uff60\023\uff60\035\uff60\040\uff60\041\uff60\042\uff60" +
    "\043\uff60\044\uff60\045\uff60\046\uff60\047\uff60\051\uff60\052" +
    "\uff60\053\uff60\055\uff60\056\uff60\057\uff60\060\uff60\065\uff60" +
    "\066\uff60\067\uff60\001\002\000\004\065\374\001\002\000" +
    "\006\004\375\010\376\001\002\000\054\022\uffdb\023\uffdb" +
    "\035\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045" +
    "\uffdb\046\uffdb\047\uffdb\051\uffdb\052\uffdb\053\uffdb\055\uffdb" +
    "\056\uffdb\057\uffdb\060\uffdb\065\uffdb\066\uffdb\067\uffdb\001" +
    "\002\000\016\022\105\023\104\032\322\061\226\062\223" +
    "\065\225\001\002\000\004\004\u0100\001\002\000\054\022" +
    "\uffda\023\uffda\035\uffda\040\uffda\041\uffda\042\uffda\043\uffda" +
    "\044\uffda\045\uffda\046\uffda\047\uffda\051\uffda\052\uffda\053" +
    "\uffda\055\uffda\056\uffda\057\uffda\060\uffda\065\uffda\066\uffda" +
    "\067\uffda\001\002\000\004\065\u0102\001\002\000\004\033" +
    "\u0103\001\002\000\004\034\uff7b\001\002\000\054\022\uff56" +
    "\023\uff56\035\uff56\040\uff56\041\uff56\042\uff56\043\uff56\044" +
    "\uff56\045\uff56\046\uff56\047\uff56\051\uff56\052\uff56\053\uff56" +
    "\055\uff56\056\uff56\057\uff56\060\uff56\065\uff56\066\uff56\067" +
    "\uff56\001\002\000\012\061\u0106\062\u0107\064\u0109\065\u0108" +
    "\001\002\000\004\033\u0110\001\002\000\004\033\u010e\001" +
    "\002\000\004\033\u010c\001\002\000\004\033\u010a\001\002" +
    "\000\004\004\u010b\001\002\000\054\022\uffb9\023\uffb9\035" +
    "\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\051\uffb9\052\uffb9\053\uffb9\055\uffb9\056" +
    "\uffb9\057\uffb9\060\uffb9\065\uffb9\066\uffb9\067\uffb9\001\002" +
    "\000\004\004\u010d\001\002\000\054\022\uffb8\023\uffb8\035" +
    "\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8" +
    "\046\uffb8\047\uffb8\051\uffb8\052\uffb8\053\uffb8\055\uffb8\056" +
    "\uffb8\057\uffb8\060\uffb8\065\uffb8\066\uffb8\067\uffb8\001\002" +
    "\000\004\004\u010f\001\002\000\054\022\uffba\023\uffba\035" +
    "\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba" +
    "\046\uffba\047\uffba\051\uffba\052\uffba\053\uffba\055\uffba\056" +
    "\uffba\057\uffba\060\uffba\065\uffba\066\uffba\067\uffba\001\002" +
    "\000\004\004\u0111\001\002\000\054\022\uffbb\023\uffbb\035" +
    "\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb" +
    "\046\uffbb\047\uffbb\051\uffbb\052\uffbb\053\uffbb\055\uffbb\056" +
    "\uffbb\057\uffbb\060\uffbb\065\uffbb\066\uffbb\067\uffbb\001\002" +
    "\000\014\036\175\037\167\061\u0113\062\u0114\065\u0116\001" +
    "\002\000\004\004\ufff2\001\002\000\004\004\ufff1\001\002" +
    "\000\004\004\uffee\001\002\000\006\004\uffef\032\227\001" +
    "\002\000\004\004\ufff0\001\002\000\004\004\u0119\001\002" +
    "\000\054\022\uffed\023\uffed\035\uffed\040\uffed\041\uffed\042" +
    "\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed\051\uffed" +
    "\052\uffed\053\uffed\055\uffed\056\uffed\057\uffed\060\uffed\065" +
    "\uffed\066\uffed\067\uffed\001\002\000\004\057\u011b\001\002" +
    "\000\004\005\u0128\001\002\000\004\006\u0126\001\002\000" +
    "\004\060\uff7d\001\002\000\006\057\u011b\060\uff80\001\002" +
    "\000\004\060\uff7f\001\002\000\004\035\u0125\001\002\000" +
    "\004\060\u0122\001\002\000\004\006\u0123\001\002\000\046" +
    "\022\105\023\104\040\136\041\113\042\147\043\031\044" +
    "\010\045\141\046\076\047\140\051\112\052\114\053\uff8b" +
    "\055\077\056\075\065\117\066\025\067\013\001\002\000" +
    "\004\035\uff7e\001\002\000\054\022\uff7c\023\uff7c\035\uff7c" +
    "\040\uff7c\041\uff7c\042\uff7c\043\uff7c\044\uff7c\045\uff7c\046" +
    "\uff7c\047\uff7c\051\uff7c\052\uff7c\053\uff7c\055\uff7c\056\uff7c" +
    "\057\uff7c\060\uff7c\065\uff7c\066\uff7c\067\uff7c\001\002\000" +
    "\046\022\105\023\104\040\136\041\113\042\147\043\031" +
    "\044\010\045\141\046\076\047\140\051\112\052\114\053" +
    "\uff8b\055\077\056\075\065\117\066\025\067\013\001\002" +
    "\000\006\057\uff82\060\uff82\001\002\000\012\061\u012a\062" +
    "\u012b\063\u012d\064\u012c\001\002\000\004\006\uff81\001\002" +
    "\000\004\006\uff86\001\002\000\004\006\uff85\001\002\000" +
    "\004\006\uff83\001\002\000\004\006\uff84\001\002\000\004" +
    "\002\uff44\001\002\000\006\005\314\065\uff6e\001\002\000" +
    "\004\034\u0131\001\002\000\046\022\105\023\104\040\136" +
    "\041\113\042\147\043\031\044\010\045\141\046\076\047" +
    "\140\051\112\052\114\053\uff8b\055\077\056\075\065\117" +
    "\066\025\067\013\001\002\000\004\035\u0133\001\002\000" +
    "\020\040\uff6f\041\uff6f\042\uff6f\043\uff6f\044\uff6f\066\uff6f" +
    "\067\uff6f\001\002\000\006\054\u0135\065\315\001\002\000" +
    "\004\032\uff70\001\002\000\004\005\u0139\001\002\000\022" +
    "\002\uff43\040\u012f\041\026\042\012\043\031\044\010\066" +
    "\025\067\013\001\002\000\004\002\uff42\001\002\000\004" +
    "\054\u0135\001\002\000\004\065\u013b\001\002\000\006\004" +
    "\u013c\010\u013d\001\002\000\054\022\uffc6\023\uffc6\035\uffc6" +
    "\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046" +
    "\uffc6\047\uffc6\051\uffc6\052\uffc6\053\uffc6\055\uffc6\056\uffc6" +
    "\057\uffc6\060\uffc6\065\uffc6\066\uffc6\067\uffc6\001\002\000" +
    "\006\064\u013f\065\u013e\001\002\000\004\004\uffc7\001\002" +
    "\000\004\004\uffc8\001\002\000\004\004\u0141\001\002\000" +
    "\054\022\uffc5\023\uffc5\035\uffc5\040\uffc5\041\uffc5\042\uffc5" +
    "\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\051\uffc5\052" +
    "\uffc5\053\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\065\uffc5" +
    "\066\uffc5\067\uffc5\001\002\000\006\002\uff46\040\uff46\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0140\000\054\007\015\017\004\020\033\022\032\023" +
    "\014\031\016\032\021\035\034\036\005\041\031\042\010" +
    "\105\026\106\017\115\023\116\006\117\022\120\013\121" +
    "\003\122\036\124\027\126\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\007\015\017" +
    "\004\020\033\022\032\023\014\031\016\032\021\035\034" +
    "\036\005\041\031\042\010\106\017\115\023\116\006\117" +
    "\022\120\u0141\126\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\105" +
    "\u0136\124\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\104\u012f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\007\015\017" +
    "\004\020\033\022\032\023\014\031\016\032\021\035\034" +
    "\036\005\041\031\042\010\106\017\115\023\116\006\117" +
    "\022\120\u012d\126\035\001\001\000\004\104\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\026\062" +
    "\103\061\110\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\026\067\103\061\110\056\001\001\000\002\001\001\000" +
    "\126\005\157\007\107\011\124\012\115\013\110\016\131" +
    "\017\150\020\101\021\141\022\156\023\100\024\142\030" +
    "\130\031\126\032\102\033\133\035\105\036\147\037\117" +
    "\041\132\042\153\043\145\044\143\045\125\046\072\047" +
    "\122\050\073\051\134\052\155\062\106\063\120\064\127" +
    "\065\152\067\123\074\154\075\144\102\077\113\114\114" +
    "\151\125\136\127\071\132\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\061\360\133\357\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\126\005\157\007\107\011\124" +
    "\012\115\013\110\016\131\017\150\020\101\021\141\022" +
    "\156\023\100\024\142\030\130\031\126\032\102\033\133" +
    "\035\105\036\147\037\117\041\132\042\153\043\145\044" +
    "\143\045\125\046\072\047\122\050\073\051\134\052\155" +
    "\062\106\063\120\064\127\065\356\067\123\074\154\075" +
    "\144\102\077\113\114\114\151\125\136\127\071\132\121" +
    "\001\001\000\006\061\337\134\335\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\002\170\025\172\054\171" +
    "\055\173\001\001\000\002\001\001\000\010\002\213\057" +
    "\211\060\210\001\001\000\002\001\001\000\004\053\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\170\025\177\054\171\055\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\207\054\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\135\244\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\213\057\263\001\001\000\022\002\213\005\157\012\216" +
    "\014\220\056\221\057\211\060\223\113\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\257\053\261" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\135" +
    "\244\001\001\000\004\005\227\001\001\000\002\001\001" +
    "\000\012\002\235\111\231\112\234\113\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\235\111\231\112\243\113" +
    "\230\001\001\000\002\001\001\000\004\004\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\213\057" +
    "\251\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\005\157\012\216\014\220\056\221\113\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\157\012\216\014\262\113\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\005" +
    "\157\012\216\014\276\070\300\071\277\072\301\073\275" +
    "\107\302\113\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\126\005\157\007" +
    "\107\011\124\012\115\013\110\016\131\017\150\020\101" +
    "\021\141\022\156\023\100\024\142\030\130\031\126\032" +
    "\102\033\133\035\105\036\147\037\117\041\132\042\153" +
    "\043\145\044\143\045\125\046\072\047\122\050\073\051" +
    "\134\052\155\062\106\063\120\064\127\065\305\067\123" +
    "\074\154\075\144\102\077\113\114\114\151\125\136\127" +
    "\071\132\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\157\012\216\014\310\113\217\001\001\000" +
    "\002\001\001\000\012\005\157\012\216\014\312\113\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\157\012\216\014\317" +
    "\015\320\113\217\001\001\000\004\003\326\001\001\000" +
    "\002\001\001\000\014\005\157\012\216\014\317\015\322" +
    "\113\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\157\012\216" +
    "\014\317\015\334\113\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\213\057\211\060\341\123\340\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\135\244\001\001\000\002\001" +
    "\001\000\002\001\001\000\126\005\157\007\107\011\124" +
    "\012\115\013\110\016\131\017\150\020\101\021\141\022" +
    "\156\023\100\024\142\030\130\031\126\032\102\033\133" +
    "\035\105\036\147\037\117\041\132\042\153\043\145\044" +
    "\143\045\125\046\072\047\122\050\073\051\134\052\155" +
    "\062\106\063\120\064\127\065\345\067\123\074\154\075" +
    "\144\102\077\113\114\114\151\125\136\127\071\132\121" +
    "\001\001\000\002\001\001\000\006\027\350\066\351\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\352" +
    "\001\001\000\002\001\001\000\126\005\157\007\107\011" +
    "\124\012\115\013\110\016\131\017\150\020\101\021\141" +
    "\022\156\023\100\024\142\030\130\031\126\032\102\033" +
    "\133\035\105\036\147\037\117\041\132\042\153\043\145" +
    "\044\143\045\125\046\072\047\122\050\073\051\134\052" +
    "\155\062\106\063\120\064\127\065\354\067\123\074\154" +
    "\075\144\102\077\113\114\114\151\125\136\127\071\132" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\126\005" +
    "\157\007\107\011\124\012\115\013\110\016\131\017\150" +
    "\020\101\021\141\022\156\023\100\024\142\030\130\031" +
    "\126\032\102\033\133\035\105\036\147\037\117\041\132" +
    "\042\153\043\145\044\143\045\125\046\072\047\122\050" +
    "\073\051\134\052\155\062\106\063\120\064\127\065\362" +
    "\067\123\074\154\075\144\102\077\113\114\114\151\125" +
    "\136\127\071\132\121\001\001\000\002\001\001\000\004" +
    "\066\364\001\001\000\002\001\001\000\014\005\157\012" +
    "\216\014\317\015\366\113\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\005\157\012\216\014\317\015\376\113\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\u0116\010\u0117\113\u0114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\077\u011d" +
    "\100\u011c\130\u011b\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\101\u011f\131\u0120\001\001\000\010\077\u011d" +
    "\100\u011e\130\u011b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\126\005\157" +
    "\007\107\011\124\012\115\013\110\016\131\017\150\020" +
    "\101\021\141\022\156\023\100\024\142\030\130\031\126" +
    "\032\102\033\133\035\105\036\147\037\117\041\132\042" +
    "\153\043\145\044\143\045\125\046\072\047\122\050\073" +
    "\051\134\052\155\062\106\063\120\064\127\065\u0123\067" +
    "\123\074\154\075\144\102\077\113\114\114\151\125\136" +
    "\127\071\132\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\126\005\157\007\107\011\124\012\115\013\110" +
    "\016\131\017\150\020\101\021\141\022\156\023\100\024" +
    "\142\030\130\031\126\032\102\033\133\035\105\036\147" +
    "\037\117\041\132\042\153\043\145\044\143\045\125\046" +
    "\072\047\122\050\073\051\134\052\155\062\106\063\120" +
    "\064\127\065\u0126\067\123\074\154\075\144\102\077\113" +
    "\114\114\151\125\136\127\071\132\121\001\001\000\002" +
    "\001\001\000\004\076\u0128\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\126\005\157\007\107\011\124\012\115\013\110" +
    "\016\131\017\150\020\101\021\141\022\156\023\100\024" +
    "\142\030\130\031\126\032\102\033\133\035\105\036\147" +
    "\037\117\041\132\042\153\043\145\044\143\045\125\046" +
    "\072\047\122\050\073\051\134\052\155\062\106\063\120" +
    "\064\127\065\u0131\067\123\074\154\075\144\102\077\113" +
    "\114\114\151\125\136\127\071\132\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\007\015\017\004\020\033" +
    "\022\032\023\014\031\016\032\021\035\034\036\005\041" +
    "\031\042\010\106\017\115\023\116\006\117\022\120\u0137" +
    "\126\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\u013f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntax$actions {


    LexerCup lex;
    private Object symbolFactory;
    Symbol token;
    Boolean errores = false;
    HashMap<String, ArrayList<String>> listaTablaSimbolos = new HashMap<String, ArrayList<String>>();
    String currentHash;
    int currentTemp = 0;
    StringBuilder codIn3D = new StringBuilder();
    ArrayList<String> elementosArray = new ArrayList<>();
    ArrayList<String> elementosParametros = new ArrayList<>();
    int contador_for = 0;
    int contador_while = 0;
    int contador_if = 0;
    int contador_fin_if = 1;
    int contador_if_anidados = 0;
    int contador_else = 0;
    int contador_fin_for = 1;
    int contador_for_anidados =0;
    int contador_case = 0;
    int contador_switch = 0;
    String tipoSwitch = "";
    String varSwitch = "";
    String fatherCurrentHash = null;
    LinkedList<String> hashTree = new LinkedList<>();
    int currentHashPos = 0;
    StringBuilder mipsData = new StringBuilder();
    StringBuilder mipsMain = new StringBuilder();
    StringBuilder mipsFunciones = new StringBuilder();
    String stringCreationMips = "";
    int mipsTemp = 0;
    boolean existeOpeArit = false;
    boolean existeOpeRela = false;
    int bandera = 0;


    public String existeFuncion(String idBuscado){
        Collection<ArrayList<String>> valores = listaTablaSimbolos.values();
        for (ArrayList<String> tablaSimbolos : valores){
            for (String elemento : tablaSimbolos) {
                // Divide el elemento en ID y tipo
                String[] partes = elemento.split(":");
                if (partes[0].equals("tipo") && partes[2].equals(idBuscado)) { // Verifica si el ID coincide con el ID buscado
                    return partes[3].trim(); // Se encontró el ID de la función y se envía el tipo de la función
                }
            }
        }
        return null;   
    }

    /* Constructor del parser, recibe como parámetro el lexer que se va a utilizar 
        Entradas: Lexer lex
        Salidas: Ninguna
        Restricciones: Ninguna
    */

    @SuppressWarnings("deprecation")
    public void parser(LexerCup lex){
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
    
    /* Método que se encarga de retornar el valor booleao de errores. Indicando si hubo errores o no
        Entradas: Ninguna
        Salidas: errores
        Restricciones: Ninguna
    */
    public boolean getErrores(){
        return errores;
    }

    /* Método que se encarga de retornar el string buffer del código intermedio 3 direcciones
        Entradas: Ninguna
        Salidas: codIn3D
        Restricciones: Ninguna
    */
    public StringBuilder getCodIn3D(){
        return codIn3D;
    }

    /*
        Método que se encarga de retornar el string buffer del código MIPS
        Entradas: Ninguna
        Salidas: mipsData
        Restricciones: Ninguna
    */
    public StringBuilder getMipsData(){
        return mipsData;
    }

    /*
        Método que se encarga de retornar el string buffer del código MIPS
        Entradas: Ninguna
        Salidas: mipsMain
        Restricciones: Ninguna
    */
    public StringBuilder getMipsFunciones(){
        return mipsFunciones;
    }

    /*
        Método que se encarga de retornar el string buffer del código MIPS
        Entradas: Ninguna
        Salidas: mipsMain
        Restricciones: Ninguna
    */
    public StringBuilder getMipsMain(){
        return mipsMain;
    }
    /* Método que se encarga de imprimir la tabla de símbolos
        Entradas: Ninguna
        Salidas: Ninguna
        Restricciones: Ninguna
    */
    private void imprimirTablaSimbolos(){
        for(String key: listaTablaSimbolos.keySet()){
            System.out.println("-------------------------");
            System.out.println("Tabla de símbolos: "+key);
            System.out.println("Valores: ");
            for(String item: listaTablaSimbolos.get(key)){
                System.out.println(item);
            }
            System.out.println("");
        }
    }

     /* Método que se encarga de imprimir el string buffer del código intermedio 3 direcciones en la terminal.
        Entradas: Ninguna
        Salidas: Ninguna
        Restricciones: Ninguna
    */
    private void imprimirCodigo3D(){
        System.out.println("++++++++ CODIGO 3D +++++++++");
        System.out.println("");
        System.out.println(codIn3D.toString());
    }


    /* Método que se encarga de imprimir el string buffer del código MIPS en la terminal.
        Entradas: Ninguna
        Salidas: Ninguna
        Restricciones: Ninguna
    */
    private void imprimirCodigoMIPS(){
        System.out.println("++++++++ CODIGO MIPS +++++++++");
        System.out.println("");
        System.out.println(".data\n");
        System.out.println(mipsData.toString());
        System.out.println(".text\n");
        System.out.println(".globl main\n");
        System.out.println(mipsFunciones.toString());
        System.out.println(mipsMain.toString());
        System.out.println("   li $v0, 10");
        System.out.println("   syscall");
    }

    /* Método que se encarga de imprimir el string buffer del código MIPS en un archivo .asm.
        Entradas: Ninguna
        Salidas: Ninguna
        Restricciones: Ninguna
    */
    private int addMipsTemp(){
        if (mipsTemp == 9){
            mipsTemp = 0;
        }else{
            mipsTemp++;
        }
        return mipsTemp;
    }

    /*
        Método que se encarga de retornar la tabla de símbolos
        Entradas: Ninguna
        Salidas: tabla de símbolos
        Restricciones: Ninguna
    */
    public HashMap<String, ArrayList<String>> getTablaSimbolos(){
        return listaTablaSimbolos;
    }

    /* Método que se encarga de imprimir en consola el error sintáctico
        Entradas: String error. Error que se va a imprimir
        Salidas: Ninguna. Imprime en consola el error
        Restricciones: Ninguna
    */
    private void manejoError(String error, String tipoError){
        errores = true;
        System.out.println("Error "+tipoError+": "+ error );
        System.out.println("Se continua con el análisis "+tipoError);
    } 

    /* Método que se encarga de buscar en la tabla de símbolos actual un ID y devolver su tipo.
        Entradas: lista: lista de elementos de la tabla de símbolos actual, idBuscado: ID que se requiere buscar y queBusca: si busca el ID de una variable o de una función. 
        Salidas: String o null
        Restricciones: Ninguna
    */
     private String buscarID_o_tipoID(ArrayList<String> tablaSimbolos, String idBuscado, String queBusca) {
        int treeSize = hashTree.indexOf(hashTree.get(currentHashPos));
        for (int i = treeSize; i >= 0; i--) {
            tablaSimbolos = listaTablaSimbolos.get(hashTree.get(i));
            if(queBusca.equals("id")){
                // Recorre los elementos del ArrayList
                for (String elemento : tablaSimbolos) {
                    // Divide el elemento en ID y tipo
                    String[] partes = elemento.split(": ");
                    if (partes[0].equals(idBuscado)) { // Verifica si el ID coincide con el ID buscado
                        return partes[1]; // Se encontró el ID y se envía el tipo del ID
                    }
                    if (partes[0].equals("Parámetro") && partes[1].equals(idBuscado)) { // Verifica si el ID coincide con el ID buscado
                        return partes[2].trim(); // Se encontró el ID y se envía el tipo del ID
                    }	
                }
            }
            else if(queBusca.equals("funcion")){
                // Recorre los elementos del ArrayList
                for (String elemento : tablaSimbolos) {
                    // Divide el elemento en ID y tipo
                    String[] partes = elemento.split(":");
                
                    if (partes[1].equals(idBuscado)) { // Verifica si el ID coincide con el ID buscado
                        return partes[2]; // Se encontró el ID de la función y se envía el tipo de la función
                    }
                }
            }
            else if(queBusca.equals("tamañoArray")){
                // Recorre los elementos del ArrayList
                for (String elemento : tablaSimbolos) {
                    // Divide el elemento en ID y tipo
                    String[] partes = elemento.split(": ");
                
                    if (partes[0].equals(idBuscado)) { // Verifica si el ID coincide con el ID buscado
                        return partes[2]; // Se encontró el ID de la función y se envía el tipo de la función
                    }
                }

            }
        }
        return null;       
    }

    private ArrayList<String> obtenerParametrosFuncion(String funcion){
        Collection<ArrayList<String>> valores = listaTablaSimbolos.values();
        ArrayList<String> parametros = new ArrayList<String>();
        for (ArrayList<String> tablaSimbolos : valores){
            // Recorre los elementos del ArrayList
            for (int i = 0; i < tablaSimbolos.size(); i++) {
                String elemento = tablaSimbolos.get(i);
                // Divide el elemento en ID y tipo
                String[] partes = elemento.split(":");
                if (partes[0].equals("tipo") && partes[2].equals(funcion)) { // Verifica si el ID coincide con el ID buscado
                    for (int j = i+1; j < tablaSimbolos.size(); j++){
                        String linea = tablaSimbolos.get(j); // Se encontró el ID de la función y se envía el tipo de la función
                        if(linea.contains("Parámetro")){
                            parametros.add(linea);
                        }
                    }
                    if (parametros.size() != 0){
                        return parametros;
                    }
                }
            }
        }
        return null;   
    }
    
    /*  Método que se encarga de realizar las operaciones aritmeticas
        Entradas: Dos operando y un operador de tipo String 
        Salidas: 
        Restricciones: Ninguna
    */
    private void ejecutaOpeArit (String operacion){
        operacion = operacion.substring(1,operacion.length()-1);
        String[] operaTemp = operacion.split("'");
        String operando1 = "";
        String operando2 = "";
        String operador = "";
        String instruccionMips = "";
        String instruccion3D = "";
        int pos = 0;
        int contParent = 0;
        String temp = "";
        for(String cadena:operaTemp){
            for(int i = 0; i < cadena.length();i++){
                if(cadena.charAt(i) == '('){
                    contParent++;
                }
            }
            if(cadena.charAt(cadena.length()-1) == ')'){
                temp += "'" + cadena;
                contParent--;
            }else{
                if(cadena.charAt(0) == '('){
                    temp += cadena + "'";
                }else{
                    temp += cadena;
                }
            }
            if(contParent <= 0){
                contParent = 0;
                switch(pos){
                    case 0:
                        operando1 = temp;
                        temp = "";
                        pos = 1;
                        break;
                    case 1:
                        operador = cadena;
                        temp = "";
                        pos = 2;
                        break;
                    default:
                        operando2 = temp;
                        temp = "";
                        contParent = 0;
                        break;
                }
            }
        }        
        
        if (operando1.charAt(0)=='('){ 
           ejecutaOpeArit(operando1);
           //Codigo Mips
           instruccionMips += ("\n   move $t8, $t0");  
           instruccion3D += ("\n t8 = t1");
        }else{
            if (buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), operando1, "id") == null){
                instruccionMips += ("\n   li $t8, "+ operando1);
                instruccion3D += ("\n t8 = "+ operando1);                                        
            }else{
                instruccionMips += ("\n   lw $t8, "+ operando1);
                instruccion3D += ("\n t8 = "+ operando1);                                        
            }
        }

        if (operando2.charAt(0)==('(')){ 
           ejecutaOpeArit(operando2);
           //Codigo Mips
           instruccionMips += ("\n   move $t9, $t0");
           instruccion3D += ("\n t9 = t1");
        }else{
            if (buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), operando2, "id") == null){
                instruccionMips += ("\n   li $t9, "+ operando2);
                instruccion3D += ("\n t9 = "+ operando2);                                        
            }else{
                instruccionMips += ("\n   lw $t9, "+ operando2);
                instruccion3D += ("\n t9 = "+ operando2);                                        
            }
        }
        
        instruccionMips += ("\n   move $a0, $t8 \n   move $a1, $t9 \n   move $a2, " + operador + "\n   jal calculate");
        instruccion3D += "\n t7 = " + operador +  "\n t1 = call calculation(t8,t9,t7)"; 
        
        mipsMain.append(instruccionMips);
        codIn3D.append(instruccion3D);
    }

  /*  Método que se encarga de realizar las operaciones relacionales
        Entradas: Dos operando y un operador de tipo String 
        Salidas: 
        Restricciones: Ninguna
    */
    private void ejecutaOpeRela (String operacion, String sigNegacion){
        operacion = operacion.substring(1,operacion.length()-1);
        String[] operaTemp = operacion.split("'");
        String operando1 = "";
        String operando2 = "";
        String operador = "";
        String instruccionMips = "";
        String instruccion3D = "";
        int pos = 0;
        int contParent = 0;
        String temp = "";
        for(String cadena:operaTemp){
            for(int i = 0; i < cadena.length();i++){
                if(cadena.charAt(i) == '['){
                    contParent++;
                }
            }
            if(cadena.charAt(cadena.length()-1) == ']'){
                temp += "'" + cadena;
                contParent--;
            }else{
                if(cadena.charAt(0) == '['){
                    temp += cadena + "'";
                }else{
                    temp += cadena;
                }
            }
            if(contParent <= 0){
                contParent = 0;
                switch(pos){
                    case 0:
                        operando1 = temp;
                        temp = "";
                        pos = 1;
                        break;
                    case 1:
                        operador = cadena;
                        temp = "";
                        pos = 2;
                        break;
                    default:
                        operando2 = temp;
                        temp = "";
                        contParent = 0;
                        break;
                }
            }
        }        
        
        if (operando1.charAt(0)=='['){ 
           ejecutaOpeRela(operando1,sigNegacion);
           //Codigo Mips
           instruccionMips += ("\n   move $t8, $t0");  
           instruccion3D += ("\n t8 = t1");
        }else{
            if (buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), operando1, "id") == null){
                instruccionMips += ("\n   li $t8, "+ operando1);
                instruccion3D += ("\n t8 = "+ operando1);                                        
            }else{
                instruccionMips += ("\n   lw $t8, "+ operando1);
                instruccion3D += ("\n t8 = "+ operando1);                                        
            }
        }

        if (operando2.charAt(0)==('[')){ 
           ejecutaOpeRela(operando2,sigNegacion);
           //Codigo Mips
           instruccionMips += ("\n   move $t9, $t0");
           instruccion3D += ("\n t9 = t1");
        }else{
            if (buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), operando2, "id") == null){
                instruccionMips += ("\n   li $t9, "+ operando2);
                instruccion3D += ("\n t9 = "+ operando2);                                        
            }else{
                instruccionMips += ("\n   lw $t9, "+ operando2);
                instruccion3D += ("\n t9 = "+ operando2);                                        
            }
        }

        instruccionMips += ("\n   move $a0, $t8 \n   move $a1, $t9 \n   move $a2, " + operador + "\n   jal calculate");
        if (sigNegacion.equals("!")){
            instruccion3D += "\n t2 = t8 " + operador +" t9 \n t1 = !t2" ; 
        }else{
            instruccion3D += "\n t1 = t8 " + operador +" t9" ; 
        }
        mipsMain.append(instruccionMips);
        codIn3D.append(instruccion3D);
    }



    private void condicionWhile (){
        if (bandera == 1){
            codIn3D.append("\n  if t1 goto bloque_if" + contador_if);
            codIn3D.append("\n  goto end_fin_" + contador_if);
            codIn3D.append("\nbloque_if" + contador_if + ":");
        }else{
            codIn3D.append("\n  if t1 goto bloque_while" + contador_while);
            codIn3D.append("\n  goto end_while_" + contador_while);
            codIn3D.append("\nbloque_while" + contador_while + ":");
            }
    }



  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // INICIO ::= PROGRAMA 
            {
              Object RESULT =null;
		 /*imprimirTablaSimbolos(); */imprimirCodigo3D(); /*imprimirCodigoMIPS();*/
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",80, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // PROGRAMA ::= VALORESPROGRAMA FUNCMAIN VALORESPROGRAMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",79, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // PROGRAMA ::= VALORESPROGRAMA FUNCMAIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",79, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // PROGRAMA ::= FUNCMAIN VALORESPROGRAMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",79, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // PROGRAMA ::= FUNCMAIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",79, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // VALORESPROGRAMA ::= VALORPROGRAMA VALORESPROGRAMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESPROGRAMA",78, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // VALORPROGRAMA ::= COMENTARIOS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORPROGRAMA",76, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // VALORPROGRAMA ::= GLOBALVAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORPROGRAMA",76, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // VALORPROGRAMA ::= CREAFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORPROGRAMA",76, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // GLOBALVAR ::= CREAASIGVARSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",75, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // GLOBALVAR ::= CREAVARSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",75, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // GLOBALVAR ::= CREAASIGVARCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",75, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // GLOBALVAR ::= CREAVARCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",75, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // GLOBALVAR ::= CREAASIGVARBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",75, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // GLOBALVAR ::= CREAVARBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",75, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // GLOBALVAR ::= CREAASIGVARFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",75, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // GLOBALVAR ::= CREAVARFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",75, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // GLOBALVAR ::= CREAASIGVARINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",75, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // GLOBALVAR ::= CREAVARINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",75, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // VALORESBLOQUECODIGO ::= SENTLLAMARFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBLOQUECODIGO",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // VALORESBLOQUECODIGO ::= SENTRETURN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBLOQUECODIGO",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // VALORESBLOQUECODIGO ::= RESERVBREAK ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBLOQUECODIGO",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // VALORESBLOQUECODIGO ::= ESTRUCTCONTROL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBLOQUECODIGO",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // VALORESBLOQUECODIGO ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBLOQUECODIGO",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // ESTRUCTCONTROL ::= ESTRUCTWHILE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTCONTROL",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // ESTRUCTCONTROL ::= ESTRUCTFORRANGE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTCONTROL",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // ESTRUCTCONTROL ::= ESTRUCTSWITCH 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTCONTROL",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // ESTRUCTCONTROL ::= ESTRUCTIF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTCONTROL",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // SENTENCIA ::= FUNCESCRIBIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // SENTENCIA ::= FUNCLEER 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // SENTENCIA ::= VARIABLES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // SENTLLAMARFUNC ::= LLAMARFUNC ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTLLAMARFUNC",74, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // LLAMARFUNC ::= IDENTIFICADOR SIGABREPARENT SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LLAMARFUNC",73, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // LLAMARFUNC ::= IDENTIFICADOR SIGABREPARENT PARAMLLAMAFUNC SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LLAMARFUNC",73, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // PARAMLLAMAFUNC ::= PARAMLLAMARFUNC COMA PARAMLLAMAFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMAFUNC",72, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // PARAMLLAMAFUNC ::= PARAMLLAMARFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMAFUNC",72, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // PARAMLLAMARFUNC ::= LLAMARFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMARFUNC",71, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // PARAMLLAMARFUNC ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = id; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMARFUNC",71, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // PARAMLLAMARFUNC ::= LITBOOL 
            {
              Object RESULT =null;
		int litboolleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litboolright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litbool = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litbool+": "+"bool"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMARFUNC",71, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // PARAMLLAMARFUNC ::= LITCHAR 
            {
              Object RESULT =null;
		int litcharleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litcharright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litchar = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litchar+": "+"char"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMARFUNC",71, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // PARAMLLAMARFUNC ::= LITFLOAT 
            {
              Object RESULT =null;
		int litfloatleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litfloatright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litfloat = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litfloat.toString()+": "+"float"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMARFUNC",71, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // PARAMLLAMARFUNC ::= LITINT 
            {
              Object RESULT =null;
		int litIntleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litIntright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litInt = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litInt.toString()+": "+"int"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMARFUNC",71, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // INIFUN ::= TIPORETORNO IDENTIFICADOR 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                    String tipoTabla = "tipo:funcion:"+id.toString()+": "+tip.toString();
                    if((!(tip.toString().equals("int"))) && (!(tip.toString().equals("float"))) && (!(tip.toString().equals("bool")))){
                        currentHash = id.toString();
                        hashTree.addLast(currentHash);
                        manejoError("El tipo de dato de retorno de la función "+id.toString()+" no es valido", "semántico");
                    }else{
                        if(existeFuncion(id.toString()) == null){
                             ArrayList<String> listaSimbolos = new ArrayList<String>();
                             currentHash = id.toString();
                             listaSimbolos.add(tipoTabla);
                             hashTree.addLast(currentHash);
                             listaTablaSimbolos.put(currentHash, listaSimbolos);
                             RESULT = tip.toString()+" "+id.toString();
                             codIn3D.append("\n_"+id.toString()+"_begin:");
                             mipsMain.append("\n"+id.toString()+":");
                        }
                        else{
                             currentHash = id.toString();
                             hashTree.addLast(currentHash);
                             manejoError("Función "+id.toString()+" ya existe", "semántico");
                        }
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INIFUN",77, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // TIPORETORNO ::= TIPOBOOL 
            {
              Object RESULT =null;
		 RESULT = "bool";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPORETORNO",84, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // TIPORETORNO ::= TIPOFLOAT 
            {
              Object RESULT =null;
		 RESULT = "float";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPORETORNO",84, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // TIPORETORNO ::= TIPOINT 
            {
              Object RESULT =null;
		 RESULT = "int";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPORETORNO",84, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CREAFUNC ::= INIFUN PARAMFUNCIONES SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES 
            {
              Object RESULT =null;
		  
                    codIn3D.append("\n_"+hashTree.getLast()+"_end:"); 
                    hashTree.removeLast(); 
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAFUNC",68, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // INIFUNMAIN ::= TIPOINT SEPARADOR RESERVMAIN 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                    String tipoTabla;
                    if(id.toString().equals("main")){
                     tipoTabla = "tipo:funcion:"+id.toString()+": "+tip.toString();
                    }
                    else{
                     tipoTabla = "tipo:funcion:"+id.toString()+": "+tip.toString();
                    }
                    if(existeFuncion(id.toString()) == null){
                         ArrayList<String> listaSimbolos = new ArrayList<String>();
                         currentHash = id.toString();
                         listaSimbolos.add(tipoTabla);
                         hashTree.addLast(currentHash);
                         listaTablaSimbolos.put(currentHash, listaSimbolos);
                         RESULT = tip.toString()+" "+id.toString();
                         codIn3D.append("\n_"+id.toString()+"_begin:");
                         mipsMain.append("\n"+id.toString()+":");
                    }
                    else{
                         currentHash = id.toString();
                         hashTree.addLast(currentHash);
                         manejoError("Función "+id.toString()+" ya existe", "semántico");
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INIFUNMAIN",82, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // FUNCMAIN ::= INIFUNMAIN PARAMFUNCIONES SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES 
            {
              Object RESULT =null;
		  
                    codIn3D.append("\n_main_end:"); 
                    hashTree.removeLast(); 
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCMAIN",67, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // PARAMFUNCIONES ::= SIGABREPARENT SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCIONES",66, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // PARAMFUNCIONES ::= SIGABREPARENT PARAMETROFUNCION SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCIONES",66, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // PARAMETROFUNCION ::= PARMFUNC COMA PARAMETROFUNCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETROFUNCION",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // PARAMETROFUNCION ::= PARMFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETROFUNCION",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // PARMFUNC ::= TIPOSPARAM SEPARADOR IDENTIFICADOR 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARMFUNC",70, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // TIPOSPARAM ::= TIPOCHAR 
            {
              Object RESULT =null;
		 RESULT = "char";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPOSPARAM",65, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // TIPOSPARAM ::= TIPOBOOL 
            {
              Object RESULT =null;
		 RESULT = "bool";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPOSPARAM",65, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // TIPOSPARAM ::= TIPOFLOAT 
            {
              Object RESULT =null;
		 RESULT = "float";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPOSPARAM",65, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // TIPOSPARAM ::= TIPOINT 
            {
              Object RESULT =null;
		 RESULT = "int";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPOSPARAM",65, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // INISWITCH ::= RESERVSWITCH SIGABREPARENT IDENTIFICADOR SIGCIERRAPARENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 
                            String tip = buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), id.toString(), "id");
                            if (tip == null || id.equals("error_semantico")) {
                                if (!(id.equals("error_semantico"))){
                                    manejoError("El ID: "+id+" no ha sido creado en la funcion de "+currentHash, "semántico");
                                }
                                RESULT = "error_semantico";
                            }else{ if (id.equals("bool")) {
                                manejoError("El ID: "+id+" no puede ser de tipo bool. "+currentHash, "semántico");
                                RESULT = "error_semantico";
                            }else{
                                tipoSwitch = tip;
                                varSwitch = id.toString();
                                String tipoTabla = "tipo:switch:"+"switch_"+(++contador_switch)+": "+tip.toString();
                                ArrayList<String> listaSimbolos = new ArrayList<String>();
                                fatherCurrentHash = currentHash;
                                currentHash = "switch_"+(contador_switch)+"_"+fatherCurrentHash;
                                listaSimbolos.add(tipoTabla);
                                hashTree.addLast(currentHash);
                                currentHashPos++;
                                listaTablaSimbolos.put(currentHash, listaSimbolos);
                                codIn3D.append("\n\n_begin_switch_"+(contador_switch)+":"); 
                                mipsMain.append("\n\n_switch_"+(contador_switch)+":"); 
                            }}
                    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INISWITCH",85, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ESTRUCTSWITCH ::= INISWITCH SIGABRELLAVES CASES DEFAULT SIGCIERRALLAVES 
            {
              Object RESULT =null;
		
                            codIn3D.append("\n_end_switch_"+(contador_switch)+":");
                            mipsMain.append("\n_end_switch_"+(contador_switch)+":");
                            contador_fin_if += 1;  
                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTSWITCH",64, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // INIDEFAULT ::= 
            {
              Object RESULT =null;
		 
                                String tipoTabla = "tipo:bloque:case";
                                ArrayList<String> listaSimbolos = new ArrayList<String>();
                                fatherCurrentHash = currentHash;
                                currentHash = "default_"+(contador_switch)+"_"+fatherCurrentHash;
                                listaSimbolos.add(tipoTabla);
                                hashTree.addLast(currentHash);
                                currentHashPos++;
                                listaTablaSimbolos.put(currentHash, listaSimbolos);
                                codIn3D.append("\n\n_begin_default_"+(contador_switch)+":");

                                mipsMain.append("\n\n_begin_default_"+(contador_switch)+":");
                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INIDEFAULT",87, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // DEFAULT ::= INIDEFAULT RESERVDEFAULT DOSPUNTOS BLOQUECODIGO 
            {
              Object RESULT =null;
		  codIn3D.append("\n_end_default_"+(contador_switch) + ":"); mipsMain.append("\n_end_default_"+(contador_switch) + ":"); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DEFAULT",63, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CASES ::= CASE CASES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASES",62, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CASES ::= CASE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASES",62, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // INICASE ::= RESERVCASE SEPARADOR LITERAL 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		  
                            String tip = tipoSwitch;
                            String[] partes_lit = lit.toString().split(": ");
                            if (!(tip.equals(partes_lit[1]))){
                                manejoError("El literal del case: 'case#"+partes_lit[0]+"': No es del mismo tipo de la variable del switch", "semántico");
                                RESULT = "error_semantico";
                            }else{
                                String tipoTabla = "tipo:bloque:case";
                                ArrayList<String> listaSimbolos = new ArrayList<String>();
                                fatherCurrentHash = currentHash;
                                currentHash = "case_"+(contador_case++)+"_"+fatherCurrentHash;
                                listaSimbolos.add(tipoTabla);
                                hashTree.addLast(currentHash);
                                currentHashPos++;
                                listaTablaSimbolos.put(currentHash, listaSimbolos);
                                codIn3D.append("\n\n_begin_case_"+(contador_case)+":");
                                codIn3D.append("\n  t1, "+ partes_lit[0] + "\n" + "  t2, "+varSwitch + "\n" + "  t3 = t1 == t2\n" + "  if ! t3 goto_begin_case_"+(contador_case));

                                mipsMain.append("\n\n_begin_case_"+(contador_case)+":");
                                mipsMain.append("\n  li $t0, "+ partes_lit[0] + "\n" +"  lw $t1, "+varSwitch + "\n" +"  bne $t0, $t1, _end_case_"+(contador_case));
                            }
                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICASE",86, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CASE ::= INICASE DOSPUNTOS BLOQUECODIGO 
            {
              Object RESULT =null;
		 codIn3D.append("\n_end_case_"+(contador_case) + ":"); mipsMain.append("\n_end_case_"+(contador_case) + ":"); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASE",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // LITERAL ::= LITSTRING 
            {
              Object RESULT =null;
		int litstringleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litstringright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litstring = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litstring+": "+"string"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITERAL",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // LITERAL ::= LITCHAR 
            {
              Object RESULT =null;
		int litcharleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litcharright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litchar = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litchar+": "+"char"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITERAL",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // LITERAL ::= LITFLOAT 
            {
              Object RESULT =null;
		int litfloatleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litfloatright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litfloat = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litfloat.toString()+": "+"float"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITERAL",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // LITERAL ::= LITINT 
            {
              Object RESULT =null;
		int litIntleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litIntright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litInt = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litInt.toString()+": "+"int"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITERAL",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // INIWHILE ::= RESERVWHILE 
            {
              Object RESULT =null;
		bandera = 2; 
                            String tipoTabla = "tipo:condicional:while";
                            ArrayList<String> listaSimbolos = new ArrayList<String>();
                            fatherCurrentHash = currentHash;
                            currentHash = "while_"+(++contador_while)+"_"+ hashTree.get(currentHashPos);
                            listaSimbolos.add(tipoTabla);
                            hashTree.addLast(currentHash);
                            currentHashPos++;
                            listaTablaSimbolos.put(currentHash, listaSimbolos);
                            codIn3D.append("\n_while_" + contador_while + ":");
                            mipsMain.append("\n_while_" + contador_while + ":");

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INIWHILE",88, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONDIWHILE ::= CONDICIONES 
            {
              Object RESULT =null;
		bandera =2; condicionWhile();
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDIWHILE",89, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ESTRUCTWHILE ::= INIWHILE CONDIWHILE SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES ESTRUCTELSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTWHILE",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ESTRUCTWHILE ::= INIWHILE CONDIWHILE SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTWHILE",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // INICIOFOR ::= 
            {
              Object RESULT =null;
		 
                            String tipoTabla = "tipo:ciclo:for";
                            ArrayList<String> listaSimbolos = new ArrayList<String>();
                            fatherCurrentHash = currentHash;
                            currentHash = "for_"+(++contador_for)+"_"+fatherCurrentHash;
                            listaSimbolos.add(tipoTabla);
                            hashTree.addLast(currentHash);
                            currentHashPos++;
                            listaTablaSimbolos.put(currentHash, listaSimbolos);
                            codIn3D.append("\n_begin_for_"+(contador_for)+":");
                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIOFOR",83, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ESTRUCTFORRANGE ::= INICIOFOR RESERVFORRANGE SIGABREPARENT CONDICIONALFOR SIGCIERRAPARENT SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES 
            {
              Object RESULT =null;
		int resvleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int resvright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object resv = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		
                                int diferencia = contador_for - contador_fin_for;                            
                                if (diferencia != 0 ){
                                    if(contador_for_anidados == 0){contador_for_anidados = diferencia+1;}
                                        int contForActual = (contador_fin_for + contador_for_anidados-1);
                                        String cod3d = "\n  t0 = inicio_for"+ (contForActual)+ "\n  t1 = incremento_for"+ (contForActual)+ "\n  t2 = t1 + t0"+ "\n  inicio_for"+ (contForActual) + " = t2"+ "\n  goto _condicional_forRange"+(contForActual)+ "\n_end_forRange"+(contForActual)+":";
                                        codIn3D.append(cod3d);

                                        String codmips = "\n  lw $t1, inicio_for"+ (contForActual)+ "\n  lw $t2, incremento_for"+ (contForActual)+ "\n  add $t1,$t1,$t2\n  sw $t1, inicio_for"+ (contForActual)+ "\n  inicio_for"+ (contForActual) + " = t2"+ "\n  j _condicional_forRange"+(contForActual)+ "\n_end_forRange"+(contForActual)+":";
                                        mipsMain.append(codmips);

                                        mipsMain.append("\n_end_if_"+ contForActual +":");

                                        contador_for_anidados -= 1;
                                    if(contador_for_anidados == 0){                            
                                        contador_fin_for = contador_for+1;
                                        contador_for_anidados = 0;
                                    }
                                }else{
                                    String cod3d = "\n  t0 = inicio_for"+ (contador_for)+ "\n  t1 = incremento_for"+ (contador_for)+ "\n  t2 = t1 + t0"+ "\n  inicio_for"+ (contador_for) + " = t2"+ "\n  goto _condicional_forRange"+(contador_for)+ "\n_end_forRange"+(contador_for)+":";
                                    codIn3D.append(cod3d);

                                    String codmips = "\n  lw $t1, inicio_for"+ (contador_for)+ "\n  lw $t2, incremento_for"+ (contador_for)+ "\n  add $t1,$t1,$t2\n  sw $t1, inicio_for"+ (contador_for)+ "\n  inicio_for"+ (contador_for) + " = t2"+ "\n  j _condicional_forRange"+(contador_for)+ "\n_end_forRange"+(contador_for)+":";
                                    mipsMain.append(codmips);
                                    contador_fin_for += 1;  
                                }
                            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTFORRANGE",58, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CONDICIONALFOR ::= PARAMFORRANGE 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 
                            if(params.equals("error_semantico")){
                                RESULT = params;
                            }else{
                                String[] partes_param = params.toString().split(": ");
                                codIn3D.append("\ndataInt inicio_for"+ (contador_for) +" = "+partes_param[0].toString());
                                mipsData.append("   inicio_for"+ (contador_for) +": ."+"word 0"+"\n");
                                
                                codIn3D.append("\ndataInt incremento_for"+ (contador_for) +" = "+partes_param[1].toString());
                                mipsData.append("   incremento_for"+ (contador_for) +": ."+"word 0"+"\n"); 
                               
                                codIn3D.append("\ndataInt finaliza_for"+ (contador_for) +" = "+partes_param[2].toString());
                                mipsData.append("   finaliza_for"+ (contador_for) +": ."+"word 0"+"\n");

                                String temp = "t"+(currentTemp++);  
                                String cod3d = "\n\n_condicional_forRange"+contador_for+":\n " + ("t"+(currentTemp++))+ "=inicio_for"+ (contador_for) + "\n" +(" t"+(currentTemp++))+ "= finaliza_for"+ (contador_for) + "\n" +(" t"+(currentTemp++))+ "= "+"t"+(currentTemp-3)+" < t"+(currentTemp-2)+"  \n if "+("t"+(currentTemp))+" goto bloqueCod_forRange"+ (contador_for)+"\n goto _end_forRange"+(contador_for)+"\n";
                                codIn3D.append(cod3d);
                                String codmips = "\n\n_condicional_forRange"+contador_for+":\n "+" lw $t1, inicio_for"+(contador_for)+"\n"+"  lw $t2, finaliza_for"+(contador_for)+ "\n"+"  bge $t1, $t2, _end_forRange" +contador_for+":\n\n_bloqueCodfor" +contador_for+":";
                                mipsMain.append(codmips);
                            }
                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICIONALFOR",69, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PARAMFORRANGE ::= PARAMFORRANGETRES 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = params; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFORRANGE",57, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PARAMFORRANGE ::= PARAMFORRANGEDOS 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = params; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFORRANGE",57, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PARAMFORRANGE ::= PARAMFORRANGEUNO 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = params; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFORRANGE",57, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PARAMFORRANGETRES ::= VALORESARIT ENDLINE VALORESARIT ENDLINE VALORESARIT 
            {
              Object RESULT =null;
		int param1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object param1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int param3left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int param3right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object param3 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		  
                            String[] partes_valor = param1.toString().split(": ");
                            String[] partes_valor2 = param2.toString().split(": ");
                            String[] partes_valor3 = param3.toString().split(": ");
                            boolean errores = false;
                            if ((!partes_valor[1].equals("int")) && (!partes_valor[1].equals("var"))){
                                //Manejo error semántico
                                errores = true;
                                manejoError(" El parametro: '"+ partes_valor[0] +"' es de un tipo incorrecto para un parametro del 'forRange', dentro de "+currentHash, "semántico");
                                RESULT = "error_semantico";
                            }else{
                                if (partes_valor[1].equals("var")){
                                    String tipo = buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), partes_valor[0], "id");
                                    if(tipo == null){
                                        //Manejo error semántico
                                        errores = true;
                                        manejoError(" El parametro: '"+ partes_valor[0] +"' es de un variable la cual no ha sido definida previamente, dentro de "+currentHash, "semántico");
                                        RESULT = "error_semantico";
                                    }else {
                                        if(!tipo.equals("int")){
                                            //Manejo error semántico
                                            errores = true;
                                            manejoError(" El parametro: '"+ partes_valor[0] +"' el tipo de dato de la variable no es correcto, dentro de "+currentHash, "semántico");
                                            RESULT = "error_semantico";
                                        }
                                    }
                                }
                            }
                            //validaciones param2
                            if ((!partes_valor2[1].equals("int")) && (!partes_valor2[1].equals("var"))){
                                //Manejo error semántico
                                errores = true;
                                manejoError(" El parametro: '"+ partes_valor2[0] +"' es de un tipo incorrecto para un parametro del 'forRange', dentro de "+currentHash, "semántico");
                                RESULT = "error_semantico";
                            }else{
                                if (partes_valor2[1].equals("var")){
                                    String tipo = buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), partes_valor2[0], "id");
                                    if(tipo == null){
                                        //Manejo error semántico
                                        errores = true;
                                        manejoError(" El parametro: '"+ partes_valor2[0] +"' es de un variable la cual no ha sido definida previamente, dentro de "+currentHash, "semántico");
                                        RESULT = "error_semantico";
                                    }else {
                                        if(!tipo.equals("int")){
                                            //Manejo error semántico
                                            errores = true;
                                            manejoError(" El parametro: '"+ partes_valor2[0] +"' el tipo de dato de la variable no es correcto, dentro de "+currentHash, "semántico");
                                            RESULT = "error_semantico";
                                        }
                                    }
                                }
                            }
                            //validaciones param3
                            if ((!partes_valor3[1].equals("int")) && (!partes_valor3[1].equals("var"))){
                                //Manejo error semántico
                                errores = true;
                                manejoError(" El parametro: '"+ partes_valor3[0] +"' es de un tipo incorrecto para un parametro del 'forRange', dentro de "+currentHash, "semántico");
                                RESULT = "error_semantico";
                            }else{
                                if (partes_valor3[1].equals("var")){
                                    String tipo = buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), partes_valor3[0], "id");
                                    if(tipo == null){
                                        //Manejo error semántico
                                        errores = true;
                                        manejoError(" El parametro: '"+ partes_valor3[0] +"' es de un variable la cual no ha sido definida previamente, dentro de "+currentHash, "semántico");
                                        RESULT = "error_semantico";
                                    }else {
                                        if(!tipo.equals("int")){
                                            //Manejo error semántico
                                            errores = true;
                                            manejoError(" El parametro: '"+ partes_valor3[0] +"' el tipo de dato de la variable no es correcto, dentro de "+currentHash, "semántico");
                                            RESULT = "error_semantico";
                                        }
                                    }
                                }
                            }
                            if(!errores){ 
                                RESULT = partes_valor[0]+": " + partes_valor2[0] +": " + partes_valor3[0]; 
                            }
                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFORRANGETRES",56, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PARAMFORRANGEDOS ::= VALORESARIT ENDLINE VALORESARIT 
            {
              Object RESULT =null;
		int param1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object param1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		  
                            String[] partes_valor = param1.toString().split(": ");
                            String[] partes_valor2 = param2.toString().split(": ");
                            boolean errores = false;
                            if ((!partes_valor[1].equals("int")) && (!partes_valor[1].equals("var"))){
                                //Manejo error semántico
                                errores = true;
                                manejoError(" El parametro: '"+ partes_valor[0] +"' es de un tipo incorrecto para un parametro del 'forRange', dentro de "+currentHash, "semántico");
                                RESULT = "error_semantico";
                            }else{
                                if (partes_valor[1].equals("var")){
                                    String tipo = buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), partes_valor[0], "id");
                                    if(tipo == null){
                                        //Manejo error semántico
                                        errores = true;
                                        manejoError(" El parametro: '"+ partes_valor[0] +"' es de un variable la cual no ha sido definida previamente, dentro de "+currentHash, "semántico");
                                        RESULT = "error_semantico";
                                    }else {
                                        if(!tipo.equals("int")){
                                            //Manejo error semántico
                                            errores = true;
                                            manejoError(" El parametro: '"+ partes_valor[0] +"' el tipo de dato de la variable no es correcto, dentro de "+currentHash, "semántico");
                                            RESULT = "error_semantico";
                                        }
                                    }
                                }
                            }
                            //validaciones param2
                            if ((!partes_valor2[1].equals("int")) && (!partes_valor2[1].equals("var"))){
                                //Manejo error semántico
                                errores = true;
                                manejoError(" El parametro: '"+ partes_valor2[0] +"' es de un tipo incorrecto para un parametro del 'forRange', dentro de "+currentHash, "semántico");
                                RESULT = "error_semantico";
                            }else{
                                if (partes_valor2[1].equals("var")){
                                    String tipo = buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), partes_valor2[0], "id");
                                    if(tipo == null){
                                        //Manejo error semántico
                                        errores = true;
                                        manejoError(" El parametro: '"+ partes_valor2[0] +"' es de un variable la cual no ha sido definida previamente, dentro de "+currentHash, "semántico");
                                        RESULT = "error_semantico";
                                    }else {
                                        if(!tipo.equals("int")){
                                            //Manejo error semántico
                                            errores = true;
                                            manejoError(" El parametro: '"+ partes_valor2[0] +"' el tipo de dato de la variable no es correcto, dentro de "+currentHash, "semántico");
                                            RESULT = "error_semantico";
                                        }
                                    }
                                }
                            }
                            if(!errores){ 
                                RESULT = partes_valor[0]+": " + "1".toString()+": " + partes_valor2[0]; 
                            }
                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFORRANGEDOS",55, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PARAMFORRANGEUNO ::= VALORESARIT 
            {
              Object RESULT =null;
		int param1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object param1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		  
                            String[] partes_valor = param1.toString().split(": ");
                            boolean errores = false;
                            if ((!partes_valor[1].equals("int")) && (!partes_valor[1].equals("var"))){
                                //Manejo error semántico
                                errores = true;
                                manejoError(" El parametro: '"+ partes_valor[0] +"' es de un tipo incorrecto para un parametro del 'forRange', dentro de "+currentHash, "semántico");
                                RESULT = "error_semantico";
                            }else{
                                if (partes_valor[1].equals("var")){
                                    String tipo = buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), partes_valor[0], "id");
                                    if(tipo == null){
                                        //Manejo error semántico
                                        errores = true;
                                        manejoError(" El parametro: '"+ partes_valor[0] +"' es de un variable la cual no ha sido definida previamente, dentro de "+currentHash, "semántico");
                                        RESULT = "error_semantico";
                                    }else {
                                        if(tipo.equals("int")){
                                            RESULT = "1".toString()+": " + "1".toString()+": " + partes_valor[0];
                                        }else{
                                            //Manejo error semántico
                                            errores = true;
                                            manejoError(" El parametro: '"+ partes_valor[0] +"' el tipo de dato de la variable no es correcto, dentro de "+currentHash, "semántico");
                                            RESULT = "error_semantico";
                                        }
                                    }
                                }else{
                                    RESULT = "1".toString()+": " + "1".toString()+": " + partes_valor[0];
                                }
                            }
                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFORRANGEUNO",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FINIF ::= 
            {
              Object RESULT =null;
		    
                            int diferencia = contador_if - contador_fin_if;                            
                            if (diferencia != 0 ){
                                if(contador_if_anidados == 0){contador_if_anidados = diferencia+1;}
                                codIn3D.append("\n_end_if_"+(contador_fin_if + contador_if_anidados-1)+":");
                                mipsMain.append("\n_end_if_"+(contador_fin_if + contador_if_anidados-1)+":");
                                contador_if_anidados -= 1;
                                if(contador_if_anidados == 0){                            
                                    contador_fin_if = contador_if+1;
                                    contador_if_anidados = 0;
                                }
                            }else{
                                codIn3D.append("\n_end_if_"+(contador_if)+":");
                                mipsMain.append("\n_end_if_"+(contador_if)+":");
                                contador_fin_if += 1;  
                            }      
                            //contador_fin_if += 1;  
                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FINIF",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // INICIOIF ::= RESERVIF SEPARADOR 
            {
              Object RESULT =null;
		int reservleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int reservright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object reserv = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 
                            bandera = 1;
                            String tipoTabla = "tipo:condicional:if";
                            ArrayList<String> listaSimbolos = new ArrayList<String>();
                            fatherCurrentHash = currentHash;
                            currentHash = "if_"+(++contador_if)+"_"+ hashTree.get(currentHashPos);
                            listaSimbolos.add(tipoTabla);
                            hashTree.addLast(currentHash);
                            currentHashPos++;
                            listaTablaSimbolos.put(currentHash, listaSimbolos);
                            codIn3D.append("\n_if_" + contador_if + ":");
                            mipsMain.append("\n_if_" + contador_if + ":");
                            
                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIOIF",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CONDIIF ::= CONDICIONES 
            {
              Object RESULT =null;
		bandera=1; condicionWhile();
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDIIF",90, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ESTRUCTIF ::= INICIOIF CONDIIF SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES FINIF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTIF",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ESTRUCTIF ::= INICIOIF CONDIIF SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES ESTRUCTELSE FINIF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTIF",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ESTRUCTELSE ::= RESERVELSE SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTELSE",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // BLOQUECODIGO ::= COMENTARIOS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUECODIGO",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // BLOQUECODIGO ::= VALORESBLOQUECODIGO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUECODIGO",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // BLOQUECODIGO ::= VALORESBLOQUECODIGO BLOQUECODIGO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUECODIGO",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CONDICIONES ::= SIGABREPARENT VALORESCONDI SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICIONES",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VALORESCONDI ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = id+": "+"var"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESCONDI",81, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VALORESCONDI ::= OPERACIONLOGICAS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESCONDI",81, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OPERACIONLOGICAS ::= SIGABREPARENT OPERACIONLOGICAS SIGCIERRAPARENT 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = op;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONLOGICAS",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPERACIONLOGICAS ::= OPERACIONLOGICAS NT$0 OPERADORESLOGICOS OPERANDOSLOGICOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object signo = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		            
                    if ((op.equals("error_semantico"))){
                        RESULT = "error_semantico";
                    }else{
                        String[] partes_valor = valor.toString().split(": ");
                        if (partes_valor[1].toString().equals("bool")){
                            System.out.print("Es un literal");
                            codIn3D.append("\n t1 = " + partes_valor[0]); 
                        }
                        if (partes_valor[1].toString().equals("var")){// exista, sea bool, t3 meter valor
                            System.out.println("\n Es un variable 111\n");
                            System.out.println(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_valor[0].toString(), "id"));

                            if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_valor[0].toString(), "id") != null ) {
                                System.out.print(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_valor[0].toString(), "id"));
                            }else{
                                //Manejo error semántico
                                manejoError("El ID: "+partes_valor[0]+" no ha sido creada anteriormente", "semántico");
                                RESULT = "error_semantico";
                                }
                        }
                        codIn3D.append("\n t1 = t10 " + signo + "t1");                        
                        //String[] partes = op.toString().split(": ");
                        //ejecutaOpeRela (partes,".");
                        RESULT = (partes_valor[1]);    
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONLOGICAS",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$0 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
codIn3D.append("\n t10 = t1 ");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$0",91, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OPERACIONLOGICAS ::= SIGNEGACION OPERANDOSLOGICOS 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                    if ((op.equals("error_semantico"))){
System.out.println("ES UNA VAR");
                        RESULT = "error_semantico";
                    }else{
                        String[] partes_op = op.toString().split(": ");
                        boolean datoFinal = true;
                        if (partes_op[1].toString().equals("bool") && (!(partes_op[0].charAt(0) == '['))){
                            if (partes_op[0].equals("true")){
                                datoFinal = false;
                                codIn3D.append("\n t3 = " + datoFinal);
                            }else{
                                codIn3D.append("\n t3 = " + datoFinal);
                            }
                        }

                        if (partes_op[1].toString().equals("var")){

                            String buscaId = buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_op[0].toString(), "id");
                            if(buscaId != null ) {
                                if (buscaId.equals("bool")){
                                    if (partes_op[0].equals("true")){
                                    datoFinal = false;
                                    codIn3D.append("\n t3 = " + datoFinal);
                                }else{
                                    codIn3D.append("\n t3 = " + datoFinal);
                                }
                                }else{
                                    //Manejo error semántico
                                    manejoError("El ID: "+partes_op[0]+" no es de tipo bool", "semántico");
                                    RESULT = "error_semantico";
                                }
                            }else{
                                //Manejo error semántico
                                manejoError("El ID: "+partes_op[0]+" no ha sido creada anteriormente", "semántico");
                                RESULT = "error_semantico";
                            }
                        }else{
                            System.out.print("Es una operacion negativa");
                            //ejecutaOpeRela (partes_op[0],"!");
                            codIn3D.append("\n t1 = !t1");
                            RESULT = (partes_op[0]);    
                        }   
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONLOGICAS",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPERACIONLOGICAS ::= OPERANDOSLOGICOS 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		   
                    if ((op.equals("error_semantico"))){
                        RESULT = "error_semantico";
                    }else{
                        String[] partes_op = op.toString().split(": ");
                        if (partes_op[1].toString().equals("bool") && (!(partes_op[0].charAt(0) == '['))){
                            codIn3D.append("\n t1 = " + partes_op[0]);
                            RESULT = (partes_op[0]);  
                        }

                        else if (partes_op[1].toString().equals("var")){
                            String buscaId = buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_op[0].toString(), "id");
                            if(buscaId != null ) {
                                if (buscaId.equals("bool")){
                                    //codIn3D.append("\n t3 = " + partes_op[0]);
                                    RESULT = (partes_op[0]); 
                                }else{
                                    //Manejo error semántico
                                    manejoError("El ID: "+partes_op[0]+" no es de tipo bool", "semántico");
                                    RESULT = "error_semantico";
                                }
                            }else{
                            
                                //Manejo error semántico
                                manejoError("El ID: "+partes_op[0]+" no ha sido creada anteriormente", "semántico");
                                RESULT = "error_semantico";
                            }
                        }
                        else if (!(partes_op[1].toString().equals("bool") && (partes_op[0].charAt(0) == '['))){
                             RESULT = (partes_op[0]); 
                        }else{
                            //ejecutaOpeRela (partes_op[0],".");
                            RESULT = "error_semantico";    
                        }
                    }
                    System.out.println(RESULT);
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONLOGICAS",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OPERANDOSLOGICOS ::= SIGABREPARENT OPERACIONRELAARIT SIGCIERRAPARENT 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		   // ++++ Análisis semántico ++++
                    String[] partes_op = op.toString().split(": ");
                    ejecutaOpeRela (partes_op[0],".");
                    RESULT = (op);                     
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERANDOSLOGICOS",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPERANDOSLOGICOS ::= SEPARADOR IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = id+": "+"var"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERANDOSLOGICOS",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPERANDOSLOGICOS ::= LITBOOL 
            {
              Object RESULT =null;
		int litboolleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litboolright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litbool = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litbool+": "+"bool"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERANDOSLOGICOS",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERACIONRELAARIT ::= VALORESARIT OPERADORESRELA VALORESARIT 
            {
              Object RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object valor1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object sig = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object valor2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                        if ((valor1.equals("error_semantico")) || (valor2.equals("error_semantico"))){
                            RESULT = "error_semantico";
                        }else{
                            String[] partes_valor1 = valor1.toString().split(": ");
                            String[] partes_valor2 = valor2.toString().split(": ");
                            boolean errores = false;
                            if(partes_valor1[1].equals("var") || partes_valor2[1].equals("var")){
                                String tipo1 = buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), partes_valor1[0], "id");
                                String tipo2 = buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), partes_valor2[0], "id");
                                if (tipo1==null && tipo2==null){
                                    if(partes_valor2[1].equals("var") && (!partes_valor1[1].equals("var"))){
                                        manejoError("'" + partes_valor1[0] + " " + sig + " " + partes_valor2[0] + "' El la variable '"+ partes_valor2[0] +"' no ha sido creada previamente, dentro de "+currentHash, "semántico");
                                        RESULT = "error_semantico"; 
                                        errores = true;
                                    }else { if(!partes_valor2[1].equals("var") && (partes_valor1[1].equals("var"))){
                                        manejoError("'" + partes_valor1[0] + " " + sig + " " + partes_valor2[0] + "' El la variable '"+ partes_valor1[0] +"' no ha sido creada previamente, dentro de "+currentHash, "semántico");
                                        RESULT = "error_semantico"; 
                                        errores = true;
                                    } else {
                                        manejoError("'" + partes_valor1[0] + " " + sig + " " + partes_valor2[0] + "' Las variables: '"+ partes_valor1[0] +"' y " + partes_valor2[0] + " no han sido creadas previamente, dentro de "+currentHash, "semántico");
                                        RESULT = "error_semantico"; 
                                        errores = true;
                                    }}
                                }else {if (tipo1!=null && tipo2!=null){
                                    if(!tipo1.equals(tipo2)){
                                        manejoError("'" + partes_valor1[0] + " " + sig + " " + partes_valor2[0] + "' El las variables de los operadores no son del mismo tipo, una de tipo '" + partes_valor1[1] + "' y la otra de tipo '" + partes_valor1[1] + "', dentro de "+currentHash, "semántico");errores = true;
                                        RESULT = "error_semantico"; 
                                        errores = true;
                                    }
                                }else{ if (tipo1==null && tipo2!=null){
                                    if(!partes_valor1[1].equals(tipo2)){
                                        manejoError("'" + partes_valor1[0] + " " + sig + " " + partes_valor2[0] + "' El la variable '"+ partes_valor2[0] +"', debe ser de tipo tipo:'" + partes_valor1[1] + "', dentro de "+currentHash, "semántico");
                                        RESULT = "error_semantico"; 
                                        errores = true;
                                    }
                                }else{if (tipo2==null && tipo1!=null){
                                    if(!partes_valor2[1].equals(tipo1)){
                                        manejoError("'" + partes_valor1[0] + " " + sig + " " + partes_valor2[0] + "' El la variable '"+ partes_valor1[0] +"', debe ser de tipo tipo:'" + partes_valor2[1] + "', dentro de "+currentHash, "semántico");
                                        RESULT = "error_semantico"; 
                                        errores = true;
                                    }
                                }}}}
                            }
                            if (!(partes_valor1[1].equals("float")) && (!partes_valor1[1].equals("int")) && (!partes_valor1[1].equals("var"))){
                                //Manejo error semántico
                                errores = true;
                                manejoError("'" + valor1 + " " + sig + " " + valor2 + "' El operador: "+ valor1 +" es de un tipo incorrecto para una operacion aritmetica, dentro de "+currentHash, "semántico");
                                RESULT = "error_semantico";
                            }
                            if (!(partes_valor2[1].equals("float")) && (!partes_valor2[1].equals("int")) && (!partes_valor2[1].equals("var"))){
                                //Manejo error semántico
                                errores = true;
                                manejoError("'" + valor1 + " " + sig + " " + valor2 + "' El operador: "+ valor2 +" es de un tipo incorrecto para una operacion aritmetica, dentro de "+currentHash, "semántico");
                                RESULT = "error_semantico";                               
                            }   
                            if (partes_valor1[1].equals(partes_valor2[1]) || partes_valor1[1].equals("var") || partes_valor2[1].equals("var")){
                                if (!errores){
                                    String tipo = "";
                                    if (partes_valor1[1].equals("var")&& (!partes_valor2[1].equals("var"))){
                                        tipo = partes_valor2[1];
                                    }else{
                                        if (partes_valor2[1].equals("var")&& (!partes_valor1[1].equals("var"))){
                                            tipo = partes_valor1[1];
                                        }else{
                                            if ((!partes_valor2[1].equals("var")) && (!partes_valor1[1].equals("var"))){
                                                tipo = partes_valor1[1];
                                            }else{
                                                tipo = buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), partes_valor1[0], "id");                                                
                                            }
                                        }
                                    }
                                    if (!existeOpeRela){
                                        // codigo Mips para operaciones
                                        mipsFunciones.append("\n\nrelationalOperation:\n  lw $t1, 0($a0)    \n  lw $t2, 0($a1)   \n  lb $t3, 0($a2)    \n  beq $t3, '<', less_than\n  beq $t3, '>', greater_than\n  beq $t3, 'L', less_than_or_equal\n  beq $t3, 'G', greater_than_or_equal\n  beq $t3, 'E', equal\n  beq $t3, 'N', not_equal\nless_than:\n  slt $t0, $t1, $t2  \n  j end_operation\ngreater_than:\n  slt $t0, $t2, $t1   \n  j end_operation\nless_than_or_equal:\n  sle $t0, $t1, $t2   \n  j end_operation\ngreater_than_or_equal:\n  sle $t0, $t2, $t1   \n  j end_operation\nequal:\n  seq $t0, $t1, $t2   \n  j end_operation\nnot_equal:\n  sne $t0, $t1, $t2   \nend_operation:\n  jr $ra");             
                                        existeOpeRela = true;
                                    }
                                    String temp ="";
                                    if (!errores){
                                        temp = "[" + partes_valor1[0] + "'" + sig + "'" + partes_valor2[0] +"]";
                                        RESULT = temp + ": " + tipo; 
                                    }else{
                                        temp = "[" + partes_valor1[0] + "'" + sig + "'" + partes_valor2[0] +"]";
                                        RESULT = temp + ": err";
                                    }
                                }
                            }else{
                                //Manejo error semántico
                                manejoError("'" + valor1 + " " + sig + " " + valor2 + "' Los operadores no son del mismo tipo, dentro de "+currentHash, "semántico");
                                RESULT = "error_semantico";
                            }
                        }
                    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONRELAARIT",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPERACIONRELAARIT ::= VALORESARIT 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = valor ;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONRELAARIT",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPERADORESRELA ::= OPERADORESBOOL 
            {
              Object RESULT =null;
		int opBoolleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int opBoolright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object opBool = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = opBool;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESRELA",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPERADORESRELA ::= SIGMAYORIGUAL 
            {
              Object RESULT =null;
		 RESULT = ">=";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESRELA",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPERADORESRELA ::= SIGMAYOR 
            {
              Object RESULT =null;
		 RESULT = ">";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESRELA",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPERADORESRELA ::= SIGMENORIGUAL 
            {
              Object RESULT =null;
		 RESULT = "<=";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESRELA",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPERADORESRELA ::= SIGMENOR 
            {
              Object RESULT =null;
		 RESULT = "<";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESRELA",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPERACIONBOOL ::= OPERANDOBOOLEANO OPERADORESBOOL OPERANDOBOOLEANO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONBOOL",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERANDOBOOLEANO ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = id+": "+"var"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERANDOBOOLEANO",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERANDOBOOLEANO ::= LITBOOL 
            {
              Object RESULT =null;
		int litboolleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litboolright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litbool = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litbool.toString()+": "+"bool"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERANDOBOOLEANO",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERADORESBOOL ::= SIGDIFERENTE 
            {
              Object RESULT =null;
		 RESULT = "!=";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESBOOL",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERADORESBOOL ::= IGUAL 
            {
              Object RESULT =null;
		 RESULT = "==";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESBOOL",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FUNCESCRIBIR ::= FUNCESCRIBIRID 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIR",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FUNCESCRIBIR ::= FUNCESCRIBIRSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIR",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FUNCESCRIBIR ::= FUNCESCRIBIRFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIR",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FUNCESCRIBIR ::= FUNCESCRIBIRINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIR",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FUNCESCRIBIRID ::= RESERVESCRIBIR SIGABREPARENT IDENTIFICADOR SIGCIERRAPARENT ENDLINE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
                        String tipovar = buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), id.toString(), "id");
                        if (tipovar == null){
                            manejoError("'read(" + id.toString() + ");': la variable '" + id.toString() + "' no ha sido creada", "semántico");
                            RESULT = "error_semantico";
                        }else{
                            if((tipovar.equals("int")) || (tipovar.equals("float")) || (tipovar.equals("string"))){
                                System.out.println("Escribe todo guchi");//cod de 3d para la escritura
                            }else{
                                manejoError("'read(" + id.toString() + ");': el tipo de la variable '" + id.toString() + "' no es valido, es de tipo:'" + tipovar + "' y debe ser de tipo 'int', 'float' o 'string'", "semántico");
                                RESULT = "error_semantico";
                            }
                        }
                    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIRID",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FUNCESCRIBIRSTRING ::= RESERVESCRIBIR SIGABREPARENT LITSTRING SIGCIERRAPARENT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIRSTRING",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FUNCESCRIBIRFLOAT ::= RESERVESCRIBIR SIGABREPARENT LITFLOAT SIGCIERRAPARENT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIRFLOAT",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FUNCESCRIBIRINT ::= RESERVESCRIBIR SIGABREPARENT LITINT SIGCIERRAPARENT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIRINT",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FUNCLEER ::= RESERVLEER SIGABREPARENT IDENTIFICADOR SIGCIERRAPARENT ENDLINE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		 
                        String tipovar = buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), id.toString(), "id");
                        if (tipovar == null){
                            manejoError("'read(" + id.toString() + ");': la variable '" + id.toString() + "' no ha sido creada", "semántico");
                            RESULT = "error_semantico";
                        }else{
                            if((tipovar.equals("int")) || (tipovar.equals("float"))){
                                System.out.println("Leer todo guchi");//cod de 3d para la lectura
                            }else{
                                manejoError("'read(" + id.toString() + ");': el tipo de la variable '" + id.toString() + "' no es valido, es de tipo:'" + tipovar + "' y debe ser de tipo 'int' o 'float'", "semántico");
                                RESULT = "error_semantico";
                            }
                        }
                    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCLEER",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VARIABLES ::= OPERACIONUNARIA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLES",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VARIABLES ::= VARIABLESSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLES",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VARIABLES ::= VARIABLESCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLES",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VARIABLES ::= VARIABLESBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLES",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VARIABLES ::= VARIABLESFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLES",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VARIABLES ::= VARIABLESINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLES",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VARIABLESSTRING ::= CREAASIGVARSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESSTRING",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VARIABLESSTRING ::= CREAVARSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESSTRING",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CREAASIGVARSTRING ::= TIPOSTRING SEPARADOR IDENTIFICADOR SIGNOIGUAL VALORESSTRING ENDLINE 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 // ++++ Análisis semántico ++++
                    String ladoIzqTipo = tip.toString();
                    String ladoIzqId = id.toString();
                    String[] partes_dato = dato.toString().split(": ");

                    if ((ladoIzqTipo.equals(partes_dato[1])) || (partes_dato[1].equals("var"))){
                         if(!(ladoIzqTipo.equals(partes_dato[1])) && buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_dato[0].toString(), "id") == null){
                            //Manejo error semántico
                            manejoError("'" + tip +" # "+ id + " = " + partes_dato[0] + ";' " + "El ID: '"+ partes_dato[0] +"' no ha sido creado anteriormente", "semántico");
                            RESULT = "error_semantico";
                        }else{
                            if (!(ladoIzqTipo.equals(partes_dato[1])) && !(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_dato[0], "id").equals("string"))){
                                //Manejo error semántico
                                manejoError("'" + tip +" # "+ id + " = " + partes_dato[0] + ";' " + "La variable: '"+ partes_dato[0] +"' no es de tipo String", "semántico");
                                RESULT = "error_semantico";
                            }else{
                                if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null ) {
                                    // ++++ Código 3D ++++
                                    String temp = "t"+(currentTemp++); 
                                    if (currentTemp == 10){
                                        currentTemp = 0;
                                    }
                                    codIn3D.append("\ndataChar "+ladoIzqId);
                                    codIn3D.append("\n"+ temp +" = "+partes_dato[0].toString());                                        
                                    codIn3D.append("\n"+ ladoIzqId +" = "+temp);
                                    mipsData.append("   " + ladoIzqId+": ."+"asciiz \"\""+"\n");

                                    String mipsAsignation = "";
                                        if(partes_dato[1].equals("var")){
                                            mipsAsignation = "lw $"+temp+", "+ partes_dato[0];
                                        }else{
                                            mipsAsignation = "li $"+temp+", "+ partes_dato[0];
                                        }
                                        mipsMain.append("\n   "+mipsAsignation);

                                    mipsAsignation = "sw "+temp+", "+ladoIzqId.toString();                            
                                    mipsMain.append("\n   "+mipsAsignation);
                                    RESULT = "string ::"+temp; 

                                    // +++ Tabla de símbolos ++++ 
                                    listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                                    RESULT = id.toString()+": "+tip.toString();
                                }else{
                                    //Manejo error semántico
                                    manejoError("'" + tip +" # "+ id + " = " + partes_dato[0] + ";' " + "El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+currentHash, "semántico");
                                    RESULT = "error_semantico";
                                }
                            }
                        }
                    }else{
                        //Manejo error semántico
                        manejoError("El ID: "+ ladoIzqId.toString() +" no ha sido creado dentro de la función", "semántico");
                        RESULT = "error_semantico";
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAASIGVARSTRING",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CREAVARSTRING ::= TIPOSTRING SEPARADOR IDENTIFICADOR ENDLINE 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		   
                    // ++++ Análisis semántico ++++
                    if(fatherCurrentHash != null && buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), id.toString(), "id") == null){
                        if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null ) {
                            // ++++ Código 3D ++++
                            codIn3D.append("\ndataString"+" "+id.toString());
                            mipsData.append("   " + id.toString()+": ."+"asciiz \"\""+"\n");

                            // +++ Tabla de símbolos ++++ 
                            listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                            RESULT = id.toString()+": "+tip.toString();
                        }
                        else{
                            //Manejo error semántico
                            manejoError("El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+currentHash, "semántico");
                            RESULT = "error_semantico";
                        }
                    }
                    else if(fatherCurrentHash == null && buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null){
                            // ++++ Código 3D ++++
                            codIn3D.append("\ndataString"+" "+id.toString());
                            mipsData.append("   " + id.toString()+": ."+"asciiz \"\""+"\n");

                            // +++ Tabla de símbolos ++++ 
                            listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                            RESULT = id.toString()+": "+tip.toString();
                    }
                    else{
                        //Manejo error semántico
                        manejoError("El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+fatherCurrentHash, "semántico");
                        RESULT = "error_semantico";
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAVARSTRING",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VALORESSTRING ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = id+": "+"var"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESSTRING",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VALORESSTRING ::= LITSTRING 
            {
              Object RESULT =null;
		int litStringleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litStringright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litString = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litString.toString()+": "+"string"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESSTRING",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VARIABLESCHAR ::= CREAASIGVARCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESCHAR",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VARIABLESCHAR ::= CREAVARCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESCHAR",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CREAASIGVARCHAR ::= TIPOCHAR SEPARADOR IDENTIFICADOR SIGNOIGUAL VALORESCHAR ENDLINE 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 // ++++ Análisis semántico ++++
                    String ladoIzqTipo = tip.toString();
                    String ladoIzqId = id.toString();
                    String[] partes_dato = dato.toString().split(": ");
                    
                    if ((ladoIzqTipo.equals(partes_dato[1])) || (partes_dato[1].equals("var"))){
                         if(!(ladoIzqTipo.equals(partes_dato[1])) && buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_dato[0].toString(), "id") == null){
                            //Manejo error semántico
                            manejoError("'" + tip +" # "+ id + " = " + partes_dato[0] + ";' " + "El ID: '"+ partes_dato[0] +"' no ha sido creado anteriormente", "semántico");
                            RESULT = "error_semantico";
                        }else{
                            if (!(ladoIzqTipo.equals(partes_dato[1])) && !(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_dato[0], "id").equals("char"))){
                                //Manejo error semántico
                                manejoError("'" + tip +" # "+ id + " = " + partes_dato[0] + ";' " + "La variable: '"+ partes_dato[0] +"' no es de tipo char", "semántico");
                                RESULT = "error_semantico";
                            }else{
                                if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null ) {
                                    // ++++ Código 3D ++++
                                    String temp = "t"+(currentTemp++); 
                                    if (currentTemp == 10){
                                        currentTemp = 0;
                                    }
                                    codIn3D.append("\ndataChar "+ladoIzqId);
                                    codIn3D.append("\n"+ temp +" = "+partes_dato[0].toString());                                        
                                    codIn3D.append("\n"+ ladoIzqId +" = "+temp);
                                    mipsData.append("   " + ladoIzqId+": ."+"byte 0"+"\n");

                                    String mipsAsignation = "";
                                        if(partes_dato[1].equals("var")){
                                            mipsAsignation = "lw $"+temp+", "+ partes_dato[0];
                                        }else{
                                            mipsAsignation = "li $"+temp+", "+ partes_dato[0];
                                        }
                                        mipsMain.append("\n   "+mipsAsignation);

                                    mipsAsignation = "sw "+temp+", "+ladoIzqId.toString();                            
                                    mipsMain.append("\n   "+mipsAsignation);
                                    RESULT = "char ::"+temp; 

                                    // +++ Tabla de símbolos ++++ 
                                    listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                                    RESULT = id.toString()+": "+tip.toString();
                                }else{
                                    //Manejo error semántico
                                    manejoError("'" + tip +" # "+ id + " = " + partes_dato[0] + ";' " + "El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+currentHash, "semántico");
                                    RESULT = "error_semantico";
                                }
                            }
                        }
                    }else{
                        //Manejo error semántico
                        manejoError("El ID: "+ ladoIzqId.toString() +" no ha sido creado dentro de la función", "semántico");
                        RESULT = "error_semantico";
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAASIGVARCHAR",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CREAVARCHAR ::= TIPOCHAR SEPARADOR IDENTIFICADOR ENDLINE 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		   // ++++ Análisis semántico ++++
                    if(fatherCurrentHash != null && buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), id.toString(), "id") == null){
                        if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null ) {
                            // ++++ Código 3D ++++
                            codIn3D.append("\ndataChar"+" "+id.toString());
                            mipsData.append("   " + id.toString()+": ."+"byte 0"+"\n");

                            // +++ Tabla de símbolos ++++ 
                            listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                            RESULT = id.toString()+": "+tip.toString();
                        }
                        else{
                            //Manejo error semántico
                            manejoError("El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+currentHash, "semántico");
                            RESULT = "error_semantico";
                        }
                    }
                    else if(fatherCurrentHash == null && buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null){
                            // ++++ Código 3D ++++
                            codIn3D.append("\ndataChar"+" "+id.toString());
                            mipsData.append("   " + id.toString()+": ."+"byte 0"+"\n");

                            // +++ Tabla de símbolos ++++ 
                            listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                            RESULT = id.toString()+": "+tip.toString();
                    }
                    else{
                        //Manejo error semántico
                        manejoError("El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+fatherCurrentHash, "semántico");
                        RESULT = "error_semantico";
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAVARCHAR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VALORESCHAR ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = id+": "+"var"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESCHAR",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VALORESCHAR ::= LITCHAR 
            {
              Object RESULT =null;
		int litCharleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litCharright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litChar = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litChar.toString()+": "+"char"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESCHAR",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VARIABLESBOOL ::= CREAASIGVARBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESBOOL",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VARIABLESBOOL ::= CREAVARBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESBOOL",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CREAASIGVARBOOL ::= TIPOBOOL SEPARADOR IDENTIFICADOR SIGNOIGUAL SIGNEGACION VALORESBOOL ENDLINE 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		// ++++ Análisis semántico ++++
                                String ladoIzqTipo = tip.toString();
                                String ladoIzqId = id.toString();
                                String[] partes_dato = dato.toString().split(": ");

                                if ((ladoIzqTipo.equals(partes_dato[1])) || (partes_dato[1].equals("var"))){
                                     if(!(ladoIzqTipo.equals(partes_dato[1])) && buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_dato[0].toString(), "id") == null){
                                        //Manejo error semántico
                                        manejoError("'" + tip +" # "+ id + " = " + partes_dato[0] + ";' " + "El ID: '"+ partes_dato[0] +"' no ha sido creado anteriormente", "semántico");
                                        RESULT = "error_semantico";
                                    }else{
                                        if (!(ladoIzqTipo.equals(partes_dato[1])) && !(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_dato[0], "id").equals("bool"))){
                                            //Manejo error semántico
                                            manejoError("'" + tip +" # "+ id + " = " + partes_dato[0] + ";' " + "La variable: '"+ partes_dato[0] +"' no es de tipo bool", "semántico");
                                            RESULT = "error_semantico";
                                        }else{
                                            if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null ) {
                                                // ++++ Código 3D ++++
                                                String temp = "t"+(currentTemp++); 
                                                if (currentTemp == 10){
                                                    currentTemp = 0;
                                                }
                                                Boolean datoFinal = false;
                                                if (partes_dato[0].equals(false)){
                                                    datoFinal=true;
                                                }
                                                codIn3D.append("\ndataBool "+ladoIzqId);
                                                codIn3D.append("\n"+ temp +" = "+datoFinal.toString());                                        
                                                codIn3D.append("\n"+ ladoIzqId +" = "+temp);
                                                mipsData.append("   " + ladoIzqId+": ."+"word 0"+"\n");

                                                String mipsAsignation = "li $"+temp+", "+ datoFinal.toString();
                                                mipsMain.append("\n   "+mipsAsignation);

                                                mipsAsignation = "sw "+temp+", "+ladoIzqId.toString();                            
                                                mipsMain.append("\n   "+mipsAsignation);
                                                RESULT = "bool ::"+temp; 

                                                // +++ Tabla de símbolos ++++ 
                                                listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                                                RESULT = id.toString()+": "+tip.toString();
                                            }else{
                                                //Manejo error semántico
                                                manejoError("'" + tip +" # "+ id + " = " + partes_dato[0] + ";' " + "El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+currentHash, "semántico");
                                                RESULT = "error_semantico";
                                            }
                                        }
                                    }
                                }else{
                                    //Manejo error semántico
                                    manejoError("El ID: "+ ladoIzqId.toString() +" no ha sido creado dentro de la función", "semántico");
                                    RESULT = "error_semantico";
                                } 
                            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAASIGVARBOOL",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CREAASIGVARBOOL ::= TIPOBOOL SEPARADOR IDENTIFICADOR SIGNOIGUAL VALORESBOOL ENDLINE 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 // ++++ Análisis semántico ++++
                    String ladoIzqTipo = tip.toString();
                    String ladoIzqId = id.toString();
                    String[] partes_dato = dato.toString().split(": ");
                    
                    if ((ladoIzqTipo.equals(partes_dato[1])) || (partes_dato[1].equals("var"))){
                         if(!(ladoIzqTipo.equals(partes_dato[1])) && buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_dato[0].toString(), "id") == null){
                            //Manejo error semántico
                            manejoError("'" + tip +" # "+ id + " = " + partes_dato[0] + ";' " + "El ID: '"+ partes_dato[0] +"' no ha sido creado anteriormente", "semántico");
                            RESULT = "error_semantico";
                        }else{
                            if (!(ladoIzqTipo.equals(partes_dato[1])) && !(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_dato[0], "id").equals("bool"))){
                                //Manejo error semántico
                                manejoError("'" + tip +" # "+ id + " = " + partes_dato[0] + ";' " + "La variable: '"+ partes_dato[0] +"' no es de tipo bool", "semántico");
                                RESULT = "error_semantico";
                            }else{
                                if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null ) {
                                    // ++++ Código 3D ++++
                                    String temp = "t"+(currentTemp++); 
                                    if (currentTemp == 10){
                                        currentTemp = 0;
                                    }
                                    codIn3D.append("\ndataBool "+ladoIzqId);
                                    codIn3D.append("\n"+ temp +" = "+partes_dato[0].toString());                                        
                                    codIn3D.append("\n"+ ladoIzqId +" = "+temp);
                                    mipsData.append("   " + ladoIzqId+": ."+"word 0"+"\n");

                                    String mipsAsignation = "";
                                        if(partes_dato[1].equals("var")){
                                            mipsAsignation = "lw $"+temp+", "+ partes_dato[0];
                                        }else{
                                            mipsAsignation = "li $"+temp+", "+ partes_dato[0];
                                        }
                                        mipsMain.append("\n   "+mipsAsignation);

                                    mipsAsignation = "sw "+temp+", "+ladoIzqId.toString();                            
                                    mipsMain.append("\n   "+mipsAsignation);
                                    RESULT = "bool ::"+temp; 

                                    // +++ Tabla de símbolos ++++ 
                                    listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                                    RESULT = id.toString()+": "+tip.toString();
                                }else{
                                    //Manejo error semántico
                                    manejoError("'" + tip +" # "+ id + " = " + partes_dato[0] + ";' " + "El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+currentHash, "semántico");
                                    RESULT = "error_semantico";
                                }
                            }
                        }
                    }else{
                        //Manejo error semántico
                        manejoError("El ID: "+ ladoIzqId.toString() +" no ha sido creado dentro de la función", "semántico");
                        RESULT = "error_semantico";
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAASIGVARBOOL",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CREAVARBOOL ::= TIPOBOOL SEPARADOR IDENTIFICADOR ENDLINE 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		   // ++++ Análisis semántico ++++
                    if(fatherCurrentHash != null && buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), id.toString(), "id") == null){
                        if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null ) {
                            // ++++ Código 3D ++++
                            codIn3D.append("\ndataBool"+" "+id.toString());
                            mipsData.append("   " + id.toString()+": ."+"word 0"+"\n");

                            // +++ Tabla de símbolos ++++ 
                            listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                            RESULT = id.toString()+": "+tip.toString();
                        }
                        else{
                            //Manejo error semántico
                            manejoError("El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+currentHash, "semántico");
                            RESULT = "error_semantico";
                        }
                    }
                    else if(fatherCurrentHash == null && buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null){
                            // ++++ Código 3D ++++
                            codIn3D.append("\ndataBool"+" "+id.toString());
                            mipsData.append("   " + id.toString()+": ."+"word 0"+"\n");

                            // +++ Tabla de símbolos ++++ 
                            listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                            RESULT = id.toString()+": "+tip.toString();
                    }
                    else{
                        //Manejo error semántico
                        manejoError("El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+fatherCurrentHash, "semántico");
                        RESULT = "error_semantico";
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAVARBOOL",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VALORESBOOL ::= OPERACIONBOOL 
            {
              Object RESULT =null;
		 System.out.println("Que paso?"); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBOOL",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VALORESBOOL ::= SIGABREPARENT OPERACIONLOGICAS SIGCIERRAPARENT 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = valor ;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBOOL",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VALORESBOOL ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = id+": "+"var"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBOOL",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VALORESBOOL ::= LITBOOL 
            {
              Object RESULT =null;
		int litBoolleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litBoolright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litBool = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litBool.toString()+": "+"bool"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBOOL",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VARIABLESFLOAT ::= CREAASIGVARFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESFLOAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VARIABLESFLOAT ::= CREAVARFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESFLOAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CREAASIGVARFLOAT ::= TIPOFLOAT SEPARADOR IDENTIFICADOR SIGNOIGUAL OPERACIONARIT ENDLINE 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		   // ++++ Análisis semántico ++++
                    String ladoIzqTipo = tip.toString();
                    String ladoIzqId = id.toString(); 

                    if ((op.equals("error_semantico"))){
                        RESULT = "error_semantico";
                    }else{
                        String[] partes_op = op.toString().split(": ");

                        if((ladoIzqTipo.equals(partes_op[1].toString())) || (partes_op[1].toString().equals("var"))){
                            if(!(ladoIzqTipo.equals(partes_op[1].toString())) && buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_op[0].toString(), "id") == null){
                                //Manejo error semántico
                                manejoError("'" + tip +" # "+ id + " = " + partes_op[0] + ";' " + "El ID: '"+ partes_op[0] +"' no ha sido creado anteriormente", "semántico");
                                RESULT = "error_semantico";
                            }else{
                                if (!(ladoIzqTipo.equals(partes_op[1])) && !(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_op[0], "id").equals("float"))){
                                    //Manejo error semántico
                                    manejoError("'" + tip +" # "+ id + " = " + partes_op[0] + ";' " + "La variable: '"+ partes_op[0] +"' no es de tipo float", "semántico");
                                    RESULT = "error_semantico";
                                }else{
                                    if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null ) {
                                        String temp = "t"+(currentTemp++); 
                                        if (partes_op[0].charAt(0)=='('){
                                            listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                                            codIn3D.append("\ndataFloat "+ladoIzqId);
                                            ejecutaOpeArit(partes_op[0]);
                                            mipsMain.append("\n   sw $t0, "+ id);

                                            codIn3D.append("\n"+ ladoIzqId +" = t1");
                                            mipsData.append("   " + ladoIzqId+": ."+"float 0.0"+"\n");

                                        }else{
                                            // ++++ Código 3D ++++
                                            if (currentTemp == 10){
                                                currentTemp = 0;
                                            }
                                            codIn3D.append("\ndataFloat "+ladoIzqId);
                                            codIn3D.append("\n"+ temp +" = "+partes_op[0].toString());                                        
                                            codIn3D.append("\n"+ ladoIzqId +" = "+temp);
                                            mipsData.append("   " + ladoIzqId+": ."+"word 0"+"\n");

                                            String mipsAsignation = "";
                                            if(partes_op[1].equals("var")){
                                                mipsAsignation = "lw $"+temp+", "+ partes_op[0];
                                            }else{
                                                mipsAsignation = "li $"+temp+", "+ partes_op[0];
                                            }
                                            mipsMain.append("\n   "+mipsAsignation);

                                            mipsAsignation = "sw "+temp+", "+ladoIzqId.toString();                            
                                            mipsMain.append("\n   "+mipsAsignation);
                                            RESULT = "float ::"+temp; 

                                            // +++ Tabla de símbolos ++++ 
                                            listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                                            RESULT = id.toString()+": "+tip.toString();
                                        }
                                    }else{
                                        //Manejo error semántico
                                        manejoError("'" + tip +" # "+ id + ";' " + "El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+currentHash, "semántico");
                                        RESULT = "error_semantico";
                                    }

                                }
                            }
                        }
                        else{
                            //Manejo error semántico
                            manejoError("'" + tip +" # "+ id + " = " + partes_op[0] + ";' " + "El tipo de dato de '"+partes_op[0]+"' es incompatible", "semántico");
                            RESULT = "error_semantico";
                        }
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAASIGVARFLOAT",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CREAVARFLOAT ::= TIPOFLOAT SEPARADOR IDENTIFICADOR ENDLINE 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		   // ++++ Análisis semántico ++++
                    if(fatherCurrentHash != null && buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), id.toString(), "id") == null){
                        if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null ) {
                            // ++++ Código 3D ++++
                            codIn3D.append("\ndataFloat"+" "+id.toString());
                            mipsData.append("   " + id.toString()+": ."+"float 0.0"+"\n");

                            // +++ Tabla de símbolos ++++ 
                            listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                            RESULT = id.toString()+": "+tip.toString();
                        }
                        else{
                            //Manejo error semántico
                            manejoError("El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+currentHash, "semántico");
                            RESULT = "error_semantico";
                        }
                    }
                    else if(fatherCurrentHash == null && buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null){
                            // ++++ Código 3D ++++
                            codIn3D.append("\ndataFloat"+" "+id.toString());
                            mipsData.append("   " + id.toString()+": ."+"float 0.0"+"\n");

                            // +++ Tabla de símbolos ++++ 
                            listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                            RESULT = id.toString()+": "+tip.toString();
                    }
                    else{
                        //Manejo error semántico
                        manejoError("El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+fatherCurrentHash, "semántico");
                        RESULT = "error_semantico";
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAVARFLOAT",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VARIABLESINT ::= CREAASIGVARINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESINT",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VARIABLESINT ::= CREAVARINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESINT",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VARIABLESINT ::= ASIGNVAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESINT",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CREAASIGVARINT ::= TIPOINT SEPARADOR IDENTIFICADOR SIGNOIGUAL OPERACIONARIT ENDLINE 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		   // ++++ Análisis semántico ++++
                    String ladoIzqTipo = tip.toString();
                    String ladoIzqId = id.toString(); 

                    if ((op.equals("error_semantico"))){
                        RESULT = "error_semantico";
                    }else{
                        String[] partes_op = op.toString().split(": ");

                        if((ladoIzqTipo.equals(partes_op[1].toString())) || (partes_op[1].toString().equals("var"))){
                            if(!(ladoIzqTipo.equals(partes_op[1].toString())) && buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_op[0].toString(), "id") == null){
                                //Manejo error semántico
                                manejoError("'" + tip +" # "+ id + " = " + partes_op[0] + ";' " + "El ID: '"+ partes_op[0] +"' no ha sido creado anteriormente", "semántico");
                                RESULT = "error_semantico";
                            }else{
                                if (!(ladoIzqTipo.equals(partes_op[1])) && !(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_op[0], "id").equals("int"))){
                                    //Manejo error semántico
                                    manejoError("'" + tip +" # "+ id + " = " + partes_op[0] + ";' " + "La variable: '"+ partes_op[0] +"' no es de tipo int", "semántico");
                                    RESULT = "error_semantico";
                                }else{
                                    if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null ) {
                                        String temp = "t"+(currentTemp++); 
                                        if (partes_op[0].charAt(0)=='('){
                                            listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                                            codIn3D.append("\ndataInt "+ladoIzqId);
                                            ejecutaOpeArit(partes_op[0]);
                                            mipsMain.append("\n   sw $t0, "+ id);

                                            codIn3D.append("\n"+ ladoIzqId +" = t1");
                                            mipsData.append("   " + ladoIzqId+": ."+"word 0"+"\n");

                                        }else{
                                            // ++++ Código 3D ++++
                                            //String temp = "t"+(currentTemp++); 
                                            if (currentTemp == 10){
                                                currentTemp = 0;
                                            }
                                            codIn3D.append("\ndataInt "+ladoIzqId);
                                            codIn3D.append("\n"+ temp +" = "+partes_op[0].toString());                                        
                                            codIn3D.append("\n"+ ladoIzqId +" = "+temp);
                                            mipsData.append("   " + ladoIzqId+": ."+"word 0"+"\n");

                                            String mipsAsignation = "";
                                            if(partes_op[1].equals("var")){
                                                mipsAsignation = "lw $"+temp+", "+ partes_op[0];
                                            }else{
                                                mipsAsignation = "li $"+temp+", "+ partes_op[0];
                                            }
                                            mipsMain.append("\n   "+mipsAsignation);

                                            mipsAsignation = "sw "+temp+", "+ladoIzqId.toString();                            
                                            mipsMain.append("\n   "+mipsAsignation);
                                            RESULT = "int ::"+temp; 

                                            // +++ Tabla de símbolos ++++ 
                                            listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                                            RESULT = id.toString()+": "+tip.toString();
                                        }
                                    }else{
                                        //Manejo error semántico
                                        manejoError("'" + tip +" # "+ id + ";' " + "El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+currentHash, "semántico");
                                        RESULT = "error_semantico";
                                    }

                                }
                            }
                        }
                        else{
                            //Manejo error semántico
                            manejoError("'" + tip +" # "+ id + " = " + partes_op[0] + ";' " + "El tipo de dato de '"+partes_op[0]+"' es incompatible", "semántico");
                            RESULT = "error_semantico";
                        }
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAASIGVARINT",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CREAVARINT ::= TIPOINT SEPARADOR IDENTIFICADOR ENDLINE 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		   // ++++ Análisis semántico ++++
                    if(fatherCurrentHash != null && buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), id.toString(), "id") == null){
                        if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null ) {
                            // ++++ Código 3D ++++
                            codIn3D.append("\ndataInt"+" "+id.toString());
                            mipsData.append("   " + id.toString()+": ."+"word 0"+"\n");

                            // +++ Tabla de símbolos ++++ 
                            listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                            RESULT = id.toString()+": "+tip.toString();
                        }
                        else{
                            //Manejo error semántico
                            manejoError("'" + tip +" # "+ id + ";' " + "El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+currentHash, "semántico");
                            RESULT = "error_semantico";
                        }
                    }
                    else if(fatherCurrentHash == null && buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null){
                            // ++++ Código 3D ++++
                            codIn3D.append("\ndataInt"+" "+id.toString());
                            mipsData.append("   " + id.toString()+": ."+"word 0"+"\n");

                            // +++ Tabla de símbolos ++++ 
                            listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                            RESULT = id.toString()+": "+tip.toString();
                    }
                    else{
                        //Manejo error semántico
                        manejoError("El ID: '"+id+"' ya ha sido utilizado en otra creación de variable dentro de "+fatherCurrentHash, "semántico");
                        RESULT = "error_semantico";
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAVARINT",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASIGNVAR ::= IDENTIFICADOR SIGNOIGUAL OPERACIONARIT ENDLINE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		   // ++++ Análisis semántico ++++
                    String tip = buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id");
                    String ladoIzqTipo = tip;
                    String ladoIzqId = id.toString(); 
                    if (tip == null){
                        //Manejo error semántico
                        manejoError("El ID: "+ id +" no ha sido creado anteriormente", "semántico");
                        RESULT = "error_semantico";
                    }else{
                        if ((op.equals("error_semantico"))){
                            RESULT = "error_semantico";
                        }else{
                            String[] partes_op = op.toString().split(": ");
                            if((ladoIzqTipo.equals(partes_op[1].toString())) || (partes_op[1].toString().equals("var"))){
                                if(!(ladoIzqTipo.equals(partes_op[1].toString())) && buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_op[0].toString(), "id") == null){
                                    //Manejo error semántico
                                    manejoError("'" + tip +" # "+ id + " = " + partes_op[0] + ";' " + "El ID: '"+ partes_op[0] +"' no ha sido creado anteriormente", "semántico");
                                    RESULT = "error_semantico";
                                }else{
                                    if (!(ladoIzqTipo.equals(partes_op[1])) && !(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_op[0], "id").equals("int"))){
                                        //Manejo error semántico
                                        manejoError("'" + tip +" # "+ id + " = " + partes_op[0] + ";' " + "La variable: '"+ partes_op[0] +"' no es de tipo int", "semántico");
                                        RESULT = "error_semantico";
                                    }else{
                                        if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null ) {
                                            String temp = "t"+(currentTemp++); 
                                            if (partes_op[0].charAt(0)=='('){
                                                listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                                                codIn3D.append("\ndataInt "+ladoIzqId);
                                                ejecutaOpeArit(partes_op[0]);
                                                mipsMain.append("\n   sw $t0, "+ id);

                                                codIn3D.append("\n"+ ladoIzqId +" = t1");
                                                mipsData.append("   " + ladoIzqId+": ."+"word 0"+"\n");

                                            }else{
                                                // ++++ Código 3D ++++
                                                //String temp = "t"+(currentTemp++); 
                                                if (currentTemp == 10){
                                                    currentTemp = 0;
                                                }
                                                codIn3D.append("\ndataInt "+ladoIzqId);
                                                codIn3D.append("\n"+ temp +" = "+partes_op[0].toString());                                        
                                                codIn3D.append("\n"+ ladoIzqId +" = "+temp);
                                                mipsData.append("   " + ladoIzqId+": ."+"word 0"+"\n");

                                                String mipsAsignation = "";
                                                if(partes_op[1].equals("var")){
                                                    mipsAsignation = "lw $"+temp+", "+ partes_op[0];
                                                }else{
                                                    mipsAsignation = "li $"+temp+", "+ partes_op[0];
                                                }
                                                mipsMain.append("\n   "+mipsAsignation);

                                                mipsAsignation = "sw "+temp+", "+ladoIzqId.toString();                            
                                                mipsMain.append("\n   "+mipsAsignation);
                                                RESULT = "int ::"+temp; 

                                                // +++ Tabla de símbolos ++++ 
                                                listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                                                RESULT = id.toString()+": "+tip.toString();
                                            }
                                        }else{
                                            //Manejo error semántico
                                            manejoError("'" + tip +" # "+ id + ";' " + "El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+currentHash, "semántico");
                                            RESULT = "error_semantico";
                                        }

                                    }
                                }
                            }
                            else{
                                //Manejo error semántico
                                manejoError("'" + tip +" # "+ id + " = " + partes_op[0] + ";' " + "El tipo de dato de '"+partes_op[0]+"' es incompatible", "semántico");
                                RESULT = "error_semantico";
                            }
                        }
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNVAR",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERACIONARIT ::= SIGABREPARENT OPERACIONARIT SIGCIERRAPARENT 
            {
              Object RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object valor1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = valor1 ;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONARIT",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERACIONARIT ::= VALORESARIT OPERADORESARITME OPERACIONARIT 
            {
              Object RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object valor1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object sig = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object valor2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                        if ((valor1.equals("error_semantico")) || (valor2.equals("error_semantico"))){
                            RESULT = "error_semantico";
                        }else{
                            String[] partes_valor1 = valor1.toString().split(": ");
                            String[] partes_valor2 = valor2.toString().split(": ");
                            boolean errores = false;
                            if(partes_valor1[1].equals("var") || partes_valor2[1].equals("var")){
                                String tipo1 = buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), partes_valor1[0], "id");
                                String tipo2 = buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), partes_valor2[0], "id");
                                if (tipo1==null && tipo2==null){
                                    if(partes_valor2[1].equals("var") && (!partes_valor1[1].equals("var"))){
                                        manejoError("'" + partes_valor1[0] + " " + sig + " " + partes_valor2[0] + "' El la variable '"+ partes_valor2[0] +"' no ha sido creada previamente, dentro de "+currentHash, "semántico");
                                        RESULT = "error_semantico"; 
                                        errores = true;
                                    }else { if(!partes_valor2[1].equals("var") && (partes_valor1[1].equals("var"))){
                                        manejoError("'" + partes_valor1[0] + " " + sig + " " + partes_valor2[0] + "' El la variable '"+ partes_valor1[0] +"' no ha sido creada previamente, dentro de "+currentHash, "semántico");
                                        RESULT = "error_semantico"; 
                                        errores = true;
                                    } else {
                                        manejoError("'" + partes_valor1[0] + " " + sig + " " + partes_valor2[0] + "' Las variables: '"+ partes_valor1[0] +"' y " + partes_valor2[0] + " no han sido creadas previamente, dentro de "+currentHash, "semántico");
                                        RESULT = "error_semantico"; 
                                        errores = true;
                                    }}
                                }else {if (tipo1!=null && tipo2!=null){
                                    if(!tipo1.equals(tipo2)){
                                        manejoError("'" + partes_valor1[0] + " " + sig + " " + partes_valor2[0] + "' Las variables de los operadores no son del mismo tipo, una de tipo '" + partes_valor1[1] + "' y la otra de tipo '" + partes_valor1[1] + "', dentro de "+currentHash, "semántico");errores = true;
                                        RESULT = "error_semantico"; 
                                        errores = true;
                                    }
                                }else{ if (tipo1==null && tipo2!=null){
                                    if(!partes_valor1[1].equals(tipo2)){
                                        manejoError("'" + partes_valor1[0] + " " + sig + " " + partes_valor2[0] + "' El la variable '"+ partes_valor2[0] +"', debe ser de tipo tipo:'" + partes_valor1[1] + "', dentro de "+currentHash, "semántico");
                                        RESULT = "error_semantico"; 
                                        errores = true;
                                    }
                                }else{if (tipo2==null && tipo1!=null){
                                    if(!partes_valor2[1].equals(tipo1)){
                                        manejoError("'" + partes_valor1[0] + " " + sig + " " + partes_valor2[0] + "' El la variable '"+ partes_valor1[0] +"', debe ser de tipo tipo:'" + partes_valor2[1] + "', dentro de "+currentHash, "semántico");
                                        RESULT = "error_semantico"; 
                                        errores = true;
                                    }
                                }}}}
                            }
                            if (!(partes_valor1[1].equals("float")) && (!partes_valor1[1].equals("int")) && (!partes_valor1[1].equals("var"))){
                                //Manejo error semántico
                                errores = true;
                                manejoError("'" + valor1 + " " + sig + " " + valor2 + "' El operador: "+ valor1 +" es de un tipo incorrecto para una operacion aritmetica, dentro de "+currentHash, "semántico");
                                RESULT = "error_semantico";
                            }
                            if (!(partes_valor2[1].equals("float")) && (!partes_valor2[1].equals("int")) && (!partes_valor2[1].equals("var"))){
                                //Manejo error semántico
                                errores = true;
                                manejoError("'" + valor1 + " " + sig + " " + valor2 + "' El operador: "+ valor2 +" es de un tipo incorrecto para una operacion aritmetica, dentro de "+currentHash, "semántico");
                                RESULT = "error_semantico";                               
                            }   
                            if (partes_valor1[1].equals(partes_valor2[1]) || partes_valor1[1].equals("var") || partes_valor2[1].equals("var")){
                                if (!errores){
                                    String tipo = "";
                                    if (partes_valor1[1].equals("var")&& (!partes_valor2[1].equals("var"))){
                                        tipo = partes_valor2[1];
                                    }else{
                                        if (partes_valor2[1].equals("var")&& (!partes_valor1[1].equals("var"))){
                                            tipo = partes_valor1[1];
                                        }else{
                                            if ((!partes_valor2[1].equals("var")) && (!partes_valor1[1].equals("var"))){
                                                tipo = partes_valor1[1];
                                            }else{
                                                tipo = buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), partes_valor1[0], "id");                                                
                                            }
                                        }
                                    }
                                    if (!existeOpeArit){
                                        // codigo Mips para operaciones
                                        mipsFunciones.append("calculate:\n  addi $sp, $sp, -12\n  sw $t0, 0($sp)\n  sw $a0, 4($sp)\n  sw $a1, 8($sp)\n  lw $t1, 4($sp)\n  lw $t2, 8($sp)\n  lb $t3, 12($sp)\n  beq $t3, '+', add_op\n  beq $t3, '-', sub_op\n  beq $t3, '*', mul_op\n  beq $t3, '/', div_op\n  beq $t3, '^', pow_op\n  beq $t3, '%', mod_op\nadd_op:\n  add $t0, $t1, $t2\n  j end_calculation\nsub_op:\n  sub $t0, $t1, $t2\n  j end_calculation\nmul_op:\n  mul $t0, $t1, $t2\n  j end_calculation\ndiv_op:\n  div $t1, $t2\n  mflo $t0\n  j end_calculation\npow_op:\n  \n  li $v0, 1 \n  move $t4, $t2   \n  power_loop:\n      beqz $t4, end_power  \n      mul $v0, $v0, $t1    \n      subi $t4, $t4, 1     \n      j power_loop\nend_power:\n  move $t0, $v0  \n  j end_calculation\nmod_op:\n  div $t1, $t2\n  mfhi $t0       \nend_calculation:\n  lw $t0, 0($sp)\n  addi $sp, $sp, 12\n  jr $ra");
                                        existeOpeArit = true;
                                    }
                                    if (!errores){
                                        String temp = "(" + partes_valor1[0] + "'" + sig + "'" + partes_valor2[0] +")";
                                        RESULT = temp + ": " + tipo; 
                                    }else{
                                        String temp = "(" + partes_valor1[0] + "'" + sig + "'" + partes_valor2[0] +")";
                                        RESULT = temp + ": err";
                                    }
                                }
                            }else{
                                //Manejo error semántico
                                manejoError("'" + valor1 + " " + sig + " " + valor2 + "' Los operadores no son del mismo tipo, dentro de "+currentHash, "semántico");
                                RESULT = "error_semantico";
                            }
                        }
                    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONARIT",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERACIONARIT ::= VALORESARIT 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = valor ;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONARIT",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VALORESARIT ::= OPERAUNARIA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESARIT",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VALORESARIT ::= LLAMARFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESARIT",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VALORESARIT ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = id+": "+"var"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESARIT",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VALORESARIT ::= LITFLOAT 
            {
              Object RESULT =null;
		int litfloatleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litfloatright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litfloat = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litfloat.toString()+": "+"float"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESARIT",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VALORESARIT ::= LITINT 
            {
              Object RESULT =null;
		int litIntleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litIntright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litInt = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litInt.toString()+": "+"int"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESARIT",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPERACIONUNARIA ::= OPERAUNARIA ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONUNARIA",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPERAUNARIA ::= OPERADORESUNARIOS IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERAUNARIA",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPERAUNARIA ::= IDENTIFICADOR OPERADORESUNARIOS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERAUNARIA",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTRETURN ::= RESERVRETURN SEPARADOR DATOSRETORNO ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTRETURN",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DATOSRETORNO ::= LLAMARFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DATOSRETORNO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DATOSRETORNO ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = id+": "+"var"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DATOSRETORNO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DATOSRETORNO ::= LITBOOL 
            {
              Object RESULT =null;
		int litboolleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litboolright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litbool = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litbool.toString()+": "+"bool"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DATOSRETORNO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DATOSRETORNO ::= LITFLOAT 
            {
              Object RESULT =null;
		int litfloatleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litfloatright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litfloat = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litfloat.toString()+": "+"float"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DATOSRETORNO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DATOSRETORNO ::= LITINT 
            {
              Object RESULT =null;
		int litIntleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litIntright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litInt = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litInt.toString()+": "+"int"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DATOSRETORNO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // COMENTARIOS ::= COMENTARIOMULTIPLE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // COMENTARIOS ::= COMENTARIOSIMPLE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OPERADORESUNARIOS ::= SIGDIMINU 
            {
              Object RESULT =null;
		 RESULT = "--";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESUNARIOS",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // OPERADORESUNARIOS ::= SIGAUMEN 
            {
              Object RESULT =null;
		 RESULT = "++";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESUNARIOS",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // OPERADORESLOGICOS ::= SIGDISYUNCION 
            {
              Object RESULT =null;
		 RESULT = "|";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESLOGICOS",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OPERADORESLOGICOS ::= SIGCONJUNCION 
            {
              Object RESULT =null;
		 RESULT = "&";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESLOGICOS",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OPERADORESARITME ::= SIGPOT 
            {
              Object RESULT =null;
		 RESULT = "^";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESARITME",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OPERADORESARITME ::= SIGMOD 
            {
              Object RESULT =null;
		 RESULT = "%";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESARITME",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OPERADORESARITME ::= SIGDIV 
            {
              Object RESULT =null;
		 RESULT = "/";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESARITME",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OPERADORESARITME ::= SIGMULTI 
            {
              Object RESULT =null;
		 RESULT = "*";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESARITME",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OPERADORESARITME ::= SIGSUMA 
            {
              Object RESULT =null;
		 RESULT = "+";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESARITME",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OPERADORESARITME ::= SIGRESTA 
            {
              Object RESULT =null;
		 RESULT = "-";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESARITME",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LITBOOL ::= LITFALSE 
            {
              Object RESULT =null;
		 RESULT = "false"+": "+"bool"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITBOOL",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // LITBOOL ::= LITTRUE 
            {
              Object RESULT =null;
		 RESULT = "true"+": "+"bool"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITBOOL",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

