
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 22 23:53:22 CST 2023
//----------------------------------------------------

package sintaxis;

import java_cup.runtime.Symbol;
import java.util.List;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 22 23:53:22 CST 2023
  */
public class Syntax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\261\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\004\003\000\002\004\003\000\002\005\003\000\002" +
    "\005\003\000\002\007\003\000\002\007\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\011\006\000\002\013\004\000" +
    "\002\013\004\000\002\014\004\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\003\000\002\016\005\000\002\016\005" +
    "\000\002\017\006\000\002\020\006\000\002\021\010\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\023\006\000\002\024\010\000\002\025\003\000\002\025" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\005" +
    "\000\002\026\003\000\002\032\006\000\002\033\010\000" +
    "\002\033\011\000\002\034\003\000\002\034\003\000\002" +
    "\035\003\000\002\035\003\000\002\036\006\000\002\037" +
    "\010\000\002\040\003\000\002\040\003\000\002\041\003" +
    "\000\002\041\003\000\002\042\006\000\002\043\010\000" +
    "\002\044\003\000\002\044\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\046\007\000\002\047\007" +
    "\000\002\050\007\000\002\051\007\000\002\052\007\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\054\003\000\002\054\003\000\002\055" +
    "\003\000\002\055\003\000\002\056\005\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\057\003\000\002\057\005\000\002" +
    "\060\003\000\002\060\005\000\002\061\003\000\002\061" +
    "\004\000\002\061\005\000\002\061\005\000\002\122\003" +
    "\000\002\062\005\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\064\003\000\002\064\003\000\002" +
    "\064\003\000\002\064\003\000\002\065\003\000\002\065" +
    "\003\000\002\065\004\000\002\065\003\000\002\065\003" +
    "\000\002\066\004\000\002\066\003\000\002\066\003\000" +
    "\002\067\006\000\002\070\012\000\002\070\011\000\002" +
    "\031\002\000\002\030\002\000\002\071\003\000\002\072" +
    "\005\000\002\073\007\000\002\074\003\000\002\074\003" +
    "\000\002\074\003\000\002\075\011\000\002\076\007\000" +
    "\002\076\010\000\002\077\003\000\002\077\003\000\002" +
    "\077\003\000\002\077\003\000\002\100\010\000\002\101" +
    "\003\000\002\101\004\000\002\102\006\000\002\103\012" +
    "\000\002\104\003\000\002\104\003\000\002\104\003\000" +
    "\002\104\003\000\002\110\005\000\002\027\003\000\002" +
    "\027\005\000\002\105\005\000\002\105\004\000\002\106" +
    "\007\000\002\123\005\000\002\111\003\000\002\111\003" +
    "\000\002\111\003\000\002\111\003\000\002\111\003\000" +
    "\002\111\003\000\002\112\003\000\002\112\005\000\002" +
    "\113\006\000\002\113\005\000\002\114\004\000\002\115" +
    "\003\000\002\115\003\000\002\115\003\000\002\115\003" +
    "\000\002\115\003\000\002\115\003\000\002\115\003\000" +
    "\002\115\003\000\002\115\003\000\002\115\003\000\002" +
    "\116\003\000\002\116\003\000\002\116\003\000\002\117" +
    "\004\000\002\120\003\000\002\120\004\000\002\120\004" +
    "\000\002\120\005\000\002\121\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012b\000\020\040\021\041\025\042\012\043\031\044" +
    "\010\066\024\067\013\001\002\000\020\040\uff63\041\uff63" +
    "\042\uff63\043\uff63\044\uff63\066\uff63\067\uff63\001\002\000" +
    "\004\002\uff51\001\002\000\020\040\uff5c\041\uff5c\042\uff5c" +
    "\043\uff5c\044\uff5c\066\uff5c\067\uff5c\001\002\000\020\040" +
    "\131\041\025\042\012\043\031\044\010\066\024\067\013" +
    "\001\002\000\004\005\u0125\001\002\000\020\040\uff5a\041" +
    "\uff5a\042\uff5a\043\uff5a\044\uff5a\066\uff5a\067\uff5a\001\002" +
    "\000\004\005\u0111\001\002\000\022\035\ufff3\040\ufff3\041" +
    "\ufff3\042\ufff3\043\ufff3\044\ufff3\066\ufff3\067\ufff3\001\002" +
    "\000\004\040\u010d\001\002\000\020\040\uff57\041\uff57\042" +
    "\uff57\043\uff57\044\uff57\066\uff57\067\uff57\001\002\000\020" +
    "\040\uff60\041\uff60\042\uff60\043\uff60\044\uff60\066\uff60\067" +
    "\uff60\001\002\000\020\040\uff5f\041\uff5f\042\uff5f\043\uff5f" +
    "\044\uff5f\066\uff5f\067\uff5f\001\002\000\020\040\uff59\041" +
    "\uff59\042\uff59\043\uff59\044\uff59\066\uff59\067\uff59\001\002" +
    "\000\004\005\u010b\001\002\000\020\040\uff5e\041\uff5e\042" +
    "\uff5e\043\uff5e\044\uff5e\066\uff5e\067\uff5e\001\002\000\020" +
    "\040\uff58\041\uff58\042\uff58\043\uff58\044\uff58\066\uff58\067" +
    "\uff58\001\002\000\022\035\ufff4\040\ufff4\041\ufff4\042\ufff4" +
    "\043\ufff4\044\ufff4\066\ufff4\067\ufff4\001\002\000\004\005" +
    "\u0105\001\002\000\022\002\uff55\040\131\041\025\042\012" +
    "\043\031\044\010\066\024\067\013\001\002\000\004\032" +
    "\050\001\002\000\020\040\uff5b\041\uff5b\042\uff5b\043\uff5b" +
    "\044\uff5b\066\uff5b\067\uff5b\001\002\000\004\005\037\001" +
    "\002\000\020\040\uff61\041\uff61\042\uff61\043\uff61\044\uff61" +
    "\066\uff61\067\uff61\001\002\000\020\040\uff62\041\uff62\042" +
    "\uff62\043\uff62\044\uff62\066\uff62\067\uff62\001\002\000\020" +
    "\040\uff5d\041\uff5d\042\uff5d\043\uff5d\044\uff5d\066\uff5d\067" +
    "\uff5d\001\002\000\004\002\036\001\002\000\004\002\001" +
    "\001\002\000\004\065\040\001\002\000\006\004\041\010" +
    "\042\001\002\000\050\022\uffcc\023\uffcc\035\uffcc\040\uffcc" +
    "\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047" +
    "\uffcc\051\uffcc\052\uffcc\053\uffcc\055\uffcc\056\uffcc\065\uffcc" +
    "\066\uffcc\067\uffcc\001\002\000\006\063\045\065\043\001" +
    "\002\000\004\004\uffcd\001\002\000\004\004\046\001\002" +
    "\000\004\004\uffce\001\002\000\050\022\uffcb\023\uffcb\035" +
    "\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb" +
    "\046\uffcb\047\uffcb\051\uffcb\052\uffcb\053\uffcb\055\uffcb\056" +
    "\uffcb\065\uffcb\066\uffcb\067\uffcb\001\002\000\004\034\066" +
    "\001\002\000\014\033\053\040\051\041\055\042\052\043" +
    "\056\001\002\000\004\005\uff79\001\002\000\004\005\uff77" +
    "\001\002\000\004\034\uff71\001\002\000\006\007\064\033" +
    "\uff74\001\002\000\004\005\uff78\001\002\000\004\005\uff76" +
    "\001\002\000\004\005\062\001\002\000\004\033\061\001" +
    "\002\000\004\034\uff72\001\002\000\004\065\063\001\002" +
    "\000\006\007\uff75\033\uff75\001\002\000\012\040\051\041" +
    "\055\042\052\043\056\001\002\000\004\033\uff73\001\002" +
    "\000\046\022\102\023\101\040\131\041\025\042\012\043" +
    "\031\044\010\045\132\046\073\047\uff8d\051\107\052\110" +
    "\053\067\055\075\056\072\065\113\066\024\067\013\001" +
    "\002\000\004\032\366\001\002\000\050\022\uffb7\023\uffb7" +
    "\035\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045" +
    "\uffb7\046\uffb7\047\uffb7\051\uffb7\052\uffb7\053\uffb7\055\uffb7" +
    "\056\uffb7\065\uffb7\066\uffb7\067\uffb7\001\002\000\050\022" +
    "\uffb5\023\uffb5\035\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5" +
    "\044\uffb5\045\uffb5\046\uffb5\047\uffb5\051\uffb5\052\uffb5\053" +
    "\uffb5\055\uffb5\056\uffb5\065\uffb5\066\uffb5\067\uffb5\001\002" +
    "\000\004\005\356\001\002\000\004\032\341\001\002\000" +
    "\050\022\uff9b\023\uff9b\035\uff9b\040\uff9b\041\uff9b\042\uff9b" +
    "\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\051\uff9b\052" +
    "\uff9b\053\uff9b\055\uff9b\056\uff9b\065\uff9b\066\uff9b\067\uff9b" +
    "\001\002\000\004\004\340\001\002\000\050\022\uffd8\023" +
    "\uffd8\035\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8" +
    "\045\uffd8\046\uffd8\047\uffd8\051\uffd8\052\uffd8\053\uffd8\055" +
    "\uffd8\056\uffd8\065\uffd8\066\uffd8\067\uffd8\001\002\000\050" +
    "\022\uffdc\023\uffdc\035\uffdc\040\uffdc\041\uffdc\042\uffdc\043" +
    "\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\051\uffdc\052\uffdc" +
    "\053\uffdc\055\uffdc\056\uffdc\065\uffdc\066\uffdc\067\uffdc\001" +
    "\002\000\050\022\uffcf\023\uffcf\035\uffcf\040\uffcf\041\uffcf" +
    "\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\051" +
    "\uffcf\052\uffcf\053\uffcf\055\uffcf\056\uffcf\065\uffcf\066\uffcf" +
    "\067\uffcf\001\002\000\040\004\ufff5\011\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\015\ufff5\016\ufff5\024\ufff5\025\ufff5\026\ufff5" +
    "\027\ufff5\030\ufff5\031\ufff5\033\ufff5\065\ufff5\001\002\000" +
    "\040\004\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6" +
    "\016\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031" +
    "\ufff6\033\ufff6\065\ufff6\001\002\000\050\022\uffca\023\uffca" +
    "\035\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045" +
    "\uffca\046\uffca\047\uffca\051\uffca\052\uffca\053\uffca\055\uffca" +
    "\056\uffca\065\uffca\066\uffca\067\uffca\001\002\000\050\022" +
    "\uff98\023\uff98\035\uff98\040\uff98\041\uff98\042\uff98\043\uff98" +
    "\044\uff98\045\uff98\046\uff98\047\uff98\051\uff98\052\uff98\053" +
    "\uff98\055\uff98\056\uff98\065\uff98\066\uff98\067\uff98\001\002" +
    "\000\004\035\uff91\001\002\000\050\022\uffbd\023\uffbd\035" +
    "\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd" +
    "\046\uffbd\047\uffbd\051\uffbd\052\uffbd\053\uffbd\055\uffbd\056" +
    "\uffbd\065\uffbd\066\uffbd\067\uffbd\001\002\000\004\032\311" +
    "\001\002\000\004\032\227\001\002\000\004\004\303\001" +
    "\002\000\004\004\302\001\002\000\012\010\277\022\102" +
    "\023\101\032\173\001\002\000\050\022\uffbf\023\uffbf\035" +
    "\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf" +
    "\046\uffbf\047\uffbf\051\uffbf\052\uffbf\053\uffbf\055\uffbf\056" +
    "\uffbf\065\uffbf\066\uffbf\067\uffbf\001\002\000\050\022\uff97" +
    "\023\uff97\035\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044" +
    "\uff97\045\uff97\046\uff97\047\uff97\051\uff97\052\uff97\053\uff97" +
    "\055\uff97\056\uff97\065\uff97\066\uff97\067\uff97\001\002\000" +
    "\050\022\uffb6\023\uffb6\035\uffb6\040\uffb6\041\uffb6\042\uffb6" +
    "\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\051\uffb6\052" +
    "\uffb6\053\uffb6\055\uffb6\056\uffb6\065\uffb6\066\uffb6\067\uffb6" +
    "\001\002\000\050\022\uff9c\023\uff9c\035\uff9c\040\uff9c\041" +
    "\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c" +
    "\051\uff9c\052\uff9c\053\uff9c\055\uff9c\056\uff9c\065\uff9c\066" +
    "\uff9c\067\uff9c\001\002\000\050\022\uff95\023\uff95\035\uff95" +
    "\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046" +
    "\uff95\047\uff95\051\uff95\052\uff95\053\uff95\055\uff95\056\uff95" +
    "\065\uff95\066\uff95\067\uff95\001\002\000\050\022\uffd0\023" +
    "\uffd0\035\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0" +
    "\045\uffd0\046\uffd0\047\uffd0\051\uffd0\052\uffd0\053\uffd0\055" +
    "\uffd0\056\uffd0\065\uffd0\066\uffd0\067\uffd0\001\002\000\050" +
    "\022\uff9e\023\uff9e\035\uff9e\040\uff9e\041\uff9e\042\uff9e\043" +
    "\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\051\uff9e\052\uff9e" +
    "\053\uff9e\055\uff9e\056\uff9e\065\uff9e\066\uff9e\067\uff9e\001" +
    "\002\000\050\022\102\023\101\035\uff92\040\131\041\025" +
    "\042\012\043\031\044\010\045\132\046\073\047\uff8d\051" +
    "\107\052\110\053\067\055\075\056\072\065\113\066\024" +
    "\067\013\001\002\000\004\047\226\001\002\000\050\022" +
    "\uffde\023\uffde\035\uffde\040\uffde\041\uffde\042\uffde\043\uffde" +
    "\044\uffde\045\uffde\046\uffde\047\uffde\051\uffde\052\uffde\053" +
    "\uffde\055\uffde\056\uffde\065\uffde\066\uffde\067\uffde\001\002" +
    "\000\050\022\uffc4\023\uffc4\035\uffc4\040\uffc4\041\uffc4\042" +
    "\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\051\uffc4" +
    "\052\uffc4\053\uffc4\055\uffc4\056\uffc4\065\uffc4\066\uffc4\067" +
    "\uffc4\001\002\000\050\022\uffc0\023\uffc0\035\uffc0\040\uffc0" +
    "\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047" +
    "\uffc0\051\uffc0\052\uffc0\053\uffc0\055\uffc0\056\uffc0\065\uffc0" +
    "\066\uffc0\067\uffc0\001\002\000\050\022\uffb4\023\uffb4\035" +
    "\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4" +
    "\046\uffb4\047\uffb4\051\uffb4\052\uffb4\053\uffb4\055\uffb4\056" +
    "\uffb4\065\uffb4\066\uffb4\067\uffb4\001\002\000\004\005\157" +
    "\001\002\000\004\032\153\001\002\000\050\022\uffc2\023" +
    "\uffc2\035\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2" +
    "\045\uffc2\046\uffc2\047\uffc2\051\uffc2\052\uffc2\053\uffc2\055" +
    "\uffc2\056\uffc2\065\uffc2\066\uffc2\067\uffc2\001\002\000\050" +
    "\022\uffc1\023\uffc1\035\uffc1\040\uffc1\041\uffc1\042\uffc1\043" +
    "\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\051\uffc1\052\uffc1" +
    "\053\uffc1\055\uffc1\056\uffc1\065\uffc1\066\uffc1\067\uffc1\001" +
    "\002\000\050\022\uff99\023\uff99\035\uff99\040\uff99\041\uff99" +
    "\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\051" +
    "\uff99\052\uff99\053\uff99\055\uff99\056\uff99\065\uff99\066\uff99" +
    "\067\uff99\001\002\000\050\022\uff9f\023\uff9f\035\uff9f\040" +
    "\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f" +
    "\047\uff9f\051\uff9f\052\uff9f\053\uff9f\055\uff9f\056\uff9f\065" +
    "\uff9f\066\uff9f\067\uff9f\001\002\000\050\022\uffbe\023\uffbe" +
    "\035\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045" +
    "\uffbe\046\uffbe\047\uffbe\051\uffbe\052\uffbe\053\uffbe\055\uffbe" +
    "\056\uffbe\065\uffbe\066\uffbe\067\uffbe\001\002\000\050\022" +
    "\uffc9\023\uffc9\035\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9" +
    "\044\uffc9\045\uffc9\046\uffc9\047\uffc9\051\uffc9\052\uffc9\053" +
    "\uffc9\055\uffc9\056\uffc9\065\uffc9\066\uffc9\067\uffc9\001\002" +
    "\000\050\022\uffdd\023\uffdd\035\uffdd\040\uffdd\041\uffdd\042" +
    "\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\051\uffdd" +
    "\052\uffdd\053\uffdd\055\uffdd\056\uffdd\065\uffdd\066\uffdd\067" +
    "\uffdd\001\002\000\050\022\uff94\023\uff94\035\uff94\040\uff94" +
    "\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047" +
    "\uff94\051\uff94\052\uff94\053\uff94\055\uff94\056\uff94\065\uff94" +
    "\066\uff94\067\uff94\001\002\000\004\035\152\001\002\000" +
    "\050\022\uffc3\023\uffc3\035\uffc3\040\uffc3\041\uffc3\042\uffc3" +
    "\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\051\uffc3\052" +
    "\uffc3\053\uffc3\055\uffc3\056\uffc3\065\uffc3\066\uffc3\067\uffc3" +
    "\001\002\000\050\022\uff9a\023\uff9a\035\uff9a\040\uff9a\041" +
    "\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a" +
    "\051\uff9a\052\uff9a\053\uff9a\055\uff9a\056\uff9a\065\uff9a\066" +
    "\uff9a\067\uff9a\001\002\000\050\022\uffd9\023\uffd9\035\uffd9" +
    "\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046" +
    "\uffd9\047\uffd9\051\uffd9\052\uffd9\053\uffd9\055\uffd9\056\uffd9" +
    "\065\uffd9\066\uffd9\067\uffd9\001\002\000\050\022\uff9d\023" +
    "\uff9d\035\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d" +
    "\045\uff9d\046\uff9d\047\uff9d\051\uff9d\052\uff9d\053\uff9d\055" +
    "\uff9d\056\uff9d\065\uff9d\066\uff9d\067\uff9d\001\002\000\004" +
    "\065\151\001\002\000\036\004\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\030\uffeb\031\uffeb\033\uffeb\001\002\000\022\002" +
    "\uff70\040\uff70\041\uff70\042\uff70\043\uff70\044\uff70\066\uff70" +
    "\067\uff70\001\002\000\004\065\154\001\002\000\004\033" +
    "\155\001\002\000\004\004\156\001\002\000\050\022\uffbc" +
    "\023\uffbc\035\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044" +
    "\uffbc\045\uffbc\046\uffbc\047\uffbc\051\uffbc\052\uffbc\053\uffbc" +
    "\055\uffbc\056\uffbc\065\uffbc\066\uffbc\067\uffbc\001\002\000" +
    "\004\065\160\001\002\000\006\004\161\010\162\001\002" +
    "\000\050\022\uffe0\023\uffe0\035\uffe0\040\uffe0\041\uffe0\042" +
    "\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\051\uffe0" +
    "\052\uffe0\053\uffe0\055\uffe0\056\uffe0\065\uffe0\066\uffe0\067" +
    "\uffe0\001\002\000\016\022\102\023\101\032\167\061\164" +
    "\062\170\065\172\001\002\000\036\004\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\031\uffe6\033\uffe6\001\002\000" +
    "\036\004\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\033\uffe9\001\002\000\022\004\uffe4\011\222\012\216" +
    "\013\221\014\224\015\220\016\223\033\uffe4\001\002\000" +
    "\004\004\215\001\002\000\016\022\102\023\101\032\167" +
    "\061\164\062\170\065\172\001\002\000\036\004\uffe8\011" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\024\uffe8" +
    "\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\033\uffe8\001" +
    "\002\000\036\004\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030" +
    "\uffe5\031\uffe5\033\uffe5\001\002\000\044\004\uffe7\011\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\022\102\023" +
    "\101\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7" +
    "\032\173\033\uffe7\001\002\000\020\033\206\036\205\037" +
    "\176\061\177\062\204\063\202\065\207\001\002\000\036" +
    "\004\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016" +
    "\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec" +
    "\033\uffec\001\002\000\006\007\uff69\033\uff69\001\002\000" +
    "\020\004\uffff\007\uffff\017\uffff\020\uffff\030\uffff\031\uffff" +
    "\033\uffff\001\002\000\006\007\uff6e\033\uff6e\001\002\000" +
    "\006\007\211\033\uff68\001\002\000\004\033\210\001\002" +
    "\000\006\007\uff6c\033\uff6c\001\002\000\006\007\uff6b\033" +
    "\uff6b\001\002\000\006\007\uff6d\033\uff6d\001\002\000\020" +
    "\004\000\007\000\017\000\020\000\030\000\031\000\033" +
    "\000\001\002\000\040\004\uff65\007\uff65\011\uff65\012\uff65" +
    "\013\uff65\014\uff65\015\uff65\016\uff65\024\uff65\025\uff65\026" +
    "\uff65\027\uff65\030\uff65\031\uff65\033\uff65\001\002\000\010" +
    "\007\uff6a\032\173\033\uff6a\001\002\000\040\004\uff66\007" +
    "\uff66\011\uff66\012\uff66\013\uff66\014\uff66\015\uff66\016\uff66" +
    "\024\uff66\025\uff66\026\uff66\027\uff66\030\uff66\031\uff66\033" +
    "\uff66\001\002\000\016\036\205\037\176\061\177\062\204" +
    "\063\202\065\207\001\002\000\004\033\uff67\001\002\000" +
    "\004\033\214\001\002\000\006\004\uffe2\033\uffe2\001\002" +
    "\000\050\022\uffdf\023\uffdf\035\uffdf\040\uffdf\041\uffdf\042" +
    "\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\051\uffdf" +
    "\052\uffdf\053\uffdf\055\uffdf\056\uffdf\065\uffdf\066\uffdf\067" +
    "\uffdf\001\002\000\016\022\ufffd\023\ufffd\032\ufffd\061\ufffd" +
    "\062\ufffd\065\ufffd\001\002\000\016\022\102\023\101\032" +
    "\167\061\164\062\170\065\172\001\002\000\016\022\ufffa" +
    "\023\ufffa\032\ufffa\061\ufffa\062\ufffa\065\ufffa\001\002\000" +
    "\016\022\ufffc\023\ufffc\032\ufffc\061\ufffc\062\ufffc\065\ufffc" +
    "\001\002\000\016\022\ufffe\023\ufffe\032\ufffe\061\ufffe\062" +
    "\ufffe\065\ufffe\001\002\000\016\022\ufff9\023\ufff9\032\ufff9" +
    "\061\ufff9\062\ufff9\065\ufff9\001\002\000\016\022\ufffb\023" +
    "\ufffb\032\ufffb\061\ufffb\062\ufffb\065\ufffb\001\002\000\006" +
    "\004\uffe3\033\uffe3\001\002\000\004\032\227\001\002\000" +
    "\012\021\247\032\250\036\205\037\176\001\002\000\004" +
    "\034\231\001\002\000\046\022\102\023\101\040\131\041" +
    "\025\042\012\043\031\044\010\045\132\046\073\047\uff8d" +
    "\051\107\052\110\053\067\055\075\056\072\065\113\066" +
    "\024\067\013\001\002\000\004\035\233\001\002\000\052" +
    "\022\uff8c\023\uff8c\035\uff8c\040\uff8c\041\uff8c\042\uff8c\043" +
    "\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050\234\051\uff8c" +
    "\052\uff8c\053\uff8c\055\uff8c\056\uff8c\065\uff8c\066\uff8c\067" +
    "\uff8c\001\002\000\004\034\240\001\002\000\050\022\uff8e" +
    "\023\uff8e\035\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044" +
    "\uff8e\045\uff8e\046\uff8e\047\uff8e\051\uff8e\052\uff8e\053\uff8e" +
    "\055\uff8e\056\uff8e\065\uff8e\066\uff8e\067\uff8e\001\002\000" +
    "\050\022\uff8c\023\uff8c\035\uff8c\040\uff8c\041\uff8c\042\uff8c" +
    "\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\051\uff8c\052" +
    "\uff8c\053\uff8c\055\uff8c\056\uff8c\065\uff8c\066\uff8c\067\uff8c" +
    "\001\002\000\050\022\uff8f\023\uff8f\035\uff8f\040\uff8f\041" +
    "\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f" +
    "\051\uff8f\052\uff8f\053\uff8f\055\uff8f\056\uff8f\065\uff8f\066" +
    "\uff8f\067\uff8f\001\002\000\046\022\102\023\101\040\131" +
    "\041\025\042\012\043\031\044\010\045\132\046\073\047" +
    "\uff8d\051\107\052\110\053\067\055\075\056\072\065\113" +
    "\066\024\067\013\001\002\000\004\035\242\001\002\000" +
    "\050\022\uff90\023\uff90\035\uff90\040\uff90\041\uff90\042\uff90" +
    "\043\uff90\044\uff90\045\uff90\046\uff90\047\uff90\051\uff90\052" +
    "\uff90\053\uff90\055\uff90\056\uff90\065\uff90\066\uff90\067\uff90" +
    "\001\002\000\010\017\254\020\256\033\uffa1\001\002\000" +
    "\010\017\uffa5\020\uffa5\033\uffa5\001\002\000\004\033\275" +
    "\001\002\000\010\017\uffa7\020\uffa7\033\uffa7\001\002\000" +
    "\010\032\261\036\205\037\176\001\002\000\024\021\247" +
    "\022\102\023\101\032\250\036\205\037\176\061\164\062" +
    "\170\065\172\001\002\000\004\033\273\001\002\000\020" +
    "\024\263\025\270\026\264\027\266\030\265\031\262\033" +
    "\uffa9\001\002\000\010\017\254\020\256\033\257\001\002" +
    "\000\010\032\ufff8\036\ufff8\037\ufff8\001\002\000\010\032" +
    "\261\036\205\037\176\001\002\000\010\032\ufff7\036\ufff7" +
    "\037\ufff7\001\002\000\010\017\uffa2\020\uffa2\033\uffa2\001" +
    "\002\000\010\017\uffa3\020\uffa3\033\uffa3\001\002\000\014" +
    "\022\102\023\101\061\164\062\170\065\172\001\002\000" +
    "\020\022\uffb2\023\uffb2\036\uffb2\037\uffb2\061\uffb2\062\uffb2" +
    "\065\uffb2\001\002\000\014\022\uffae\023\uffae\061\uffae\062" +
    "\uffae\065\uffae\001\002\000\014\022\uffac\023\uffac\061\uffac" +
    "\062\uffac\065\uffac\001\002\000\020\022\uffb3\023\uffb3\036" +
    "\uffb3\037\uffb3\061\uffb3\062\uffb3\065\uffb3\001\002\000\014" +
    "\022\uffab\023\uffab\061\uffab\062\uffab\065\uffab\001\002\000" +
    "\014\022\102\023\101\061\164\062\170\065\172\001\002" +
    "\000\014\022\uffad\023\uffad\061\uffad\062\uffad\065\uffad\001" +
    "\002\000\014\022\uffaa\023\uffaa\061\uffaa\062\uffaa\065\uffaa" +
    "\001\002\000\004\033\uffa8\001\002\000\010\017\uffa6\020" +
    "\uffa6\033\uffa6\001\002\000\010\017\uffa4\020\uffa4\033\uffa4" +
    "\001\002\000\004\034\uffa0\001\002\000\004\035\uff93\001" +
    "\002\000\016\022\102\023\101\032\167\061\164\062\170" +
    "\065\172\001\002\000\004\004\301\001\002\000\050\022" +
    "\uffe1\023\uffe1\035\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1" +
    "\044\uffe1\045\uffe1\046\uffe1\047\uffe1\051\uffe1\052\uffe1\053" +
    "\uffe1\055\uffe1\056\uffe1\065\uffe1\066\uffe1\067\uffe1\001\002" +
    "\000\050\022\uffea\023\uffea\035\uffea\040\uffea\041\uffea\042" +
    "\uffea\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea\051\uffea" +
    "\052\uffea\053\uffea\055\uffea\056\uffea\065\uffea\066\uffea\067" +
    "\uffea\001\002\000\050\022\uff64\023\uff64\035\uff64\040\uff64" +
    "\041\uff64\042\uff64\043\uff64\044\uff64\045\uff64\046\uff64\047" +
    "\uff64\051\uff64\052\uff64\053\uff64\055\uff64\056\uff64\065\uff64" +
    "\066\uff64\067\uff64\001\002\000\004\034\305\001\002\000" +
    "\046\022\102\023\101\040\131\041\025\042\012\043\031" +
    "\044\010\045\132\046\073\047\uff8d\051\107\052\110\053" +
    "\067\055\075\056\072\065\113\066\024\067\013\001\002" +
    "\000\004\035\307\001\002\000\052\022\uff84\023\uff84\035" +
    "\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84" +
    "\046\uff84\047\uff84\050\234\051\uff84\052\uff84\053\uff84\055" +
    "\uff84\056\uff84\065\uff84\066\uff84\067\uff84\001\002\000\050" +
    "\022\uff83\023\uff83\035\uff83\040\uff83\041\uff83\042\uff83\043" +
    "\uff83\044\uff83\045\uff83\046\uff83\047\uff83\051\uff83\052\uff83" +
    "\053\uff83\055\uff83\056\uff83\065\uff83\066\uff83\067\uff83\001" +
    "\002\000\004\065\312\001\002\000\004\033\313\001\002" +
    "\000\004\034\314\001\002\000\004\057\315\001\002\000" +
    "\004\005\327\001\002\000\004\060\322\001\002\000\006" +
    "\057\315\060\uff7d\001\002\000\004\060\uff7c\001\002\000" +
    "\004\035\326\001\002\000\004\006\323\001\002\000\046" +
    "\022\102\023\101\040\131\041\025\042\012\043\031\044" +
    "\010\045\132\046\073\047\uff8d\051\107\052\110\053\067" +
    "\055\075\056\072\065\113\066\024\067\013\001\002\000" +
    "\002\001\002\000\004\035\uff7b\001\002\000\050\022\uff7a" +
    "\023\uff7a\035\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a\044" +
    "\uff7a\045\uff7a\046\uff7a\047\uff7a\051\uff7a\052\uff7a\053\uff7a" +
    "\055\uff7a\056\uff7a\065\uff7a\066\uff7a\067\uff7a\001\002\000" +
    "\012\061\331\062\332\063\334\064\333\001\002\000\004" +
    "\006\335\001\002\000\004\006\uff82\001\002\000\004\006" +
    "\uff81\001\002\000\004\006\uff7f\001\002\000\004\006\uff80" +
    "\001\002\000\046\022\102\023\101\040\131\041\025\042" +
    "\012\043\031\044\010\045\132\046\073\047\uff8d\051\107" +
    "\052\110\053\067\055\075\056\072\065\113\066\024\067" +
    "\013\001\002\000\002\001\002\000\006\057\uff7e\060\uff7e" +
    "\001\002\000\050\022\uff96\023\uff96\035\uff96\040\uff96\041" +
    "\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96" +
    "\051\uff96\052\uff96\053\uff96\055\uff96\056\uff96\065\uff96\066" +
    "\uff96\067\uff96\001\002\000\012\061\342\062\343\064\345" +
    "\065\344\001\002\000\004\033\354\001\002\000\004\033" +
    "\352\001\002\000\004\033\350\001\002\000\004\033\346" +
    "\001\002\000\004\004\347\001\002\000\050\022\uffb9\023" +
    "\uffb9\035\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9" +
    "\045\uffb9\046\uffb9\047\uffb9\051\uffb9\052\uffb9\053\uffb9\055" +
    "\uffb9\056\uffb9\065\uffb9\066\uffb9\067\uffb9\001\002\000\004" +
    "\004\351\001\002\000\050\022\uffb8\023\uffb8\035\uffb8\040" +
    "\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8" +
    "\047\uffb8\051\uffb8\052\uffb8\053\uffb8\055\uffb8\056\uffb8\065" +
    "\uffb8\066\uffb8\067\uffb8\001\002\000\004\004\353\001\002" +
    "\000\050\022\uffba\023\uffba\035\uffba\040\uffba\041\uffba\042" +
    "\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\051\uffba" +
    "\052\uffba\053\uffba\055\uffba\056\uffba\065\uffba\066\uffba\067" +
    "\uffba\001\002\000\004\004\355\001\002\000\050\022\uffbb" +
    "\023\uffbb\035\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044" +
    "\uffbb\045\uffbb\046\uffbb\047\uffbb\051\uffbb\052\uffbb\053\uffbb" +
    "\055\uffbb\056\uffbb\065\uffbb\066\uffbb\067\uffbb\001\002\000" +
    "\014\036\205\037\176\061\357\062\360\065\362\001\002" +
    "\000\004\004\ufff2\001\002\000\004\004\ufff1\001\002\000" +
    "\004\004\uffee\001\002\000\006\004\uffef\032\173\001\002" +
    "\000\004\004\ufff0\001\002\000\004\004\365\001\002\000" +
    "\050\022\uffed\023\uffed\035\uffed\040\uffed\041\uffed\042\uffed" +
    "\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed\051\uffed\052" +
    "\uffed\053\uffed\055\uffed\056\uffed\065\uffed\066\uffed\067\uffed" +
    "\001\002\000\004\061\367\001\002\000\006\004\u0100\033" +
    "\uff8b\001\002\000\004\033\uff86\001\002\000\004\033\uff88" +
    "\001\002\000\004\033\uff87\001\002\000\004\033\374\001" +
    "\002\000\004\034\375\001\002\000\046\022\102\023\101" +
    "\040\131\041\025\042\012\043\031\044\010\045\132\046" +
    "\073\047\uff8d\051\107\052\110\053\067\055\075\056\072" +
    "\065\113\066\024\067\013\001\002\000\004\035\377\001" +
    "\002\000\050\022\uff85\023\uff85\035\uff85\040\uff85\041\uff85" +
    "\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85\051" +
    "\uff85\052\uff85\053\uff85\055\uff85\056\uff85\065\uff85\066\uff85" +
    "\067\uff85\001\002\000\004\061\u0101\001\002\000\006\004" +
    "\u0102\033\uff8a\001\002\000\004\061\u0103\001\002\000\004" +
    "\033\uff89\001\002\000\004\002\uff54\001\002\000\004\065" +
    "\u0106\001\002\000\006\004\u0107\010\u0108\001\002\000\050" +
    "\022\uffdb\023\uffdb\035\uffdb\040\uffdb\041\uffdb\042\uffdb\043" +
    "\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\051\uffdb\052\uffdb" +
    "\053\uffdb\055\uffdb\056\uffdb\065\uffdb\066\uffdb\067\uffdb\001" +
    "\002\000\016\022\102\023\101\032\167\061\164\062\170" +
    "\065\172\001\002\000\004\004\u010a\001\002\000\050\022" +
    "\uffda\023\uffda\035\uffda\040\uffda\041\uffda\042\uffda\043\uffda" +
    "\044\uffda\045\uffda\046\uffda\047\uffda\051\uffda\052\uffda\053" +
    "\uffda\055\uffda\056\uffda\065\uffda\066\uffda\067\uffda\001\002" +
    "\000\006\054\u010c\065\160\001\002\000\004\032\uff6f\001" +
    "\002\000\004\005\u0110\001\002\000\022\002\uff53\040\131" +
    "\041\025\042\012\043\031\044\010\066\024\067\013\001" +
    "\002\000\004\002\uff52\001\002\000\004\054\u010c\001\002" +
    "\000\004\065\u0112\001\002\000\006\004\u0113\010\u0114\001" +
    "\002\000\050\022\uffd3\023\uffd3\035\uffd3\040\uffd3\041\uffd3" +
    "\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\051" +
    "\uffd3\052\uffd3\053\uffd3\055\uffd3\056\uffd3\065\uffd3\066\uffd3" +
    "\067\uffd3\001\002\000\014\021\u011a\032\u0115\036\205\037" +
    "\176\065\u011b\001\002\000\014\022\102\023\101\061\164" +
    "\062\170\065\172\001\002\000\010\004\uffd7\030\uffb1\031" +
    "\uffb1\001\002\000\006\030\265\031\262\001\002\000\004" +
    "\004\u011e\001\002\000\004\004\uffd4\001\002\000\012\032" +
    "\u0115\036\205\037\176\065\u011b\001\002\000\010\004\uffd6" +
    "\030\uffb0\031\uffb0\001\002\000\004\004\u011d\001\002\000" +
    "\050\022\uffd1\023\uffd1\035\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\051\uffd1\052" +
    "\uffd1\053\uffd1\055\uffd1\056\uffd1\065\uffd1\066\uffd1\067\uffd1" +
    "\001\002\000\050\022\uffd2\023\uffd2\035\uffd2\040\uffd2\041" +
    "\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2" +
    "\051\uffd2\052\uffd2\053\uffd2\055\uffd2\056\uffd2\065\uffd2\066" +
    "\uffd2\067\uffd2\001\002\000\010\036\205\037\176\065\u0120" +
    "\001\002\000\004\004\uffb0\001\002\000\004\004\uffaf\001" +
    "\002\000\004\004\uffb1\001\002\000\004\033\u0124\001\002" +
    "\000\004\004\uffd5\001\002\000\004\065\u0126\001\002\000" +
    "\006\004\u0127\010\u0128\001\002\000\050\022\uffc6\023\uffc6" +
    "\035\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045" +
    "\uffc6\046\uffc6\047\uffc6\051\uffc6\052\uffc6\053\uffc6\055\uffc6" +
    "\056\uffc6\065\uffc6\066\uffc6\067\uffc6\001\002\000\006\064" +
    "\u012a\065\u0129\001\002\000\004\004\uffc7\001\002\000\004" +
    "\004\uffc8\001\002\000\004\004\u012c\001\002\000\050\022" +
    "\uffc5\023\uffc5\035\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5" +
    "\044\uffc5\045\uffc5\046\uffc5\047\uffc5\051\uffc5\052\uffc5\053" +
    "\uffc5\055\uffc5\056\uffc5\065\uffc5\066\uffc5\067\uffc5\001\002" +
    "\000\006\002\uff56\040\uff56\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012b\000\050\007\014\020\003\021\032\023\031\024" +
    "\015\032\016\033\021\036\033\037\005\042\027\043\010" +
    "\106\025\107\017\115\022\116\006\117\013\120\004\121" +
    "\034\123\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\007\014\020\003\021\032\023" +
    "\031\024\015\032\016\033\021\036\033\037\005\042\027" +
    "\043\010\107\017\115\022\116\006\117\u012c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\106\u010d\123\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\007\014\020\003" +
    "\021\032\023\031\024\015\032\016\033\021\036\033\037" +
    "\005\042\027\043\010\107\017\115\022\116\006\117\u0103" +
    "\001\001\000\004\105\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\027\057" +
    "\104\056\110\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\027\064\104\056\110\053\001\001\000\002\001\001\000" +
    "\120\005\147\007\104\011\117\013\111\014\105\017\124" +
    "\020\140\021\076\022\132\023\145\024\075\025\133\031" +
    "\123\032\120\033\077\034\126\036\102\037\137\040\113" +
    "\042\125\043\143\044\136\045\135\046\121\047\067\050" +
    "\115\051\070\052\127\053\146\063\103\064\114\065\122" +
    "\066\142\070\116\075\144\076\134\103\073\113\110\114" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\062\303\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\120\005\147\007\104\011\117\013\111\014" +
    "\105\017\124\020\140\021\076\022\132\023\145\024\075" +
    "\025\133\031\123\032\120\033\077\034\126\036\102\037" +
    "\137\040\113\042\125\043\143\044\136\045\135\046\121" +
    "\047\067\050\115\051\070\052\127\053\146\063\103\064" +
    "\114\065\122\066\275\070\116\075\144\076\134\103\073" +
    "\113\110\114\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\147" +
    "\013\170\015\164\016\165\113\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\216\001\001\000\002" +
    "\001\001\000\014\005\147\013\170\015\164\016\212\113" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\173\001\001\000\012\002\202\111\177\112\200\113" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\202\111\177\112\211\113\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\147" +
    "\013\170\015\164\016\224\113\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\062\227\001" +
    "\001\000\012\002\245\060\243\061\242\122\244\001\001" +
    "\000\002\001\001\000\120\005\147\007\104\011\117\013" +
    "\111\014\105\017\124\020\140\021\076\022\132\023\145" +
    "\024\075\025\133\031\123\032\120\033\077\034\126\036" +
    "\102\037\137\040\113\042\125\043\143\044\136\045\135" +
    "\046\121\047\067\050\115\051\070\052\127\053\146\063" +
    "\103\064\114\065\122\066\231\070\116\075\144\076\134" +
    "\103\073\113\110\114\141\001\001\000\002\001\001\000" +
    "\006\030\234\067\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\236\001\001\000\002\001\001\000" +
    "\120\005\147\007\104\011\117\013\111\014\105\017\124" +
    "\020\140\021\076\022\132\023\145\024\075\025\133\031" +
    "\123\032\120\033\077\034\126\036\102\037\137\040\113" +
    "\042\125\043\143\044\136\045\135\046\121\047\067\050" +
    "\115\051\070\052\127\053\146\063\103\064\114\065\122" +
    "\066\240\070\116\075\144\076\134\103\073\113\110\114" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\254\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\245\060\273\001\001\000\022" +
    "\002\245\005\147\013\170\015\251\057\250\060\243\061" +
    "\252\113\162\001\001\000\002\001\001\000\006\006\266" +
    "\054\270\001\001\000\004\004\254\001\001\000\002\001" +
    "\001\000\006\002\245\060\257\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\005\147\013" +
    "\170\015\251\057\250\113\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\147\013\170\015\271\113\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\147\013\170\015\164\016" +
    "\277\113\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\120\005\147\007\104\011\117\013\111\014\105\017\124" +
    "\020\140\021\076\022\132\023\145\024\075\025\133\031" +
    "\123\032\120\033\077\034\126\036\102\037\137\040\113" +
    "\042\125\043\143\044\136\045\135\046\121\047\067\050" +
    "\115\051\070\052\127\053\146\063\103\064\114\065\122" +
    "\066\305\070\116\075\144\076\134\103\073\113\110\114" +
    "\141\001\001\000\002\001\001\000\004\067\307\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\100\316\101\315\001\001\000\002" +
    "\001\001\000\004\102\320\001\001\000\006\100\316\101" +
    "\317\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\120\005\147\007\104\011\117\013\111\014" +
    "\105\017\124\020\140\021\076\022\132\023\145\024\075" +
    "\025\133\031\123\032\120\033\077\034\126\036\102\037" +
    "\137\040\113\042\125\043\143\044\136\045\135\046\121" +
    "\047\067\050\115\051\070\052\127\053\146\063\103\064" +
    "\114\065\122\066\323\070\116\075\144\076\134\103\073" +
    "\113\110\114\141\001\001\000\004\012\324\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\077\327\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\120\005\147\007\104" +
    "\011\117\013\111\014\105\017\124\020\140\021\076\022" +
    "\132\023\145\024\075\025\133\031\123\032\120\033\077" +
    "\034\126\036\102\037\137\040\113\042\125\043\143\044" +
    "\136\045\135\046\121\047\067\050\115\051\070\052\127" +
    "\053\146\063\103\064\114\065\122\066\335\070\116\075" +
    "\144\076\134\103\073\113\110\114\141\001\001\000\004" +
    "\012\336\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\362\010\363\113\360\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\071\370\072\371\073\367\074\372\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\120\005\147\007" +
    "\104\011\117\013\111\014\105\017\124\020\140\021\076" +
    "\022\132\023\145\024\075\025\133\031\123\032\120\033" +
    "\077\034\126\036\102\037\137\040\113\042\125\043\143" +
    "\044\136\045\135\046\121\047\067\050\115\051\070\052" +
    "\127\053\146\063\103\064\114\065\122\066\375\070\116" +
    "\075\144\076\134\103\073\113\110\114\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\147\013\170\015\164\016\u0108\113\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\007\014\020" +
    "\003\021\032\023\031\024\015\032\016\033\021\036\033" +
    "\037\005\042\027\043\010\107\017\115\022\116\006\117" +
    "\u010e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\u0115\026\u0117\055\u0116\056\u0118\001\001\000\014\005\147" +
    "\013\170\015\251\057\u0122\113\162\001\001\000\002\001" +
    "\001\000\004\054\u011e\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\u0115\026\u011b\055\u0116\056\u0118\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\u0121\055\u0120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\u012a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

    // Método que se invoca cuando ocurre un error de sintaxis
    public void syntax_error(Symbol s){
        if (s == null) {
            System.err.println("El objeto Symbol proporcionado es nulo.");
            return;
        }
        this.s = s;
        System.err.println("Error de sintaxis en la línea " + s.left + ", columna " + s.right + ": se encontró " + s.value);
    }

    // Devuelve el símbolo actual
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntax$actions {



    HashMap<String, ArrayList<String>> listaTablasSimbolos = new HashMap<String, ArrayList<String>>();
    String currentHash;

    StringBuffer cod3D = new StringBuffer();
    int currentTemp = 1;

    public void imprimirTablaSimbolos(){
        for (String key : listaTablasSimbolos.keySet()){
            System.out.println("Tabla de simbolo: "+ key);
            System.out.println("Valores: ");
            for (String item : listaTablasSimbolos.get(key)){
                 System.out.println(item);
            }
            System.out.println("");
        }
    }

    public void imprimirCod3D() {
        System.out.println(cod3D.toString());
    }

    public String obtenerCod3D() {
        return cod3D.toString();
    }

    public String determinarTipo(String valor) {
        return null;
    }

  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // INICIO ::= PROGRAMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",79, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // PROGRAMA ::= VALORESPROGRAMA FUNCMAIN VALORESPROGRAMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",78, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // PROGRAMA ::= VALORESPROGRAMA FUNCMAIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",78, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // PROGRAMA ::= FUNCMAIN VALORESPROGRAMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",78, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // PROGRAMA ::= FUNCMAIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",78, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // VALORESPROGRAMA ::= VALORPROGRAMA VALORESPROGRAMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESPROGRAMA",77, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // VALORPROGRAMA ::= COMENTARIOS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORPROGRAMA",76, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // VALORPROGRAMA ::= GLOBALVAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORPROGRAMA",76, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // VALORPROGRAMA ::= CREAFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORPROGRAMA",76, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // GLOBALVAR ::= CREAASIGVARSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",75, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // GLOBALVAR ::= CREAVARSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",75, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // GLOBALVAR ::= CREAASIGVARCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",75, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // GLOBALVAR ::= CREAVARCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",75, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // GLOBALVAR ::= CREAASIGVARBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",75, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // GLOBALVAR ::= CREAVARBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",75, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // GLOBALVAR ::= CREAASIGVARFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",75, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // GLOBALVAR ::= CREAVARFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",75, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // GLOBALVAR ::= CREAASIGVARINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",75, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // GLOBALVAR ::= CREAVARINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",75, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // SENTLLAMARFUNC ::= LLAMARFUNC ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTLLAMARFUNC",74, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // LLAMARFUNC ::= IDENTIFICADOR SIGABREPARENT SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LLAMARFUNC",73, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // LLAMARFUNC ::= IDENTIFICADOR SIGABREPARENT PARAMLLAMAFUNC SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LLAMARFUNC",73, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // PARAMLLAMAFUNC ::= PARAMLLAMARFUNC COMA PARAMLLAMAFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMAFUNC",72, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // PARAMLLAMAFUNC ::= PARAMLLAMARFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMAFUNC",72, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // PARAMLLAMARFUNC ::= LLAMARFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMARFUNC",71, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // PARAMLLAMARFUNC ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMARFUNC",71, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // PARAMLLAMARFUNC ::= LITBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMARFUNC",71, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // PARAMLLAMARFUNC ::= LITCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMARFUNC",71, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // PARAMLLAMARFUNC ::= LITFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMARFUNC",71, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // PARAMLLAMARFUNC ::= LITINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMARFUNC",71, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // INIFUNMAIN ::= TIPOINT SEPARADOR RESERVMAIN 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INIFUNMAIN",81, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // FUNCMAIN ::= INIFUNMAIN PARAMFUNCIONES SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCMAIN",68, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // PARAMFUNCIONES ::= SIGABREPARENT SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCIONES",67, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // PARAMFUNCIONES ::= SIGABREPARENT PARAMETROFUNCION SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCIONES",67, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // PARAMETROFUNCION ::= PARMFUNC COMA PARAMETROFUNCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETROFUNCION",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // PARAMETROFUNCION ::= PARMFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETROFUNCION",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // PARMFUNC ::= TIPOSPARAM SEPARADOR IDENTIFICADOR 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARMFUNC",70, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // TIPOSPARAM ::= TIPOCHAR 
            {
              Object RESULT =null;
		 RESULT = "char";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPOSPARAM",66, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // TIPOSPARAM ::= TIPOBOOL 
            {
              Object RESULT =null;
		 RESULT = "boole";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPOSPARAM",66, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // TIPOSPARAM ::= TIPOFLOAT 
            {
              Object RESULT =null;
		 RESULT = "float";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPOSPARAM",66, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // TIPOSPARAM ::= TIPOINT 
            {
              Object RESULT =null;
		 RESULT = "int";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPOSPARAM",66, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ESTRUCTSWITCH ::= RESERVSWITCH SIGABREPARENT IDENTIFICADOR SIGCIERRAPARENT SIGABRELLAVES CASES DEFAULT SIGCIERRALLAVES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTSWITCH",65, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // DEFAULT ::= RESERVDEFAULT DOSPUNTOS BLOQUECODIGO SENTBREAK 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DEFAULT",64, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CASES ::= CASE CASES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASES",63, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CASES ::= CASE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASES",63, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CASE ::= RESERVCASE SEPARADOR LITERAL DOSPUNTOS BLOQUECODIGO SENTBREAK 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASE",62, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // LITERAL ::= LITSTRING 
            {
              Object RESULT =null;
		int litstringleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litstringright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litstring = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litstring+": "+"string"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITERAL",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // LITERAL ::= LITCHAR 
            {
              Object RESULT =null;
		int litcharleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litcharright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litchar = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litchar+": "+"char"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITERAL",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // LITERAL ::= LITFLOAT 
            {
              Object RESULT =null;
		int litfloatleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litfloatright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litfloat = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litfloat.toString()+": "+"float"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITERAL",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // LITERAL ::= LITINT 
            {
              Object RESULT =null;
		int litIntleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litIntright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litInt = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litInt.toString()+": "+"int"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITERAL",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ESTRUCTWHILE ::= RESERVWHILE CONDICIONES SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES ESTRUCTELSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTWHILE",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ESTRUCTWHILE ::= RESERVWHILE CONDICIONES SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTWHILE",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ESTRUCTFORRANGE ::= RESERVFORRANGE SIGABREPARENT PARAMFORRANGE SIGCIERRAPARENT SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTFORRANGE",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // PARAMFORRANGE ::= PARAMFORRANGETRES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFORRANGE",58, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // PARAMFORRANGE ::= PARAMFORRANGEDOS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFORRANGE",58, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PARAMFORRANGE ::= PARAMFORRANGEUNO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFORRANGE",58, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PARAMFORRANGETRES ::= LITINT ENDLINE LITINT ENDLINE LITINT 
            {
              Object RESULT =null;
		int parm1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int parm1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object parm1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int parm2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int parm2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object parm2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int parm3left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int parm3right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object parm3 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = parm1.toString()+": "+"paramInicia" + parm2.toString()+": "+"paramIncremento" + parm3.toString()+": "+"paramFinaliza"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFORRANGETRES",57, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PARAMFORRANGEDOS ::= LITINT ENDLINE LITINT 
            {
              Object RESULT =null;
		int parm1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int parm1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object parm1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int parm2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int parm2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object parm2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = parm1.toString()+": "+"paramInicia" + parm2.toString()+": "+"paramFinaliza"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFORRANGEDOS",56, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PARAMFORRANGEUNO ::= LITINT 
            {
              Object RESULT =null;
		int litIntleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litIntright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litInt = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litInt.toString()+": "+"int"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFORRANGEUNO",55, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // FINIF ::= 
            {
              Object RESULT =null;
		    /*codIn3D.append("\n_end_if_"+(contador_if)+":");*/ 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FINIF",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // INICIOIF ::= 
            {
              Object RESULT =null;
		  String temp = "t" + (currentTemp++);                    
                            cod3D.append("\n" + temp + "_start:");
                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIOIF",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ESTRUCTIF ::= INICIOIF RESERVIF CONDICIONES SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES FINIF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTIF",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ESTRUCTIF ::= INICIOIF RESERVIF CONDICIONES SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES ESTRUCTELSE FINIF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTIF",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ESTRUCTELSE ::= RESERVELSE SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTELSE",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // BLOQUECODIGO ::= COMENTARIOS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUECODIGO",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // BLOQUECODIGO ::= VALORESBLOQUECODIGO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUECODIGO",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // BLOQUECODIGO ::= VALORESBLOQUECODIGO BLOQUECODIGO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUECODIGO",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VALORESBLOQUECODIGO ::= SENTLLAMARFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBLOQUECODIGO",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VALORESBLOQUECODIGO ::= SENTRETURN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBLOQUECODIGO",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VALORESBLOQUECODIGO ::= RESERVBREAK ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBLOQUECODIGO",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VALORESBLOQUECODIGO ::= ESTRUCTCONTROL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBLOQUECODIGO",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VALORESBLOQUECODIGO ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBLOQUECODIGO",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ESTRUCTCONTROL ::= ESTRUCTWHILE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTCONTROL",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ESTRUCTCONTROL ::= ESTRUCTFORRANGE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTCONTROL",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ESTRUCTCONTROL ::= ESTRUCTSWITCH 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTCONTROL",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ESTRUCTCONTROL ::= ESTRUCTIF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTCONTROL",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SENTENCIA ::= FUNCESCRIBIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIA ::= FUNCLEER 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENTENCIA ::= VARIABLES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CONDICIONES ::= SIGABREPARENT VALORESCONDI SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICIONES",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VALORESCONDI ::= OPERACIONLOGICAS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESCONDI",80, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OPERACIONLOGICAS ::= SIGABREPARENT OPERACIONLOGICAS SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONLOGICAS",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OPERACIONLOGICAS ::= OPERACIONLOGICAS OPERADORESLOGICOS OPERANDOSLOGICOS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONLOGICAS",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPERACIONLOGICAS ::= SIGNEGACION OPERANDOSLOGICOS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONLOGICAS",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OPERACIONLOGICAS ::= OPERANDOSLOGICOS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONLOGICAS",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPERANDOSLOGICOS ::= SIGABREPARENT OPERACIONRELAARIT SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERANDOSLOGICOS",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPERANDOSLOGICOS ::= LITBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERANDOSLOGICOS",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERACIONRELAARIT ::= VALORESARIT OPERADORESRELA VALORESARIT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONRELAARIT",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPERACIONRELAARIT ::= VALORESARIT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONRELAARIT",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPERADORESRELA ::= OPERADORESBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESRELA",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPERADORESRELA ::= SIGMAYORIGUAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESRELA",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPERADORESRELA ::= SIGMAYOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESRELA",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPERADORESRELA ::= SIGMENORIGUAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESRELA",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPERADORESRELA ::= SIGMENOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESRELA",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPERACIONBOOL ::= OPERANDOBOOLEANO OPERADORESBOOL OPERANDOBOOLEANO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONBOOL",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERANDOBOOLEANO ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERANDOBOOLEANO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERANDOBOOLEANO ::= LITBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERANDOBOOLEANO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERADORESBOOL ::= SIGDIFERENTE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESBOOL",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERADORESBOOL ::= IGUAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESBOOL",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FUNCESCRIBIR ::= FUNCESCRIBIRID 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIR",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FUNCESCRIBIR ::= FUNCESCRIBIRSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIR",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FUNCESCRIBIR ::= FUNCESCRIBIRFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIR",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FUNCESCRIBIR ::= FUNCESCRIBIRINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIR",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FUNCESCRIBIRID ::= RESERVESCRIBIR SIGABREPARENT IDENTIFICADOR SIGCIERRAPARENT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIRID",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FUNCESCRIBIRSTRING ::= RESERVESCRIBIR SIGABREPARENT LITSTRING SIGCIERRAPARENT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIRSTRING",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FUNCESCRIBIRFLOAT ::= RESERVESCRIBIR SIGABREPARENT LITFLOAT SIGCIERRAPARENT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIRFLOAT",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FUNCESCRIBIRINT ::= RESERVESCRIBIR SIGABREPARENT LITINT SIGCIERRAPARENT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIRINT",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FUNCLEER ::= RESERVLEER SIGABREPARENT IDENTIFICADOR SIGCIERRAPARENT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCLEER",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VARIABLES ::= OPERACIONUNARIA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLES",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VARIABLES ::= VARIABLESSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLES",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VARIABLES ::= VARIABLESCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLES",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VARIABLES ::= VARIABLESBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLES",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VARIABLES ::= VARIABLESFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLES",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VARIABLES ::= VARIABLESINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLES",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VARIABLESSTRING ::= CREAASIGVARSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESSTRING",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VARIABLESSTRING ::= CREAVARSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESSTRING",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CREAASIGVARSTRING ::= TIPOSTRING SEPARADOR IDENTIFICADOR SIGNOIGUAL VALORESSTRING ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAASIGVARSTRING",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CREAVARSTRING ::= TIPOSTRING SEPARADOR IDENTIFICADOR ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAVARSTRING",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VALORESSTRING ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESSTRING",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VALORESSTRING ::= LITSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESSTRING",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VARIABLESCHAR ::= CREAASIGVARCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESCHAR",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VARIABLESCHAR ::= CREAVARCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESCHAR",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CREAASIGVARCHAR ::= TIPOCHAR SEPARADOR IDENTIFICADOR SIGNOIGUAL VALORESCHAR ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAASIGVARCHAR",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CREAVARCHAR ::= TIPOCHAR SEPARADOR IDENTIFICADOR ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAVARCHAR",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VALORESCHAR ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESCHAR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VALORESCHAR ::= LITCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESCHAR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VARIABLESBOOL ::= CREAASIGVARBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESBOOL",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VARIABLESBOOL ::= CREAVARBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESBOOL",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CREAASIGVARBOOL ::= TIPOBOOL SEPARADOR IDENTIFICADOR SIGNOIGUAL SIGNEGACION VALORESBOOL ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAASIGVARBOOL",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CREAASIGVARBOOL ::= TIPOBOOL SEPARADOR IDENTIFICADOR SIGNOIGUAL VALORESBOOL ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAASIGVARBOOL",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CREAVARBOOL ::= TIPOBOOL SEPARADOR IDENTIFICADOR ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAVARBOOL",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VALORESBOOL ::= OPERACIONBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBOOL",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VALORESBOOL ::= SIGABREPARENT OPERACIONRELAARIT SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBOOL",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VALORESBOOL ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBOOL",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VALORESBOOL ::= LITBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBOOL",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VARIABLESFLOAT ::= CREAASIGVARFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESFLOAT",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VARIABLESFLOAT ::= CREAVARFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESFLOAT",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CREAASIGVARFLOAT ::= TIPOFLOAT SEPARADOR IDENTIFICADOR SIGNOIGUAL OPERACIONARIT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAASIGVARFLOAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CREAVARFLOAT ::= TIPOFLOAT SEPARADOR IDENTIFICADOR ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAVARFLOAT",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VARIABLESINT ::= CREAASIGVARINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESINT",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VARIABLESINT ::= CREAVARINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESINT",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VARIABLESINT ::= ASIGNVAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESINT",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CREAASIGVARINT ::= TIPOINT SEPARADOR IDENTIFICADOR SIGNOIGUAL OPERACIONARIT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAASIGVARINT",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CREAVARINT ::= TIPOINT SEPARADOR IDENTIFICADOR ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAVARINT",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASIGNVAR ::= IDENTIFICADOR SIGNOIGUAL OPERACIONARIT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNVAR",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERACIONARIT ::= SIGABREPARENT OPERACIONARIT SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONARIT",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERACIONARIT ::= VALORESARIT OPERADORESARITME OPERACIONARIT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONARIT",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERACIONARIT ::= VALORESARIT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONARIT",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VALORESARIT ::= OPERAUNARIA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESARIT",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VALORESARIT ::= LLAMARFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESARIT",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VALORESARIT ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = id; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESARIT",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VALORESARIT ::= LITFLOAT 
            {
              Object RESULT =null;
		int litfloatleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litfloatright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litfloat = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litfloat.toString()+": "+"float"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESARIT",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VALORESARIT ::= LITINT 
            {
              Object RESULT =null;
		int litIntleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litIntright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litInt = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litInt.toString()+": "+"int"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESARIT",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPERACIONUNARIA ::= OPERAUNARIA ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONUNARIA",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPERAUNARIA ::= OPERADORESUNARIOS IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERAUNARIA",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPERAUNARIA ::= IDENTIFICADOR OPERADORESUNARIOS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERAUNARIA",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTRETURN ::= RESERVRETURN SEPARADOR DATOSRETORNO ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTRETURN",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DATOSRETORNO ::= LLAMARFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DATOSRETORNO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DATOSRETORNO ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DATOSRETORNO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DATOSRETORNO ::= LITBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DATOSRETORNO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DATOSRETORNO ::= LITFLOAT 
            {
              Object RESULT =null;
		int litfloatleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litfloatright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litfloat = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litfloat.toString()+": "+"float"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DATOSRETORNO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DATOSRETORNO ::= LITINT 
            {
              Object RESULT =null;
		int litIntleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litIntright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litInt = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litInt.toString()+": "+"int"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DATOSRETORNO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // COMENTARIOS ::= COMENTARIOMULTIPLE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // COMENTARIOS ::= COMENTARIOSIMPLE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OPERADORESUNARIOS ::= SIGDIMINU 
            {
              Object RESULT =null;
		 RESULT = "--";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESUNARIOS",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // OPERADORESUNARIOS ::= SIGAUMEN 
            {
              Object RESULT =null;
		 RESULT = "++";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESUNARIOS",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // OPERADORESLOGICOS ::= SIGDISYUNCION 
            {
              Object RESULT =null;
		 RESULT = "|";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESLOGICOS",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OPERADORESLOGICOS ::= SIGCONJUNCION 
            {
              Object RESULT =null;
		 RESULT = "&";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESLOGICOS",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OPERADORESARITME ::= SIGPOT 
            {
              Object RESULT =null;
		 RESULT = "^";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESARITME",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OPERADORESARITME ::= SIGMOD 
            {
              Object RESULT =null;
		 RESULT = "%";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESARITME",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OPERADORESARITME ::= SIGDIV 
            {
              Object RESULT =null;
		 RESULT = "/";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESARITME",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OPERADORESARITME ::= SIGMULTI 
            {
              Object RESULT =null;
		 RESULT = "*";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESARITME",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OPERADORESARITME ::= SIGSUMA 
            {
              Object RESULT =null;
		 RESULT = "+";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESARITME",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OPERADORESARITME ::= SIGRESTA 
            {
              Object RESULT =null;
		 RESULT = "-";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESARITME",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LITBOOL ::= LITFALSE 
            {
              Object RESULT =null;
		 RESULT = "false"+": "+"bool"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITBOOL",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // LITBOOL ::= LITTRUE 
            {
              Object RESULT =null;
		 RESULT = "true"+": "+"bool"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITBOOL",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

