
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 26 23:13:33 CST 2023
//----------------------------------------------------

package sintaxis;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Collection;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 26 23:13:33 CST 2023
  */
public class Syntax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\272\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\004\003\000\002\004\003\000\002\005\003\000\002" +
    "\005\003\000\002\007\003\000\002\007\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\011\006\000\002\013\004\000" +
    "\002\013\004\000\002\014\004\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\003\000\002\016\005\000\002\016\005" +
    "\000\002\017\006\000\002\020\006\000\002\021\010\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\023\006\000\002\024\010\000\002\025\003\000\002\025" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\005" +
    "\000\002\026\003\000\002\032\006\000\002\033\010\000" +
    "\002\033\011\000\002\034\003\000\002\034\003\000\002" +
    "\035\003\000\002\035\003\000\002\036\006\000\002\037" +
    "\010\000\002\040\003\000\002\040\003\000\002\041\003" +
    "\000\002\041\003\000\002\042\006\000\002\043\010\000" +
    "\002\044\003\000\002\044\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\046\007\000\002\047\007" +
    "\000\002\050\007\000\002\051\007\000\002\052\007\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\054\003\000\002\054\003\000\002\055" +
    "\003\000\002\055\003\000\002\056\005\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\057\003\000\002\057\005\000\002" +
    "\060\003\000\002\060\004\000\002\060\005\000\002\061" +
    "\003\000\002\061\004\000\002\061\005\000\002\061\005" +
    "\000\002\124\003\000\002\124\003\000\002\062\005\000" +
    "\002\066\004\000\002\066\003\000\002\066\003\000\002" +
    "\067\006\000\002\070\011\000\002\070\010\000\002\031" +
    "\004\000\002\030\002\000\002\071\003\000\002\072\005" +
    "\000\002\073\007\000\002\074\003\000\002\074\003\000" +
    "\002\074\003\000\002\110\003\000\002\075\012\000\002" +
    "\126\002\000\002\076\007\000\002\076\010\000\002\077" +
    "\003\000\002\077\003\000\002\077\003\000\002\077\003" +
    "\000\002\100\010\000\002\101\003\000\002\101\004\000" +
    "\002\102\006\000\002\103\012\000\002\104\003\000\002" +
    "\104\003\000\002\104\003\000\002\104\003\000\002\111" +
    "\005\000\002\027\003\000\002\027\005\000\002\105\005" +
    "\000\002\105\004\000\002\106\007\000\002\125\005\000" +
    "\002\107\007\000\002\127\003\000\002\127\003\000\002" +
    "\127\003\000\002\120\004\000\002\112\003\000\002\112" +
    "\003\000\002\112\003\000\002\112\003\000\002\112\003" +
    "\000\002\112\003\000\002\113\003\000\002\113\005\000" +
    "\002\114\006\000\002\114\005\000\002\115\004\000\002" +
    "\063\003\000\002\063\003\000\002\063\003\000\002\064" +
    "\003\000\002\064\003\000\002\064\003\000\002\064\003" +
    "\000\002\065\003\000\002\065\003\000\002\065\004\000" +
    "\002\065\003\000\002\065\003\000\002\116\003\000\002" +
    "\116\003\000\002\116\003\000\002\116\003\000\002\116" +
    "\003\000\002\116\003\000\002\116\003\000\002\116\003" +
    "\000\002\116\003\000\002\116\003\000\002\117\003\000" +
    "\002\117\003\000\002\117\003\000\002\121\004\000\002" +
    "\122\003\000\002\122\004\000\002\122\004\000\002\122" +
    "\005\000\002\123\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013b\000\020\040\021\041\026\042\012\043\030\044" +
    "\010\066\025\067\013\001\002\000\020\040\uff5a\041\uff5a" +
    "\042\uff5a\043\uff5a\044\uff5a\066\uff5a\067\uff5a\001\002\000" +
    "\004\002\uff48\001\002\000\020\040\uff53\041\uff53\042\uff53" +
    "\043\uff53\044\uff53\066\uff53\067\uff53\001\002\000\020\040" +
    "\u012a\041\026\042\012\043\030\044\010\066\025\067\013" +
    "\001\002\000\004\005\u0135\001\002\000\020\040\uff51\041" +
    "\uff51\042\uff51\043\uff51\044\uff51\066\uff51\067\uff51\001\002" +
    "\000\006\005\151\065\uff73\001\002\000\022\035\ufff3\040" +
    "\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\066\ufff3\067\ufff3" +
    "\001\002\000\004\040\u0131\001\002\000\020\040\uff57\041" +
    "\uff57\042\uff57\043\uff57\044\uff57\066\uff57\067\uff57\001\002" +
    "\000\020\040\uff4e\041\uff4e\042\uff4e\043\uff4e\044\uff4e\066" +
    "\uff4e\067\uff4e\001\002\000\020\040\uff56\041\uff56\042\uff56" +
    "\043\uff56\044\uff56\066\uff56\067\uff56\001\002\000\020\040" +
    "\uff50\041\uff50\042\uff50\043\uff50\044\uff50\066\uff50\067\uff50" +
    "\001\002\000\006\005\u012f\065\uff75\001\002\000\020\040" +
    "\uff55\041\uff55\042\uff55\043\uff55\044\uff55\066\uff55\067\uff55" +
    "\001\002\000\004\032\043\001\002\000\020\040\uff4f\041" +
    "\uff4f\042\uff4f\043\uff4f\044\uff4f\066\uff4f\067\uff4f\001\002" +
    "\000\022\035\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044" +
    "\ufff4\066\ufff4\067\ufff4\001\002\000\006\005\356\065\uff74" +
    "\001\002\000\022\002\uff4c\040\u012a\041\026\042\012\043" +
    "\030\044\010\066\025\067\013\001\002\000\004\005\u0121" +
    "\001\002\000\020\040\uff52\041\uff52\042\uff52\043\uff52\044" +
    "\uff52\066\uff52\067\uff52\001\002\000\004\032\043\001\002" +
    "\000\020\040\uff58\041\uff58\042\uff58\043\uff58\044\uff58\066" +
    "\uff58\067\uff58\001\002\000\020\040\uff59\041\uff59\042\uff59" +
    "\043\uff59\044\uff59\066\uff59\067\uff59\001\002\000\020\040" +
    "\uff54\041\uff54\042\uff54\043\uff54\044\uff54\066\uff54\067\uff54" +
    "\001\002\000\004\065\041\001\002\000\004\002\040\001" +
    "\002\000\004\002\001\001\002\000\004\032\uff72\001\002" +
    "\000\004\034\061\001\002\000\014\033\046\040\044\041" +
    "\050\042\045\043\052\001\002\000\004\005\uff81\001\002" +
    "\000\004\005\uff7f\001\002\000\004\034\uff79\001\002\000" +
    "\006\007\057\033\uff7c\001\002\000\004\005\uff80\001\002" +
    "\000\004\033\056\001\002\000\004\005\uff7e\001\002\000" +
    "\004\005\054\001\002\000\004\065\055\001\002\000\006" +
    "\007\uff7d\033\uff7d\001\002\000\004\034\uff7a\001\002\000" +
    "\012\040\044\041\050\042\045\043\052\001\002\000\004" +
    "\033\uff7b\001\002\000\046\022\074\023\073\040\124\041" +
    "\102\042\135\043\030\044\010\045\127\046\065\047\126" +
    "\051\101\052\103\053\uff8d\055\066\056\064\065\106\066" +
    "\025\067\013\001\002\000\050\022\uffb7\023\uffb7\035\uffb7" +
    "\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046" +
    "\uffb7\047\uffb7\051\uffb7\052\uffb7\053\uffb7\055\uffb7\056\uffb7" +
    "\065\uffb7\066\uffb7\067\uffb7\001\002\000\050\022\uffb5\023" +
    "\uffb5\035\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5" +
    "\045\uffb5\046\uffb5\047\uffb5\051\uffb5\052\uffb5\053\uffb5\055" +
    "\uffb5\056\uffb5\065\uffb5\066\uffb5\067\uffb5\001\002\000\004" +
    "\005\u0119\001\002\000\004\032\u010c\001\002\000\004\004" +
    "\u010b\001\002\000\050\022\uff62\023\uff62\035\uff62\040\uff62" +
    "\041\uff62\042\uff62\043\uff62\044\uff62\045\uff62\046\uff62\047" +
    "\uff62\051\uff62\052\uff62\053\uff62\055\uff62\056\uff62\065\uff62" +
    "\066\uff62\067\uff62\001\002\000\050\022\uffd8\023\uffd8\035" +
    "\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8" +
    "\046\uffd8\047\uffd8\051\uffd8\052\uffd8\053\uffd8\055\uffd8\056" +
    "\uffd8\065\uffd8\066\uffd8\067\uffd8\001\002\000\050\022\uffdc" +
    "\023\uffdc\035\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\051\uffdc\052\uffdc\053\uffdc" +
    "\055\uffdc\056\uffdc\065\uffdc\066\uffdc\067\uffdc\001\002\000" +
    "\050\022\uffcf\023\uffcf\035\uffcf\040\uffcf\041\uffcf\042\uffcf" +
    "\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\051\uffcf\052" +
    "\uffcf\053\uffcf\055\uffcf\056\uffcf\065\uffcf\066\uffcf\067\uffcf" +
    "\001\002\000\040\004\ufff5\011\ufff5\012\ufff5\013\ufff5\014" +
    "\ufff5\015\ufff5\016\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5" +
    "\030\ufff5\031\ufff5\033\ufff5\065\ufff5\001\002\000\040\004" +
    "\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6" +
    "\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\033" +
    "\ufff6\065\ufff6\001\002\000\050\022\uff5f\023\uff5f\035\uff5f" +
    "\040\uff5f\041\uff5f\042\uff5f\043\uff5f\044\uff5f\045\uff5f\046" +
    "\uff5f\047\uff5f\051\uff5f\052\uff5f\053\uff5f\055\uff5f\056\uff5f" +
    "\065\uff5f\066\uff5f\067\uff5f\001\002\000\050\022\uffca\023" +
    "\uffca\035\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca" +
    "\045\uffca\046\uffca\047\uffca\051\uffca\052\uffca\053\uffca\055" +
    "\uffca\056\uffca\065\uffca\066\uffca\067\uffca\001\002\000\050" +
    "\022\uffbd\023\uffbd\035\uffbd\040\uffbd\041\uffbd\042\uffbd\043" +
    "\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\051\uffbd\052\uffbd" +
    "\053\uffbd\055\uffbd\056\uffbd\065\uffbd\066\uffbd\067\uffbd\001" +
    "\002\000\004\035\uff9b\001\002\000\004\032\364\001\002" +
    "\000\004\005\356\001\002\000\004\032\303\001\002\000" +
    "\004\004\350\001\002\000\004\004\347\001\002\000\012" +
    "\010\344\022\074\023\073\032\206\001\002\000\050\022" +
    "\uffbf\023\uffbf\035\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\044\uffbf\045\uffbf\046\uffbf\047\uffbf\051\uffbf\052\uffbf\053" +
    "\uffbf\055\uffbf\056\uffbf\065\uffbf\066\uffbf\067\uffbf\001\002" +
    "\000\050\022\uff5e\023\uff5e\035\uff5e\040\uff5e\041\uff5e\042" +
    "\uff5e\043\uff5e\044\uff5e\045\uff5e\046\uff5e\047\uff5e\051\uff5e" +
    "\052\uff5e\053\uff5e\055\uff5e\056\uff5e\065\uff5e\066\uff5e\067" +
    "\uff5e\001\002\000\050\022\uffb6\023\uffb6\035\uffb6\040\uffb6" +
    "\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047" +
    "\uffb6\051\uffb6\052\uffb6\053\uffb6\055\uffb6\056\uffb6\065\uffb6" +
    "\066\uffb6\067\uffb6\001\002\000\050\022\uff63\023\uff63\035" +
    "\uff63\040\uff63\041\uff63\042\uff63\043\uff63\044\uff63\045\uff63" +
    "\046\uff63\047\uff63\051\uff63\052\uff63\053\uff63\055\uff63\056" +
    "\uff63\065\uff63\066\uff63\067\uff63\001\002\000\050\022\uff5c" +
    "\023\uff5c\035\uff5c\040\uff5c\041\uff5c\042\uff5c\043\uff5c\044" +
    "\uff5c\045\uff5c\046\uff5c\047\uff5c\051\uff5c\052\uff5c\053\uff5c" +
    "\055\uff5c\056\uff5c\065\uff5c\066\uff5c\067\uff5c\001\002\000" +
    "\050\022\uff65\023\uff65\035\uff65\040\uff65\041\uff65\042\uff65" +
    "\043\uff65\044\uff65\045\uff65\046\uff65\047\uff65\051\uff65\052" +
    "\uff65\053\uff65\055\uff65\056\uff65\065\uff65\066\uff65\067\uff65" +
    "\001\002\000\050\022\uffd0\023\uffd0\035\uffd0\040\uffd0\041" +
    "\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0" +
    "\051\uffd0\052\uffd0\053\uffd0\055\uffd0\056\uffd0\065\uffd0\066" +
    "\uffd0\067\uffd0\001\002\000\050\022\074\023\073\035\uff9c" +
    "\040\124\041\102\042\135\043\030\044\010\045\127\046" +
    "\065\047\126\051\101\052\103\053\uff8d\055\066\056\064" +
    "\065\106\066\025\067\013\001\002\000\004\032\303\001" +
    "\002\000\050\022\uffde\023\uffde\035\uffde\040\uffde\041\uffde" +
    "\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\051" +
    "\uffde\052\uffde\053\uffde\055\uffde\056\uffde\065\uffde\066\uffde" +
    "\067\uffde\001\002\000\050\022\uffc4\023\uffc4\035\uffc4\040" +
    "\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4" +
    "\047\uffc4\051\uffc4\052\uffc4\053\uffc4\055\uffc4\056\uffc4\065" +
    "\uffc4\066\uffc4\067\uffc4\001\002\000\050\022\uffc0\023\uffc0" +
    "\035\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045" +
    "\uffc0\046\uffc0\047\uffc0\051\uffc0\052\uffc0\053\uffc0\055\uffc0" +
    "\056\uffc0\065\uffc0\066\uffc0\067\uffc0\001\002\000\050\022" +
    "\uffb4\023\uffb4\035\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4" +
    "\044\uffb4\045\uffb4\046\uffb4\047\uffb4\051\uffb4\052\uffb4\053" +
    "\uffb4\055\uffb4\056\uffb4\065\uffb4\066\uffb4\067\uffb4\001\002" +
    "\000\004\005\261\001\002\000\004\053\241\001\002\000" +
    "\004\005\240\001\002\000\004\032\234\001\002\000\050" +
    "\022\uffc2\023\uffc2\035\uffc2\040\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\051\uffc2\052\uffc2" +
    "\053\uffc2\055\uffc2\056\uffc2\065\uffc2\066\uffc2\067\uffc2\001" +
    "\002\000\050\022\uffc1\023\uffc1\035\uffc1\040\uffc1\041\uffc1" +
    "\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\055\uffc1\056\uffc1\065\uffc1\066\uffc1" +
    "\067\uffc1\001\002\000\050\022\uff66\023\uff66\035\uff66\040" +
    "\uff66\041\uff66\042\uff66\043\uff66\044\uff66\045\uff66\046\uff66" +
    "\047\uff66\051\uff66\052\uff66\053\uff66\055\uff66\056\uff66\065" +
    "\uff66\066\uff66\067\uff66\001\002\000\050\022\uff60\023\uff60" +
    "\035\uff60\040\uff60\041\uff60\042\uff60\043\uff60\044\uff60\045" +
    "\uff60\046\uff60\047\uff60\051\uff60\052\uff60\053\uff60\055\uff60" +
    "\056\uff60\065\uff60\066\uff60\067\uff60\001\002\000\050\022" +
    "\uffbe\023\uffbe\035\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe" +
    "\044\uffbe\045\uffbe\046\uffbe\047\uffbe\051\uffbe\052\uffbe\053" +
    "\uffbe\055\uffbe\056\uffbe\065\uffbe\066\uffbe\067\uffbe\001\002" +
    "\000\004\005\151\001\002\000\050\022\uffc9\023\uffc9\035" +
    "\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9" +
    "\046\uffc9\047\uffc9\051\uffc9\052\uffc9\053\uffc9\055\uffc9\056" +
    "\uffc9\065\uffc9\066\uffc9\067\uffc9\001\002\000\050\022\uffdd" +
    "\023\uffdd\035\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044" +
    "\uffdd\045\uffdd\046\uffdd\047\uffdd\051\uffdd\052\uffdd\053\uffdd" +
    "\055\uffdd\056\uffdd\065\uffdd\066\uffdd\067\uffdd\001\002\000" +
    "\050\022\uff5b\023\uff5b\035\uff5b\040\uff5b\041\uff5b\042\uff5b" +
    "\043\uff5b\044\uff5b\045\uff5b\046\uff5b\047\uff5b\051\uff5b\052" +
    "\uff5b\053\uff5b\055\uff5b\056\uff5b\065\uff5b\066\uff5b\067\uff5b" +
    "\001\002\000\004\035\150\001\002\000\050\022\uffc3\023" +
    "\uffc3\035\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3" +
    "\045\uffc3\046\uffc3\047\uffc3\051\uffc3\052\uffc3\053\uffc3\055" +
    "\uffc3\056\uffc3\065\uffc3\066\uffc3\067\uffc3\001\002\000\050" +
    "\022\uff61\023\uff61\035\uff61\040\uff61\041\uff61\042\uff61\043" +
    "\uff61\044\uff61\045\uff61\046\uff61\047\uff61\051\uff61\052\uff61" +
    "\053\uff61\055\uff61\056\uff61\065\uff61\066\uff61\067\uff61\001" +
    "\002\000\050\022\uffd9\023\uffd9\035\uffd9\040\uffd9\041\uffd9" +
    "\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\051" +
    "\uffd9\052\uffd9\053\uffd9\055\uffd9\056\uffd9\065\uffd9\066\uffd9" +
    "\067\uffd9\001\002\000\050\022\uff64\023\uff64\035\uff64\040" +
    "\uff64\041\uff64\042\uff64\043\uff64\044\uff64\045\uff64\046\uff64" +
    "\047\uff64\051\uff64\052\uff64\053\uff64\055\uff64\056\uff64\065" +
    "\uff64\066\uff64\067\uff64\001\002\000\004\065\147\001\002" +
    "\000\036\004\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015" +
    "\uffeb\016\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\033\uffeb\001\002\000\022\002\uff78\040\uff78\041" +
    "\uff78\042\uff78\043\uff78\044\uff78\066\uff78\067\uff78\001\002" +
    "\000\004\065\152\001\002\000\006\004\153\010\154\001" +
    "\002\000\050\022\uffd3\023\uffd3\035\uffd3\040\uffd3\041\uffd3" +
    "\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\051" +
    "\uffd3\052\uffd3\053\uffd3\055\uffd3\056\uffd3\065\uffd3\066\uffd3" +
    "\067\uffd3\001\002\000\014\021\164\032\156\036\163\037" +
    "\155\065\165\001\002\000\020\004\uffff\007\uffff\017\uffff" +
    "\020\uffff\030\uffff\031\uffff\033\uffff\001\002\000\014\022" +
    "\074\023\073\061\200\062\203\065\205\001\002\000\010" +
    "\004\uffd7\030\uffb1\031\uffb1\001\002\000\006\030\172\031" +
    "\171\001\002\000\004\004\170\001\002\000\004\004\uffd4" +
    "\001\002\000\020\004\000\007\000\017\000\020\000\030" +
    "\000\031\000\033\000\001\002\000\012\032\156\036\163" +
    "\037\155\065\165\001\002\000\010\004\uffd6\030\uffb0\031" +
    "\uffb0\001\002\000\004\004\167\001\002\000\050\022\uffd1" +
    "\023\uffd1\035\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044" +
    "\uffd1\045\uffd1\046\uffd1\047\uffd1\051\uffd1\052\uffd1\053\uffd1" +
    "\055\uffd1\056\uffd1\065\uffd1\066\uffd1\067\uffd1\001\002\000" +
    "\050\022\uffd2\023\uffd2\035\uffd2\040\uffd2\041\uffd2\042\uffd2" +
    "\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\051\uffd2\052" +
    "\uffd2\053\uffd2\055\uffd2\056\uffd2\065\uffd2\066\uffd2\067\uffd2" +
    "\001\002\000\020\022\uffb2\023\uffb2\036\uffb2\037\uffb2\061" +
    "\uffb2\062\uffb2\065\uffb2\001\002\000\020\022\uffb3\023\uffb3" +
    "\036\uffb3\037\uffb3\061\uffb3\062\uffb3\065\uffb3\001\002\000" +
    "\010\036\163\037\155\065\174\001\002\000\004\004\uffb0" +
    "\001\002\000\004\004\uffaf\001\002\000\004\004\uffb1\001" +
    "\002\000\036\004\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\033\uffe6\001\002\000\036\004\uffe9\011\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\024\uffe9\025" +
    "\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\033\uffe9\001\002" +
    "\000\020\024\225\025\231\026\226\027\227\030\172\031" +
    "\171\033\uffa9\001\002\000\004\033\224\001\002\000\036" +
    "\004\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8" +
    "\033\uffe8\001\002\000\036\004\uffe5\011\uffe5\012\uffe5\013" +
    "\uffe5\014\uffe5\015\uffe5\016\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\030\uffe5\031\uffe5\033\uffe5\001\002\000\044\004" +
    "\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7" +
    "\022\074\023\073\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\032\206\033\uffe7\001\002\000\020\033\217" +
    "\036\163\037\155\061\211\062\216\063\213\065\220\001" +
    "\002\000\036\004\uffec\011\uffec\012\uffec\013\uffec\014\uffec" +
    "\015\uffec\016\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030" +
    "\uffec\031\uffec\033\uffec\001\002\000\006\007\uff6c\033\uff6c" +
    "\001\002\000\006\007\uff71\033\uff71\001\002\000\006\007" +
    "\222\033\uff6b\001\002\000\006\007\uff6f\033\uff6f\001\002" +
    "\000\004\033\221\001\002\000\006\007\uff6e\033\uff6e\001" +
    "\002\000\006\007\uff70\033\uff70\001\002\000\040\004\uff68" +
    "\007\uff68\011\uff68\012\uff68\013\uff68\014\uff68\015\uff68\016" +
    "\uff68\024\uff68\025\uff68\026\uff68\027\uff68\030\uff68\031\uff68" +
    "\033\uff68\001\002\000\010\007\uff6d\032\206\033\uff6d\001" +
    "\002\000\040\004\uff69\007\uff69\011\uff69\012\uff69\013\uff69" +
    "\014\uff69\015\uff69\016\uff69\024\uff69\025\uff69\026\uff69\027" +
    "\uff69\030\uff69\031\uff69\033\uff69\001\002\000\016\036\163" +
    "\037\155\061\211\062\216\063\213\065\220\001\002\000" +
    "\004\033\uff6a\001\002\000\004\004\uffd5\001\002\000\014" +
    "\022\uffae\023\uffae\061\uffae\062\uffae\065\uffae\001\002\000" +
    "\014\022\uffac\023\uffac\061\uffac\062\uffac\065\uffac\001\002" +
    "\000\014\022\uffab\023\uffab\061\uffab\062\uffab\065\uffab\001" +
    "\002\000\014\022\074\023\073\061\200\062\203\065\205" +
    "\001\002\000\014\022\uffad\023\uffad\061\uffad\062\uffad\065" +
    "\uffad\001\002\000\014\022\uffaa\023\uffaa\061\uffaa\062\uffaa" +
    "\065\uffaa\001\002\000\004\033\uffa8\001\002\000\004\065" +
    "\235\001\002\000\004\033\236\001\002\000\004\004\237" +
    "\001\002\000\050\022\uffbc\023\uffbc\035\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc" +
    "\051\uffbc\052\uffbc\053\uffbc\055\uffbc\056\uffbc\065\uffbc\066" +
    "\uffbc\067\uffbc\001\002\000\004\032\uff97\001\002\000\004" +
    "\032\242\001\002\000\014\022\074\023\073\061\200\062" +
    "\203\065\205\001\002\000\004\033\uff8f\001\002\000\006" +
    "\004\255\033\uff95\001\002\000\004\033\uff91\001\002\000" +
    "\004\033\uff92\001\002\000\004\033\uff90\001\002\000\004" +
    "\033\251\001\002\000\004\034\252\001\002\000\046\022" +
    "\074\023\073\040\124\041\102\042\135\043\030\044\010" +
    "\045\127\046\065\047\126\051\101\052\103\053\uff8d\055" +
    "\066\056\064\065\106\066\025\067\013\001\002\000\004" +
    "\035\254\001\002\000\050\022\uff8e\023\uff8e\035\uff8e\040" +
    "\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e" +
    "\047\uff8e\051\uff8e\052\uff8e\053\uff8e\055\uff8e\056\uff8e\065" +
    "\uff8e\066\uff8e\067\uff8e\001\002\000\014\022\074\023\073" +
    "\061\200\062\203\065\205\001\002\000\006\004\257\033" +
    "\uff94\001\002\000\014\022\074\023\073\061\200\062\203" +
    "\065\205\001\002\000\004\033\uff93\001\002\000\004\065" +
    "\262\001\002\000\006\004\263\010\264\001\002\000\050" +
    "\022\uffe0\023\uffe0\035\uffe0\040\uffe0\041\uffe0\042\uffe0\043" +
    "\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\051\uffe0\052\uffe0" +
    "\053\uffe0\055\uffe0\056\uffe0\065\uffe0\066\uffe0\067\uffe0\001" +
    "\002\000\016\022\074\023\073\032\267\061\200\062\203" +
    "\065\205\001\002\000\022\004\uffe4\011\277\012\273\013" +
    "\276\014\301\015\275\016\300\033\uffe4\001\002\000\004" +
    "\004\272\001\002\000\016\022\074\023\073\032\267\061" +
    "\200\062\203\065\205\001\002\000\004\033\271\001\002" +
    "\000\006\004\uffe2\033\uffe2\001\002\000\050\022\uffdf\023" +
    "\uffdf\035\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf" +
    "\045\uffdf\046\uffdf\047\uffdf\051\uffdf\052\uffdf\053\uffdf\055" +
    "\uffdf\056\uffdf\065\uffdf\066\uffdf\067\uffdf\001\002\000\016" +
    "\022\ufffd\023\ufffd\032\ufffd\061\ufffd\062\ufffd\065\ufffd\001" +
    "\002\000\016\022\074\023\073\032\267\061\200\062\203" +
    "\065\205\001\002\000\016\022\ufffa\023\ufffa\032\ufffa\061" +
    "\ufffa\062\ufffa\065\ufffa\001\002\000\016\022\ufffc\023\ufffc" +
    "\032\ufffc\061\ufffc\062\ufffc\065\ufffc\001\002\000\016\022" +
    "\ufffe\023\ufffe\032\ufffe\061\ufffe\062\ufffe\065\ufffe\001\002" +
    "\000\016\022\ufff9\023\ufff9\032\ufff9\061\ufff9\062\ufff9\065" +
    "\ufff9\001\002\000\016\022\ufffb\023\ufffb\032\ufffb\061\ufffb" +
    "\062\ufffb\065\ufffb\001\002\000\006\004\uffe3\033\uffe3\001" +
    "\002\000\016\005\322\021\324\032\321\036\163\037\155" +
    "\065\325\001\002\000\004\034\305\001\002\000\046\022" +
    "\074\023\073\040\124\041\102\042\135\043\030\044\010" +
    "\045\127\046\065\047\126\051\101\052\103\053\uff8d\055" +
    "\066\056\064\065\106\066\025\067\013\001\002\000\004" +
    "\035\307\001\002\000\052\022\uff96\023\uff96\035\uff96\040" +
    "\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96" +
    "\047\uff96\050\310\051\uff96\052\uff96\053\uff96\055\uff96\056" +
    "\uff96\065\uff96\066\uff96\067\uff96\001\002\000\004\034\314" +
    "\001\002\000\050\022\uff98\023\uff98\035\uff98\040\uff98\041" +
    "\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98" +
    "\051\uff98\052\uff98\053\uff98\055\uff98\056\uff98\065\uff98\066" +
    "\uff98\067\uff98\001\002\000\050\022\uff96\023\uff96\035\uff96" +
    "\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046" +
    "\uff96\047\uff96\051\uff96\052\uff96\053\uff96\055\uff96\056\uff96" +
    "\065\uff96\066\uff96\067\uff96\001\002\000\050\022\uff99\023" +
    "\uff99\035\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99" +
    "\045\uff99\046\uff99\047\uff99\051\uff99\052\uff99\053\uff99\055" +
    "\uff99\056\uff99\065\uff99\066\uff99\067\uff99\001\002\000\046" +
    "\022\074\023\073\040\124\041\102\042\135\043\030\044" +
    "\010\045\127\046\065\047\126\051\101\052\103\053\uff8d" +
    "\055\066\056\064\065\106\066\025\067\013\001\002\000" +
    "\004\035\316\001\002\000\050\022\uff9a\023\uff9a\035\uff9a" +
    "\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046" +
    "\uff9a\047\uff9a\051\uff9a\052\uff9a\053\uff9a\055\uff9a\056\uff9a" +
    "\065\uff9a\066\uff9a\067\uff9a\001\002\000\004\033\342\001" +
    "\002\000\010\017\uffa7\020\uffa7\033\uffa7\001\002\000\026" +
    "\005\322\021\324\022\074\023\073\032\321\036\163\037" +
    "\155\061\200\062\203\065\205\001\002\000\004\065\337" +
    "\001\002\000\010\017\333\020\335\033\uffa0\001\002\000" +
    "\012\005\322\032\330\036\163\037\155\001\002\000\004" +
    "\033\uff9f\001\002\000\010\017\uffa4\020\uffa4\033\uffa4\001" +
    "\002\000\010\017\uffa3\020\uffa3\033\uffa3\001\002\000\014" +
    "\022\074\023\073\061\200\062\203\065\205\001\002\000" +
    "\004\033\332\001\002\000\010\017\uffa5\020\uffa5\033\uffa5" +
    "\001\002\000\012\005\ufff8\032\ufff8\036\ufff8\037\ufff8\001" +
    "\002\000\012\005\322\032\330\036\163\037\155\001\002" +
    "\000\012\005\ufff7\032\ufff7\036\ufff7\037\ufff7\001\002\000" +
    "\010\017\uffa2\020\uffa2\033\uffa2\001\002\000\010\017\uffa6" +
    "\020\uffa6\033\uffa6\001\002\000\010\017\333\020\335\033" +
    "\341\001\002\000\010\017\uffa1\020\uffa1\033\uffa1\001\002" +
    "\000\004\034\uff9e\001\002\000\004\035\uff9d\001\002\000" +
    "\016\022\074\023\073\032\267\061\200\062\203\065\205" +
    "\001\002\000\004\004\346\001\002\000\050\022\uffe1\023" +
    "\uffe1\035\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1" +
    "\045\uffe1\046\uffe1\047\uffe1\051\uffe1\052\uffe1\053\uffe1\055" +
    "\uffe1\056\uffe1\065\uffe1\066\uffe1\067\uffe1\001\002\000\050" +
    "\022\uffea\023\uffea\035\uffea\040\uffea\041\uffea\042\uffea\043" +
    "\uffea\044\uffea\045\uffea\046\uffea\047\uffea\051\uffea\052\uffea" +
    "\053\uffea\055\uffea\056\uffea\065\uffea\066\uffea\067\uffea\001" +
    "\002\000\050\022\uff67\023\uff67\035\uff67\040\uff67\041\uff67" +
    "\042\uff67\043\uff67\044\uff67\045\uff67\046\uff67\047\uff67\051" +
    "\uff67\052\uff67\053\uff67\055\uff67\056\uff67\065\uff67\066\uff67" +
    "\067\uff67\001\002\000\004\034\352\001\002\000\046\022" +
    "\074\023\073\040\124\041\102\042\135\043\030\044\010" +
    "\045\127\046\065\047\126\051\101\052\103\053\uff8d\055" +
    "\066\056\064\065\106\066\025\067\013\001\002\000\004" +
    "\035\354\001\002\000\052\022\uff8c\023\uff8c\035\uff8c\040" +
    "\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c" +
    "\047\uff8c\050\310\051\uff8c\052\uff8c\053\uff8c\055\uff8c\056" +
    "\uff8c\065\uff8c\066\uff8c\067\uff8c\001\002\000\050\022\uff8b" +
    "\023\uff8b\035\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044" +
    "\uff8b\045\uff8b\046\uff8b\047\uff8b\051\uff8b\052\uff8b\053\uff8b" +
    "\055\uff8b\056\uff8b\065\uff8b\066\uff8b\067\uff8b\001\002\000" +
    "\004\065\357\001\002\000\006\004\360\010\361\001\002" +
    "\000\050\022\uffdb\023\uffdb\035\uffdb\040\uffdb\041\uffdb\042" +
    "\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\051\uffdb" +
    "\052\uffdb\053\uffdb\055\uffdb\056\uffdb\065\uffdb\066\uffdb\067" +
    "\uffdb\001\002\000\016\022\074\023\073\032\267\061\200" +
    "\062\203\065\205\001\002\000\004\004\363\001\002\000" +
    "\050\022\uffda\023\uffda\035\uffda\040\uffda\041\uffda\042\uffda" +
    "\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda\051\uffda\052" +
    "\uffda\053\uffda\055\uffda\056\uffda\065\uffda\066\uffda\067\uffda" +
    "\001\002\000\004\065\365\001\002\000\004\033\366\001" +
    "\002\000\004\034\367\001\002\000\004\057\370\001\002" +
    "\000\004\005\u0102\001\002\000\004\060\375\001\002\000" +
    "\006\057\370\060\uff85\001\002\000\004\060\uff84\001\002" +
    "\000\004\035\u0101\001\002\000\004\006\376\001\002\000" +
    "\046\022\074\023\073\040\124\041\102\042\135\043\030" +
    "\044\010\045\127\046\065\047\126\051\101\052\103\053" +
    "\uff8d\055\066\056\064\065\106\066\025\067\013\001\002" +
    "\000\002\001\002\000\004\035\uff83\001\002\000\050\022" +
    "\uff82\023\uff82\035\uff82\040\uff82\041\uff82\042\uff82\043\uff82" +
    "\044\uff82\045\uff82\046\uff82\047\uff82\051\uff82\052\uff82\053" +
    "\uff82\055\uff82\056\uff82\065\uff82\066\uff82\067\uff82\001\002" +
    "\000\012\061\u0104\062\u0105\063\u0107\064\u0106\001\002\000" +
    "\004\006\u0108\001\002\000\004\006\uff8a\001\002\000\004" +
    "\006\uff89\001\002\000\004\006\uff87\001\002\000\004\006" +
    "\uff88\001\002\000\046\022\074\023\073\040\124\041\102" +
    "\042\135\043\030\044\010\045\127\046\065\047\126\051" +
    "\101\052\103\053\uff8d\055\066\056\064\065\106\066\025" +
    "\067\013\001\002\000\002\001\002\000\006\057\uff86\060" +
    "\uff86\001\002\000\050\022\uff5d\023\uff5d\035\uff5d\040\uff5d" +
    "\041\uff5d\042\uff5d\043\uff5d\044\uff5d\045\uff5d\046\uff5d\047" +
    "\uff5d\051\uff5d\052\uff5d\053\uff5d\055\uff5d\056\uff5d\065\uff5d" +
    "\066\uff5d\067\uff5d\001\002\000\012\061\u010d\062\u010e\064" +
    "\u0110\065\u010f\001\002\000\004\033\u0117\001\002\000\004" +
    "\033\u0115\001\002\000\004\033\u0113\001\002\000\004\033" +
    "\u0111\001\002\000\004\004\u0112\001\002\000\050\022\uffb9" +
    "\023\uffb9\035\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044" +
    "\uffb9\045\uffb9\046\uffb9\047\uffb9\051\uffb9\052\uffb9\053\uffb9" +
    "\055\uffb9\056\uffb9\065\uffb9\066\uffb9\067\uffb9\001\002\000" +
    "\004\004\u0114\001\002\000\050\022\uffb8\023\uffb8\035\uffb8" +
    "\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046" +
    "\uffb8\047\uffb8\051\uffb8\052\uffb8\053\uffb8\055\uffb8\056\uffb8" +
    "\065\uffb8\066\uffb8\067\uffb8\001\002\000\004\004\u0116\001" +
    "\002\000\050\022\uffba\023\uffba\035\uffba\040\uffba\041\uffba" +
    "\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\051" +
    "\uffba\052\uffba\053\uffba\055\uffba\056\uffba\065\uffba\066\uffba" +
    "\067\uffba\001\002\000\004\004\u0118\001\002\000\050\022" +
    "\uffbb\023\uffbb\035\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb" +
    "\044\uffbb\045\uffbb\046\uffbb\047\uffbb\051\uffbb\052\uffbb\053" +
    "\uffbb\055\uffbb\056\uffbb\065\uffbb\066\uffbb\067\uffbb\001\002" +
    "\000\014\036\163\037\155\061\u011a\062\u011b\065\u011d\001" +
    "\002\000\004\004\ufff2\001\002\000\004\004\ufff1\001\002" +
    "\000\004\004\uffee\001\002\000\006\004\uffef\032\206\001" +
    "\002\000\004\004\ufff0\001\002\000\004\004\u0120\001\002" +
    "\000\050\022\uffed\023\uffed\035\uffed\040\uffed\041\uffed\042" +
    "\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed\051\uffed" +
    "\052\uffed\053\uffed\055\uffed\056\uffed\065\uffed\066\uffed\067" +
    "\uffed\001\002\000\004\065\u0122\001\002\000\006\004\u0123" +
    "\010\u0124\001\002\000\050\022\uffcc\023\uffcc\035\uffcc\040" +
    "\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc" +
    "\047\uffcc\051\uffcc\052\uffcc\053\uffcc\055\uffcc\056\uffcc\065" +
    "\uffcc\066\uffcc\067\uffcc\001\002\000\006\063\u0127\065\u0125" +
    "\001\002\000\004\004\uffcd\001\002\000\004\004\u0128\001" +
    "\002\000\004\004\uffce\001\002\000\050\022\uffcb\023\uffcb" +
    "\035\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045" +
    "\uffcb\046\uffcb\047\uffcb\051\uffcb\052\uffcb\053\uffcb\055\uffcb" +
    "\056\uffcb\065\uffcb\066\uffcb\067\uffcb\001\002\000\004\002" +
    "\uff4b\001\002\000\006\005\261\065\uff75\001\002\000\004" +
    "\034\u012c\001\002\000\046\022\074\023\073\040\124\041" +
    "\102\042\135\043\030\044\010\045\127\046\065\047\126" +
    "\051\101\052\103\053\uff8d\055\066\056\064\065\106\066" +
    "\025\067\013\001\002\000\004\035\u012e\001\002\000\020" +
    "\040\uff76\041\uff76\042\uff76\043\uff76\044\uff76\066\uff76\067" +
    "\uff76\001\002\000\006\054\u0130\065\262\001\002\000\004" +
    "\032\uff77\001\002\000\004\005\u0134\001\002\000\022\002" +
    "\uff4a\040\u012a\041\026\042\012\043\030\044\010\066\025" +
    "\067\013\001\002\000\004\002\uff49\001\002\000\004\054" +
    "\u0130\001\002\000\004\065\u0136\001\002\000\006\004\u0137" +
    "\010\u0138\001\002\000\050\022\uffc6\023\uffc6\035\uffc6\040" +
    "\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6" +
    "\047\uffc6\051\uffc6\052\uffc6\053\uffc6\055\uffc6\056\uffc6\065" +
    "\uffc6\066\uffc6\067\uffc6\001\002\000\006\064\u013a\065\u0139" +
    "\001\002\000\004\004\uffc7\001\002\000\004\004\uffc8\001" +
    "\002\000\004\004\u013c\001\002\000\050\022\uffc5\023\uffc5" +
    "\035\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045" +
    "\uffc5\046\uffc5\047\uffc5\051\uffc5\052\uffc5\053\uffc5\055\uffc5" +
    "\056\uffc5\065\uffc5\066\uffc5\067\uffc5\001\002\000\006\002" +
    "\uff4d\040\uff4d\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013b\000\054\007\015\020\003\021\033\023\032\024" +
    "\014\032\016\033\021\036\034\037\005\042\030\043\010" +
    "\106\026\107\017\116\023\117\006\120\022\121\013\122" +
    "\004\123\036\125\031\127\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\007\015\020" +
    "\003\021\033\023\032\024\014\032\016\033\021\036\034" +
    "\037\005\042\030\043\010\107\017\116\023\117\006\120" +
    "\022\121\u013c\127\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\106" +
    "\u0131\125\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\105\u012a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\007\015\020" +
    "\003\021\033\023\032\024\014\032\016\033\021\036\034" +
    "\037\005\042\030\043\010\107\017\116\023\117\006\120" +
    "\022\121\u0128\127\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\105\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\027\050\104\052\111\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\027\057\104\052\111\046\001\001" +
    "\000\002\001\001\000\122\005\145\007\077\011\112\013" +
    "\104\014\076\017\117\020\136\021\070\022\127\023\143" +
    "\024\067\025\130\031\116\032\114\033\071\034\121\036" +
    "\075\037\135\040\106\042\120\043\141\044\133\045\131" +
    "\046\113\047\061\050\110\051\062\052\122\053\144\063" +
    "\074\064\107\065\115\066\140\070\111\075\142\076\132" +
    "\103\066\114\103\115\137\126\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\062\350\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\122\005\145" +
    "\007\077\011\112\013\104\014\076\017\117\020\136\021" +
    "\070\022\127\023\143\024\067\025\130\031\116\032\114" +
    "\033\071\034\121\036\075\037\135\040\106\042\120\043" +
    "\141\044\133\045\131\046\113\047\061\050\110\051\062" +
    "\052\122\053\144\063\074\064\107\065\115\066\342\070" +
    "\111\075\142\076\132\103\066\114\103\115\137\126\124" +
    "\001\001\000\004\062\303\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\156\026\160\055\157\056\161" +
    "\001\001\000\002\001\001\000\014\005\145\013\203\015" +
    "\200\057\201\114\176\001\001\000\002\001\001\000\004" +
    "\054\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\156\026\165\055\157\056\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\175\055\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\227\054\231\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\206" +
    "\001\001\000\012\002\214\112\211\113\213\114\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\002\214\112\211\113" +
    "\222\114\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\145\013\203\015\232\114\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\005\145\013" +
    "\203\015\243\071\245\072\244\073\246\074\242\110\247" +
    "\114\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\122\005\145\007\077\011" +
    "\112\013\104\014\076\017\117\020\136\021\070\022\127" +
    "\023\143\024\067\025\130\031\116\032\114\033\071\034" +
    "\121\036\075\037\135\040\106\042\120\043\141\044\133" +
    "\045\131\046\113\047\061\050\110\051\062\052\122\053" +
    "\144\063\074\064\107\065\115\066\252\070\111\075\142" +
    "\076\132\103\066\114\103\115\137\126\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\145\013\203" +
    "\015\255\114\176\001\001\000\002\001\001\000\012\005" +
    "\145\013\203\015\257\114\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\005\145\013\203\015\264\016\265\114\176\001\001" +
    "\000\004\003\273\001\001\000\002\001\001\000\014\005" +
    "\145\013\203\015\264\016\267\114\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\145\013\203\015\264\016\301\114\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\317\060\325\061\322\124\316\001\001\000" +
    "\002\001\001\000\122\005\145\007\077\011\112\013\104" +
    "\014\076\017\117\020\136\021\070\022\127\023\143\024" +
    "\067\025\130\031\116\032\114\033\071\034\121\036\075" +
    "\037\135\040\106\042\120\043\141\044\133\045\131\046" +
    "\113\047\061\050\110\051\062\052\122\053\144\063\074" +
    "\064\107\065\115\066\305\070\111\075\142\076\132\103" +
    "\066\114\103\115\137\126\124\001\001\000\002\001\001" +
    "\000\006\030\310\067\311\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\312\001\001\000\002\001\001" +
    "\000\122\005\145\007\077\011\112\013\104\014\076\017" +
    "\117\020\136\021\070\022\127\023\143\024\067\025\130" +
    "\031\116\032\114\033\071\034\121\036\075\037\135\040" +
    "\106\042\120\043\141\044\133\045\131\046\113\047\061" +
    "\050\110\051\062\052\122\053\144\063\074\064\107\065" +
    "\115\066\314\070\111\075\142\076\132\103\066\114\103" +
    "\115\137\126\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\002\317" +
    "\005\145\013\203\015\200\057\330\060\325\061\337\114" +
    "\176\001\001\000\002\001\001\000\004\004\333\001\001" +
    "\000\006\002\317\060\326\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\145\013\203" +
    "\015\200\057\330\114\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\317\060\335" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\333\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\145\013\203\015" +
    "\264\016\344\114\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\122\005\145\007\077\011\112\013\104\014\076" +
    "\017\117\020\136\021\070\022\127\023\143\024\067\025" +
    "\130\031\116\032\114\033\071\034\121\036\075\037\135" +
    "\040\106\042\120\043\141\044\133\045\131\046\113\047" +
    "\061\050\110\051\062\052\122\053\144\063\074\064\107" +
    "\065\115\066\352\070\111\075\142\076\132\103\066\114" +
    "\103\115\137\126\124\001\001\000\002\001\001\000\004" +
    "\067\354\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\145\013\203" +
    "\015\264\016\361\114\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\100\371\101\370\001\001\000\002\001" +
    "\001\000\004\102\373\001\001\000\006\100\371\101\372" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\122\005\145\007\077\011\112\013\104\014\076" +
    "\017\117\020\136\021\070\022\127\023\143\024\067\025" +
    "\130\031\116\032\114\033\071\034\121\036\075\037\135" +
    "\040\106\042\120\043\141\044\133\045\131\046\113\047" +
    "\061\050\110\051\062\052\122\053\144\063\074\064\107" +
    "\065\115\066\376\070\111\075\142\076\132\103\066\114" +
    "\103\115\137\126\124\001\001\000\004\012\377\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\077\u0102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\122\005\145\007" +
    "\077\011\112\013\104\014\076\017\117\020\136\021\070" +
    "\022\127\023\143\024\067\025\130\031\116\032\114\033" +
    "\071\034\121\036\075\037\135\040\106\042\120\043\141" +
    "\044\133\045\131\046\113\047\061\050\110\051\062\052" +
    "\122\053\144\063\074\064\107\065\115\066\u0108\070\111" +
    "\075\142\076\132\103\066\114\103\115\137\126\124\001" +
    "\001\000\004\012\u0109\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\u011d\010\u011e\114\u011b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\u0125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\122\005\145\007" +
    "\077\011\112\013\104\014\076\017\117\020\136\021\070" +
    "\022\127\023\143\024\067\025\130\031\116\032\114\033" +
    "\071\034\121\036\075\037\135\040\106\042\120\043\141" +
    "\044\133\045\131\046\113\047\061\050\110\051\062\052" +
    "\122\053\144\063\074\064\107\065\115\066\u012c\070\111" +
    "\075\142\076\132\103\066\114\103\115\137\126\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\007\015\020" +
    "\003\021\033\023\032\024\014\032\016\033\021\036\034" +
    "\037\005\042\030\043\010\107\017\116\023\117\006\120" +
    "\022\121\u0132\127\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\u013a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntax$actions {


    LexerCup lex;
    private Object symbolFactory;
    Symbol token;
    Boolean errores = false;
    HashMap<String, ArrayList<String>> listaTablaSimbolos = new HashMap<String, ArrayList<String>>();
    String currentHash;
    int currentTemp = 0;
    StringBuilder codIn3D = new StringBuilder();
    ArrayList<String> elementosArray = new ArrayList<>();
    ArrayList<String> elementosParametros = new ArrayList<>();
    int contador_for = 0;
    int contador_while = 0;
    int contador_if = 0;
    int contador_fin_if = 1;
    int contador_if_anidados = 0;
    int contador_else = 0;
    String fatherCurrentHash = null;
    LinkedList<String> hashTree = new LinkedList<>();
    int currentHashPos = 0;
    StringBuilder mipsData = new StringBuilder();
    StringBuilder mipsMain = new StringBuilder();
    String stringCreationMips = "";
    int mipsTemp = 0;

    public String existeFuncion(String idBuscado){
        Collection<ArrayList<String>> valores = listaTablaSimbolos.values();
        for (ArrayList<String> tablaSimbolos : valores){
            // Recorre los elementos del ArrayList
            for (String elemento : tablaSimbolos) {
                // Divide el elemento en ID y tipo
                String[] partes = elemento.split(":");
                if (partes[0].equals("tipo") && partes[2].equals(idBuscado)) { // Verifica si el ID coincide con el ID buscado
                    return partes[3].trim(); // Se encontró el ID de la función y se envía el tipo de la función
                }
            }
        }
        return null;   
    }

    /* Constructor del parser, recibe como parámetro el lexer que se va a utilizar 
        Entradas: Lexer lex
        Salidas: Ninguna
        Restricciones: Ninguna
    */

    @SuppressWarnings("deprecation")
    public void parser(LexerCup lex){
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
    
    /* Método que se encarga de retornar el valor booleao de errores. Indicando si hubo errores o no
        Entradas: Ninguna
        Salidas: errores
        Restricciones: Ninguna
    */
    public boolean getErrores(){
        return errores;
    }

    /* Método que se encarga de retornar el string buffer del código intermedio 3 direcciones
        Entradas: Ninguna
        Salidas: codIn3D
        Restricciones: Ninguna
    */
    public StringBuilder getCodIn3D(){
        return codIn3D;
    }

    /*
        Método que se encarga de retornar el string buffer del código MIPS
        Entradas: Ninguna
        Salidas: mipsData
        Restricciones: Ninguna
    */
    public StringBuilder getMipsData(){
        return mipsData;
    }

    /*
        Método que se encarga de retornar el string buffer del código MIPS
        Entradas: Ninguna
        Salidas: mipsMain
        Restricciones: Ninguna
    */
    public StringBuilder getMipsMain(){
        return mipsMain;
    }
    /* Método que se encarga de imprimir la tabla de símbolos
        Entradas: Ninguna
        Salidas: Ninguna
        Restricciones: Ninguna
    */
    private void imprimirTablaSimbolos(){
        for(String key: listaTablaSimbolos.keySet()){
            System.out.println("-------------------------");
            System.out.println("Tabla de símbolos: "+key);
            System.out.println("Valores: ");
            for(String item: listaTablaSimbolos.get(key)){
                System.out.println(item);
            }
            System.out.println("");
        }
    }

     /* Método que se encarga de imprimir el string buffer del código intermedio 3 direcciones en la terminal.
        Entradas: Ninguna
        Salidas: Ninguna
        Restricciones: Ninguna
    */
    private void imprimirCodigo3D(){
        System.out.println("++++++++ CODIGO 3D +++++++++");
        System.out.println("");
        System.out.println(codIn3D.toString());
    }


    /* Método que se encarga de imprimir el string buffer del código MIPS en la terminal.
        Entradas: Ninguna
        Salidas: Ninguna
        Restricciones: Ninguna
    */
    private void imprimirCodigoMIPS(){
        System.out.println("++++++++ CODIGO MIPS +++++++++");
        System.out.println("");
        System.out.println(".data\n");
        System.out.println(mipsData.toString());
        System.out.println(".text\n");
        System.out.println(".globl main\n");
        System.out.println(mipsMain.toString());
        System.out.println("   li $v0, 10");
        System.out.println("   syscall");
    }

    /* Método que se encarga de imprimir el string buffer del código MIPS en un archivo .asm.
        Entradas: Ninguna
        Salidas: Ninguna
        Restricciones: Ninguna
    */
    private int addMipsTemp(){
        if (mipsTemp == 9){
            mipsTemp = 0;
        }else{
            mipsTemp++;
        }
        return mipsTemp;
    }

    /*
        Método que se encarga de retornar la tabla de símbolos
        Entradas: Ninguna
        Salidas: tabla de símbolos
        Restricciones: Ninguna
    */
    public HashMap<String, ArrayList<String>> getTablaSimbolos(){
        return listaTablaSimbolos;
    }

    /* Método que se encarga de imprimir en consola el error sintáctico
        Entradas: String error. Error que se va a imprimir
        Salidas: Ninguna. Imprime en consola el error
        Restricciones: Ninguna
    */
    private void manejoError(String error, String tipoError){
        errores = true;
        System.out.println("Error "+tipoError+": "+ error );
        System.out.println("Se continua con el análisis "+tipoError);
    } 

    /* Método que se encarga de buscar en la tabla de símbolos actual un ID y devolver su tipo.
        Entradas: lista: lista de elementos de la tabla de símbolos actual, idBuscado: ID que se requiere buscar y queBusca: si busca el ID de una variable o de una función. 
        Salidas: String o null
        Restricciones: Ninguna
    */
     private String buscarID_o_tipoID(ArrayList<String> tablaSimbolos, String idBuscado, String queBusca) {
        int treeSize = hashTree.indexOf(hashTree.get(currentHashPos));
        for (int i = treeSize; i >= 0; i--) {
            tablaSimbolos = listaTablaSimbolos.get(hashTree.get(i));
            if(queBusca.equals("id")){
                // Recorre los elementos del ArrayList
                for (String elemento : tablaSimbolos) {
                    // Divide el elemento en ID y tipo
                    String[] partes = elemento.split(": ");
                    if (partes[0].equals(idBuscado)) { // Verifica si el ID coincide con el ID buscado
                        return partes[1]; // Se encontró el ID y se envía el tipo del ID
                    }
                    if (partes[0].equals("Parámetro") && partes[1].equals(idBuscado)) { // Verifica si el ID coincide con el ID buscado
                        return partes[2].trim(); // Se encontró el ID y se envía el tipo del ID
                    }	
                }
            }
            else if(queBusca.equals("funcion")){
                // Recorre los elementos del ArrayList
                for (String elemento : tablaSimbolos) {
                    // Divide el elemento en ID y tipo
                    String[] partes = elemento.split(":");
                
                    if (partes[1].equals(idBuscado)) { // Verifica si el ID coincide con el ID buscado
                        return partes[2]; // Se encontró el ID de la función y se envía el tipo de la función
                    }
                }
            }
            else if(queBusca.equals("tamañoArray")){
                // Recorre los elementos del ArrayList
                for (String elemento : tablaSimbolos) {
                    // Divide el elemento en ID y tipo
                    String[] partes = elemento.split(": ");
                
                    if (partes[0].equals(idBuscado)) { // Verifica si el ID coincide con el ID buscado
                        return partes[2]; // Se encontró el ID de la función y se envía el tipo de la función
                    }
                }

            }
        }
        return null;       
    }

    private ArrayList<String> obtenerParametrosFuncion(String funcion){
        Collection<ArrayList<String>> valores = listaTablaSimbolos.values();
        ArrayList<String> parametros = new ArrayList<String>();
        for (ArrayList<String> tablaSimbolos : valores){
            // Recorre los elementos del ArrayList
            for (int i = 0; i < tablaSimbolos.size(); i++) {
                String elemento = tablaSimbolos.get(i);
                // Divide el elemento en ID y tipo
                String[] partes = elemento.split(":");
                if (partes[0].equals("tipo") && partes[2].equals(funcion)) { // Verifica si el ID coincide con el ID buscado
                    for (int j = i+1; j < tablaSimbolos.size(); j++){
                        String linea = tablaSimbolos.get(j); // Se encontró el ID de la función y se envía el tipo de la función
                        if(linea.contains("Parámetro")){
                            parametros.add(linea);
                        }
                    }
                    if (parametros.size() != 0){
                        return parametros;
                    }
                }
            }
        }
        return null;   
    }
    /*  Método que se encarga de verificar si todos los elementos de una lista tienen el mismo tipo de dato.
        Entradas: lista: lista de elementos en donde cada elemento contiene un string tipo: "elemento: tipo de dato". 
        Salidas: boolean, true o false.
        Restricciones: La lista NO puede estar vacía.
    */

    private String verificarTipo_elementosArray(ArrayList<String> lista, String tipoArray){

        for (int i = 0; i < lista.size(); i++) {
            String elemento = lista.get(i);
            String[] partesElemento = elemento.split(": ");
            String tipoDatoElemento = partesElemento[1].trim();

            if (!tipoDatoElemento.equals("error_semantico")){
                if (!tipoDatoElemento.equals(tipoArray)) {
                    return partesElemento[0]; // Los tipos de datos NO son iguales
                }
            }
            else{
                return "error_semantico";
            }  
        }
        return null; // Todos los elementos tienen el mismo tipo de dato
    }
    

  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // INICIO ::= PROGRAMA 
            {
              Object RESULT =null;
		 /*imprimirTablaSimbolos();*/ imprimirCodigo3D(); imprimirCodigoMIPS();
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",81, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // PROGRAMA ::= VALORESPROGRAMA FUNCMAIN VALORESPROGRAMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",80, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // PROGRAMA ::= VALORESPROGRAMA FUNCMAIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",80, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // PROGRAMA ::= FUNCMAIN VALORESPROGRAMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",80, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // PROGRAMA ::= FUNCMAIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",80, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // VALORESPROGRAMA ::= VALORPROGRAMA VALORESPROGRAMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESPROGRAMA",79, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // VALORPROGRAMA ::= COMENTARIOS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORPROGRAMA",77, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // VALORPROGRAMA ::= GLOBALVAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORPROGRAMA",77, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // VALORPROGRAMA ::= CREAFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORPROGRAMA",77, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // GLOBALVAR ::= CREAASIGVARSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",76, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // GLOBALVAR ::= CREAVARSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",76, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // GLOBALVAR ::= CREAASIGVARCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",76, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // GLOBALVAR ::= CREAVARCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",76, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // GLOBALVAR ::= CREAASIGVARBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",76, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // GLOBALVAR ::= CREAVARBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",76, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // GLOBALVAR ::= CREAASIGVARFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",76, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // GLOBALVAR ::= CREAVARFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",76, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // GLOBALVAR ::= CREAASIGVARINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",76, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // GLOBALVAR ::= CREAVARINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",76, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // VALORESBLOQUECODIGO ::= SENTLLAMARFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBLOQUECODIGO",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // VALORESBLOQUECODIGO ::= SENTRETURN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBLOQUECODIGO",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // VALORESBLOQUECODIGO ::= RESERVBREAK ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBLOQUECODIGO",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // VALORESBLOQUECODIGO ::= ESTRUCTCONTROL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBLOQUECODIGO",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // VALORESBLOQUECODIGO ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBLOQUECODIGO",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // ESTRUCTCONTROL ::= ESTRUCTWHILE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTCONTROL",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ESTRUCTCONTROL ::= ESTRUCTFORRANGE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTCONTROL",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ESTRUCTCONTROL ::= ESTRUCTSWITCH 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTCONTROL",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ESTRUCTCONTROL ::= ESTRUCTIF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTCONTROL",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // SENTENCIA ::= FUNCESCRIBIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // SENTENCIA ::= FUNCLEER 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SENTENCIA ::= VARIABLES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SENTLLAMARFUNC ::= LLAMARFUNC ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTLLAMARFUNC",75, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // LLAMARFUNC ::= IDENTIFICADOR SIGABREPARENT SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LLAMARFUNC",74, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // LLAMARFUNC ::= IDENTIFICADOR SIGABREPARENT PARAMLLAMAFUNC SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LLAMARFUNC",74, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // PARAMLLAMAFUNC ::= PARAMLLAMARFUNC COMA PARAMLLAMAFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMAFUNC",73, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // PARAMLLAMAFUNC ::= PARAMLLAMARFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMAFUNC",73, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // PARAMLLAMARFUNC ::= LLAMARFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMARFUNC",72, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // PARAMLLAMARFUNC ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = id; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMARFUNC",72, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // PARAMLLAMARFUNC ::= LITBOOL 
            {
              Object RESULT =null;
		int litboolleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litboolright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litbool = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litbool+": "+"bool"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMARFUNC",72, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // PARAMLLAMARFUNC ::= LITCHAR 
            {
              Object RESULT =null;
		int litcharleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litcharright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litchar = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litchar+": "+"char"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMARFUNC",72, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // PARAMLLAMARFUNC ::= LITFLOAT 
            {
              Object RESULT =null;
		int litfloatleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litfloatright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litfloat = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litfloat.toString()+": "+"float"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMARFUNC",72, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // PARAMLLAMARFUNC ::= LITINT 
            {
              Object RESULT =null;
		int litIntleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litIntright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litInt = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litInt.toString()+": "+"int"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMARFUNC",72, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // INIFUN ::= TIPORETORNO IDENTIFICADOR 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                    String tipoTabla = "tipo:funcion:"+id.toString()+": "+tip.toString();
                    if((!(tip.toString().equals("int"))) && (!(tip.toString().equals("float"))) && (!(tip.toString().equals("bool")))){
                        currentHash = id.toString();
                        hashTree.addLast(currentHash);
                        manejoError("El tipo de dato de retorno de la función "+id.toString()+" no es valido", "semántico");
                    }else{
                        if(existeFuncion(id.toString()) == null){
                             ArrayList<String> listaSimbolos = new ArrayList<String>();
                             currentHash = id.toString();
                             listaSimbolos.add(tipoTabla);
                             hashTree.addLast(currentHash);
                             listaTablaSimbolos.put(currentHash, listaSimbolos);
                             RESULT = tip.toString()+" "+id.toString();
                             codIn3D.append("\n_"+id.toString()+"_begin:");
                             mipsMain.append("\n"+id.toString()+":");
                        }
                        else{
                             currentHash = id.toString();
                             hashTree.addLast(currentHash);
                             manejoError("Función "+id.toString()+" ya existe", "semántico");
                        }
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INIFUN",78, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // TIPORETORNO ::= TIPOBOOL 
            {
              Object RESULT =null;
		 RESULT = "bool";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPORETORNO",85, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // TIPORETORNO ::= TIPOFLOAT 
            {
              Object RESULT =null;
		 RESULT = "float";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPORETORNO",85, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // TIPORETORNO ::= TIPOINT 
            {
              Object RESULT =null;
		 RESULT = "int";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPORETORNO",85, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CREAFUNC ::= INIFUN PARAMFUNCIONES SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES 
            {
              Object RESULT =null;
		  
                    codIn3D.append("\n_"+hashTree.getLast()+"_end:"); 
                    hashTree.removeLast(); 
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAFUNC",69, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // INIFUNMAIN ::= TIPOINT SEPARADOR RESERVMAIN 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                    String tipoTabla;
                    if(id.toString().equals("main")){
                     tipoTabla = "tipo:funcion:"+id.toString()+": "+tip.toString();
                    }
                    else{
                     tipoTabla = "tipo:funcion:"+id.toString()+": "+tip.toString();
                    }
                    if(existeFuncion(id.toString()) == null){
                         ArrayList<String> listaSimbolos = new ArrayList<String>();
                         currentHash = id.toString();
                         listaSimbolos.add(tipoTabla);
                         hashTree.addLast(currentHash);
                         listaTablaSimbolos.put(currentHash, listaSimbolos);
                         RESULT = tip.toString()+" "+id.toString();
                         codIn3D.append("\n_"+id.toString()+"_begin:");
                         mipsMain.append("\n"+id.toString()+":");
                    }
                    else{
                         currentHash = id.toString();
                         hashTree.addLast(currentHash);
                         manejoError("Función "+id.toString()+" ya existe", "semántico");
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INIFUNMAIN",83, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // FUNCMAIN ::= INIFUNMAIN PARAMFUNCIONES SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES 
            {
              Object RESULT =null;
		  
                    codIn3D.append("\n_main_end:"); 
                    hashTree.removeLast(); 
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCMAIN",68, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // PARAMFUNCIONES ::= SIGABREPARENT SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCIONES",67, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // PARAMFUNCIONES ::= SIGABREPARENT PARAMETROFUNCION SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCIONES",67, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // PARAMETROFUNCION ::= PARMFUNC COMA PARAMETROFUNCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETROFUNCION",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // PARAMETROFUNCION ::= PARMFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETROFUNCION",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // PARMFUNC ::= TIPOSPARAM SEPARADOR IDENTIFICADOR 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARMFUNC",71, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // TIPOSPARAM ::= TIPOCHAR 
            {
              Object RESULT =null;
		 RESULT = "char";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPOSPARAM",66, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // TIPOSPARAM ::= TIPOBOOL 
            {
              Object RESULT =null;
		 RESULT = "bool";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPOSPARAM",66, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // TIPOSPARAM ::= TIPOFLOAT 
            {
              Object RESULT =null;
		 RESULT = "float";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPOSPARAM",66, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // TIPOSPARAM ::= TIPOINT 
            {
              Object RESULT =null;
		 RESULT = "int";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPOSPARAM",66, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ESTRUCTSWITCH ::= RESERVSWITCH SIGABREPARENT IDENTIFICADOR SIGCIERRAPARENT SIGABRELLAVES CASES DEFAULT SIGCIERRALLAVES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTSWITCH",65, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DEFAULT ::= RESERVDEFAULT DOSPUNTOS BLOQUECODIGO SENTBREAK 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DEFAULT",64, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CASES ::= CASE CASES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASES",63, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CASES ::= CASE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASES",63, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CASE ::= RESERVCASE SEPARADOR LITERAL DOSPUNTOS BLOQUECODIGO SENTBREAK 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASE",62, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // LITERAL ::= LITSTRING 
            {
              Object RESULT =null;
		int litstringleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litstringright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litstring = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litstring+": "+"string"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITERAL",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // LITERAL ::= LITCHAR 
            {
              Object RESULT =null;
		int litcharleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litcharright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litchar = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litchar+": "+"char"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITERAL",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // LITERAL ::= LITFLOAT 
            {
              Object RESULT =null;
		int litfloatleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litfloatright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litfloat = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litfloat.toString()+": "+"float"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITERAL",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // LITERAL ::= LITINT 
            {
              Object RESULT =null;
		int litIntleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litIntright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litInt = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litInt.toString()+": "+"int"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITERAL",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ESTRUCTWHILE ::= RESERVWHILE CONDICIONES SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES ESTRUCTELSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTWHILE",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ESTRUCTWHILE ::= RESERVWHILE CONDICIONES SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTWHILE",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // INICIOFOR ::= 
            {
              Object RESULT =null;
		 
                            String tipoTabla = "tipo:ciclo:for";
                            ArrayList<String> listaSimbolos = new ArrayList<String>();
                            fatherCurrentHash = currentHash;
                            currentHash = "for_"+(++contador_for)+"_"+fatherCurrentHash;
                            listaSimbolos.add(tipoTabla);
                            hashTree.addLast(currentHash);
                            currentHashPos++;
                            listaTablaSimbolos.put(currentHash, listaSimbolos);
                            codIn3D.append("\n_begin_for_"+(contador_for)+":");
                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIOFOR",84, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ESTRUCTFORRANGE ::= INICIOFOR RESERVFORRANGE SIGABREPARENT CONDICIONALFOR SIGCIERRAPARENT SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES 
            {
              Object RESULT =null;
		int resvleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int resvright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object resv = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTFORRANGE",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CONDICIONALFOR ::= PARAMFORRANGE 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 
                            if(params.equals("error_semantico")){
                                RESULT = params;
                            }else{
                                System.out.println(params);
                            }
                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICIONALFOR",70, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PARAMFORRANGE ::= PARAMFORRANGETRES 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = params; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFORRANGE",58, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PARAMFORRANGE ::= PARAMFORRANGEDOS 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = params; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFORRANGE",58, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PARAMFORRANGE ::= PARAMFORRANGEUNO 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = params; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFORRANGE",58, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PARAMFORRANGETRES ::= VALORESARIT ENDLINE VALORESARIT ENDLINE VALORESARIT 
            {
              Object RESULT =null;
		int param1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object param1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int param3left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int param3right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object param3 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		  
                            String[] partes_valor = param1.toString().split(": ");
                            String[] partes_valor2 = param2.toString().split(": ");
                            String[] partes_valor3 = param3.toString().split(": ");
                            boolean errores = false;
                            if ((!partes_valor[1].equals("int")) && (!partes_valor[1].equals("var"))){
                                //Manejo error semántico
                                errores = true;
                                manejoError(" El parametro: '"+ partes_valor[0] +"' es de un tipo incorrecto para un parametro del 'forRange', dentro de "+currentHash, "semántico");
                                RESULT = "error_semantico";
                            }else{
                                if (partes_valor[1].equals("var")){
                                    String tipo = buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), partes_valor[0], "id");
                                    if(tipo == null){
                                        //Manejo error semántico
                                        errores = true;
                                        manejoError(" El parametro: '"+ partes_valor[0] +"' es de un variable la cual no ha sido definida previamente, dentro de "+currentHash, "semántico");
                                        RESULT = "error_semantico";
                                    }else {
                                        if(!tipo.equals("int")){
                                            //Manejo error semántico
                                            errores = true;
                                            manejoError(" El parametro: '"+ partes_valor[0] +"' el tipo de dato de la variable no es correcto, dentro de "+currentHash, "semántico");
                                            RESULT = "error_semantico";
                                        }
                                    }
                                }
                            }
                            //validaciones param2
                            if ((!partes_valor2[1].equals("int")) && (!partes_valor2[1].equals("var"))){
                                //Manejo error semántico
                                errores = true;
                                manejoError(" El parametro: '"+ partes_valor2[0] +"' es de un tipo incorrecto para un parametro del 'forRange', dentro de "+currentHash, "semántico");
                                RESULT = "error_semantico";
                            }else{
                                if (partes_valor2[1].equals("var")){
                                    String tipo = buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), partes_valor2[0], "id");
                                    if(tipo == null){
                                        //Manejo error semántico
                                        errores = true;
                                        manejoError(" El parametro: '"+ partes_valor2[0] +"' es de un variable la cual no ha sido definida previamente, dentro de "+currentHash, "semántico");
                                        RESULT = "error_semantico";
                                    }else {
                                        if(!tipo.equals("int")){
                                            //Manejo error semántico
                                            errores = true;
                                            manejoError(" El parametro: '"+ partes_valor2[0] +"' el tipo de dato de la variable no es correcto, dentro de "+currentHash, "semántico");
                                            RESULT = "error_semantico";
                                        }
                                    }
                                }
                            }
                            //validaciones param3
                            if ((!partes_valor3[1].equals("int")) && (!partes_valor3[1].equals("var"))){
                                //Manejo error semántico
                                errores = true;
                                manejoError(" El parametro: '"+ partes_valor3[0] +"' es de un tipo incorrecto para un parametro del 'forRange', dentro de "+currentHash, "semántico");
                                RESULT = "error_semantico";
                            }else{
                                if (partes_valor3[1].equals("var")){
                                    String tipo = buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), partes_valor3[0], "id");
                                    if(tipo == null){
                                        //Manejo error semántico
                                        errores = true;
                                        manejoError(" El parametro: '"+ partes_valor3[0] +"' es de un variable la cual no ha sido definida previamente, dentro de "+currentHash, "semántico");
                                        RESULT = "error_semantico";
                                    }else {
                                        if(!tipo.equals("int")){
                                            //Manejo error semántico
                                            errores = true;
                                            manejoError(" El parametro: '"+ partes_valor3[0] +"' el tipo de dato de la variable no es correcto, dentro de "+currentHash, "semántico");
                                            RESULT = "error_semantico";
                                        }
                                    }
                                }
                            }
                            if(!errores){ 
                                RESULT = partes_valor[0]+": " + partes_valor2[0] +": " + partes_valor3[0]; 
                            }
                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFORRANGETRES",57, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // PARAMFORRANGEDOS ::= VALORESARIT ENDLINE VALORESARIT 
            {
              Object RESULT =null;
		int param1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object param1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		  
                            String[] partes_valor = param1.toString().split(": ");
                            String[] partes_valor2 = param2.toString().split(": ");
                            boolean errores = false;
                            if ((!partes_valor[1].equals("int")) && (!partes_valor[1].equals("var"))){
                                //Manejo error semántico
                                errores = true;
                                manejoError(" El parametro: '"+ partes_valor[0] +"' es de un tipo incorrecto para un parametro del 'forRange', dentro de "+currentHash, "semántico");
                                RESULT = "error_semantico";
                            }else{
                                if (partes_valor[1].equals("var")){
                                    String tipo = buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), partes_valor[0], "id");
                                    if(tipo == null){
                                        //Manejo error semántico
                                        errores = true;
                                        manejoError(" El parametro: '"+ partes_valor[0] +"' es de un variable la cual no ha sido definida previamente, dentro de "+currentHash, "semántico");
                                        RESULT = "error_semantico";
                                    }else {
                                        if(!tipo.equals("int")){
                                            //Manejo error semántico
                                            errores = true;
                                            manejoError(" El parametro: '"+ partes_valor[0] +"' el tipo de dato de la variable no es correcto, dentro de "+currentHash, "semántico");
                                            RESULT = "error_semantico";
                                        }
                                    }
                                }
                            }
                            //validaciones param2
                            if ((!partes_valor2[1].equals("int")) && (!partes_valor2[1].equals("var"))){
                                //Manejo error semántico
                                errores = true;
                                manejoError(" El parametro: '"+ partes_valor2[0] +"' es de un tipo incorrecto para un parametro del 'forRange', dentro de "+currentHash, "semántico");
                                RESULT = "error_semantico";
                            }else{
                                if (partes_valor2[1].equals("var")){
                                    String tipo = buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), partes_valor2[0], "id");
                                    if(tipo == null){
                                        //Manejo error semántico
                                        errores = true;
                                        manejoError(" El parametro: '"+ partes_valor2[0] +"' es de un variable la cual no ha sido definida previamente, dentro de "+currentHash, "semántico");
                                        RESULT = "error_semantico";
                                    }else {
                                        if(!tipo.equals("int")){
                                            //Manejo error semántico
                                            errores = true;
                                            manejoError(" El parametro: '"+ partes_valor2[0] +"' el tipo de dato de la variable no es correcto, dentro de "+currentHash, "semántico");
                                            RESULT = "error_semantico";
                                        }
                                    }
                                }
                            }
                            if(!errores){ 
                                RESULT = partes_valor[0]+": " + "1".toString()+": " + partes_valor2[0]; 
                            }
                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFORRANGEDOS",56, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PARAMFORRANGEUNO ::= VALORESARIT 
            {
              Object RESULT =null;
		int param1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object param1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		  
                            String[] partes_valor = param1.toString().split(": ");
                            boolean errores = false;
                            if ((!partes_valor[1].equals("int")) && (!partes_valor[1].equals("var"))){
                                //Manejo error semántico
                                errores = true;
                                manejoError(" El parametro: '"+ partes_valor[0] +"' es de un tipo incorrecto para un parametro del 'forRange', dentro de "+currentHash, "semántico");
                                RESULT = "error_semantico";
                            }else{
                                if (partes_valor[1].equals("var")){
                                    String tipo = buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), partes_valor[0], "id");
                                    if(tipo == null){
                                        //Manejo error semántico
                                        errores = true;
                                        manejoError(" El parametro: '"+ partes_valor[0] +"' es de un variable la cual no ha sido definida previamente, dentro de "+currentHash, "semántico");
                                        RESULT = "error_semantico";
                                    }else {
                                        if(tipo.equals("int")){
                                            RESULT = "1".toString()+": " + "1".toString()+": " + partes_valor[0];
                                        }else{
                                            //Manejo error semántico
                                            errores = true;
                                            manejoError(" El parametro: '"+ partes_valor[0] +"' el tipo de dato de la variable no es correcto, dentro de "+currentHash, "semántico");
                                            RESULT = "error_semantico";
                                        }
                                    }
                                }else{
                                    RESULT = "1".toString()+": " + "1".toString()+": " + partes_valor[0];
                                }
                            }
                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFORRANGEUNO",55, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FINIF ::= 
            {
              Object RESULT =null;
		    
                            int diferencia = contador_if - contador_fin_if;                            
                            if (diferencia != 0 ){
                                if(contador_if_anidados == 0){contador_if_anidados = diferencia+1;}
                                codIn3D.append("\n_end_if_"+(contador_fin_if + contador_if_anidados-1)+":");
                                mipsMain.append("\n_end_if_"+(contador_fin_if + contador_if_anidados-1)+":");
                                contador_if_anidados -= 1;
                                if(contador_if_anidados == 0){                            
                                    contador_fin_if = contador_if+1;
                                    contador_if_anidados = 0;
                                }
                            }else{
                                codIn3D.append("\n_end_if_"+(contador_if)+":");
                                mipsMain.append("\n_end_if_"+(contador_if)+":");
                                contador_fin_if += 1;  
                            }      
                            //contador_fin_if += 1;  
                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FINIF",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // INICIOIF ::= RESERVIF SEPARADOR 
            {
              Object RESULT =null;
		int reservleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int reservright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object reserv = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 
                            String tipoTabla = "tipo:condicional:if";
                            ArrayList<String> listaSimbolos = new ArrayList<String>();
                            fatherCurrentHash = currentHash;
                            currentHash = "if_"+(++contador_if)+"_"+ hashTree.get(currentHashPos);
                            listaSimbolos.add(tipoTabla);
                            hashTree.addLast(currentHash);
                            currentHashPos++;
                            listaTablaSimbolos.put(currentHash, listaSimbolos);
                            codIn3D.append("\n_if_" + contador_if + ":");
                            mipsMain.append("\n_if_" + contador_if + ":");
                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIOIF",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ESTRUCTIF ::= INICIOIF CONDICIONES SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES FINIF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTIF",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ESTRUCTIF ::= INICIOIF CONDICIONES SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES ESTRUCTELSE FINIF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTIF",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ESTRUCTELSE ::= RESERVELSE SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTELSE",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // BLOQUECODIGO ::= COMENTARIOS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUECODIGO",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // BLOQUECODIGO ::= VALORESBLOQUECODIGO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUECODIGO",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // BLOQUECODIGO ::= VALORESBLOQUECODIGO BLOQUECODIGO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUECODIGO",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CONDICIONES ::= SIGABREPARENT VALORESCONDI SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICIONES",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VALORESCONDI ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESCONDI",82, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VALORESCONDI ::= OPERACIONLOGICAS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESCONDI",82, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPERACIONLOGICAS ::= SIGABREPARENT OPERACIONLOGICAS SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONLOGICAS",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OPERACIONLOGICAS ::= OPERACIONLOGICAS OPERADORESLOGICOS OPERANDOSLOGICOS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONLOGICAS",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OPERACIONLOGICAS ::= SIGNEGACION OPERANDOSLOGICOS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONLOGICAS",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPERACIONLOGICAS ::= OPERANDOSLOGICOS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONLOGICAS",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OPERANDOSLOGICOS ::= SIGABREPARENT OPERACIONRELAARIT SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERANDOSLOGICOS",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPERANDOSLOGICOS ::= SEPARADOR IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERANDOSLOGICOS",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPERANDOSLOGICOS ::= LITBOOL 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERANDOSLOGICOS",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERACIONRELAARIT ::= VALORESARIT OPERADORESRELA VALORESARIT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONRELAARIT",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPERACIONRELAARIT ::= VALORESARIT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONRELAARIT",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPERADORESRELA ::= OPERADORESBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESRELA",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPERADORESRELA ::= SIGMAYORIGUAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESRELA",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPERADORESRELA ::= SIGMAYOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESRELA",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPERADORESRELA ::= SIGMENORIGUAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESRELA",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPERADORESRELA ::= SIGMENOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESRELA",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPERACIONBOOL ::= OPERANDOBOOLEANO OPERADORESBOOL OPERANDOBOOLEANO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONBOOL",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERANDOBOOLEANO ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERANDOBOOLEANO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERANDOBOOLEANO ::= LITBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERANDOBOOLEANO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERADORESBOOL ::= SIGDIFERENTE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESBOOL",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERADORESBOOL ::= IGUAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESBOOL",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FUNCESCRIBIR ::= FUNCESCRIBIRID 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIR",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FUNCESCRIBIR ::= FUNCESCRIBIRSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIR",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FUNCESCRIBIR ::= FUNCESCRIBIRFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIR",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FUNCESCRIBIR ::= FUNCESCRIBIRINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIR",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FUNCESCRIBIRID ::= RESERVESCRIBIR SIGABREPARENT IDENTIFICADOR SIGCIERRAPARENT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIRID",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FUNCESCRIBIRSTRING ::= RESERVESCRIBIR SIGABREPARENT LITSTRING SIGCIERRAPARENT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIRSTRING",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FUNCESCRIBIRFLOAT ::= RESERVESCRIBIR SIGABREPARENT LITFLOAT SIGCIERRAPARENT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIRFLOAT",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FUNCESCRIBIRINT ::= RESERVESCRIBIR SIGABREPARENT LITINT SIGCIERRAPARENT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIRINT",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FUNCLEER ::= RESERVLEER SIGABREPARENT IDENTIFICADOR SIGCIERRAPARENT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCLEER",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VARIABLES ::= OPERACIONUNARIA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLES",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VARIABLES ::= VARIABLESSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLES",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VARIABLES ::= VARIABLESCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLES",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VARIABLES ::= VARIABLESBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLES",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VARIABLES ::= VARIABLESFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLES",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VARIABLES ::= VARIABLESINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLES",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VARIABLESSTRING ::= CREAASIGVARSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESSTRING",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VARIABLESSTRING ::= CREAVARSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESSTRING",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CREAASIGVARSTRING ::= TIPOSTRING SEPARADOR IDENTIFICADOR SIGNOIGUAL VALORESSTRING ENDLINE 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 // ++++ Análisis semántico ++++
                    String ladoIzqTipo = tip.toString();
                    String ladoIzqId = id.toString();
                    String[] partes_dato = dato.toString().split(": ");

                    if ((ladoIzqTipo.equals(partes_dato[1])) || (partes_dato[1].equals("var"))){
                         if(!(ladoIzqTipo.equals(partes_dato[1])) && buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_dato[0].toString(), "id") == null){
                            //Manejo error semántico
                            manejoError("'" + tip +" # "+ id + " = " + partes_dato[0] + ";' " + "El ID: '"+ partes_dato[0] +"' no ha sido creado anteriormente", "semántico");
                            RESULT = "error_semantico";
                        }else{
                            if (!(ladoIzqTipo.equals(partes_dato[1])) && !(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_dato[0], "id").equals("string"))){
                                //Manejo error semántico
                                manejoError("'" + tip +" # "+ id + " = " + partes_dato[0] + ";' " + "La variable: '"+ partes_dato[0] +"' no es de tipo String", "semántico");
                                RESULT = "error_semantico";
                            }else{
                                if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null ) {
                                    // ++++ Código 3D ++++
                                    String temp = "t"+(currentTemp++); 
                                    if (currentTemp == 10){
                                        currentTemp = 0;
                                    }
                                    codIn3D.append("\ndataString "+ladoIzqId+" = "+partes_dato[0].toString());
                                    mipsData.append("   " + ladoIzqId+": ."+"asciiz \"\""+"\n");

                                    String mipsAsignation = "li $"+temp+", "+ partes_dato[0];
                                    mipsMain.append("\n   "+mipsAsignation);

                                    mipsAsignation = "sw "+temp+", "+ladoIzqId.toString();                            
                                    mipsMain.append("\n   "+mipsAsignation);
                                    RESULT = "string ::"+temp; 

                                    // +++ Tabla de símbolos ++++ 
                                    listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                                    RESULT = id.toString()+": "+tip.toString();
                                }else{
                                    //Manejo error semántico
                                    manejoError("'" + tip +" # "+ id + " = " + partes_dato[0] + ";' " + "El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+currentHash, "semántico");
                                    RESULT = "error_semantico";
                                }
                            }
                        }
                    }else{
                        //Manejo error semántico
                        manejoError("El ID: "+ ladoIzqId.toString() +" no ha sido creado dentro de la función", "semántico");
                        RESULT = "error_semantico";
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAASIGVARSTRING",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CREAVARSTRING ::= TIPOSTRING SEPARADOR IDENTIFICADOR ENDLINE 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		   
                    // ++++ Análisis semántico ++++
                    if(fatherCurrentHash != null && buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), id.toString(), "id") == null){
                        if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null ) {
                            // ++++ Código 3D ++++
                            codIn3D.append("\ndataString"+" "+id.toString());
                            mipsData.append("   " + id.toString()+": ."+"asciiz \"\""+"\n");

                            // +++ Tabla de símbolos ++++ 
                            listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                            RESULT = id.toString()+": "+tip.toString();
                        }
                        else{
                            //Manejo error semántico
                            manejoError("El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+currentHash, "semántico");
                            RESULT = "error_semantico";
                        }
                    }
                    else if(fatherCurrentHash == null && buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null){
                            // ++++ Código 3D ++++
                            codIn3D.append("\ndataString"+" "+id.toString());
                            mipsData.append("   " + id.toString()+": ."+"asciiz \"\""+"\n");

                            // +++ Tabla de símbolos ++++ 
                            listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                            RESULT = id.toString()+": "+tip.toString();
                    }
                    else{
                        //Manejo error semántico
                        manejoError("El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+fatherCurrentHash, "semántico");
                        RESULT = "error_semantico";
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAVARSTRING",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VALORESSTRING ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = id+": "+"var"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESSTRING",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VALORESSTRING ::= LITSTRING 
            {
              Object RESULT =null;
		int litStringleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litStringright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litString = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litString.toString()+": "+"string"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESSTRING",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VARIABLESCHAR ::= CREAASIGVARCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESCHAR",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VARIABLESCHAR ::= CREAVARCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESCHAR",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CREAASIGVARCHAR ::= TIPOCHAR SEPARADOR IDENTIFICADOR SIGNOIGUAL VALORESCHAR ENDLINE 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 // ++++ Análisis semántico ++++
                    String ladoIzqTipo = tip.toString();
                    String ladoIzqId = id.toString();
                    String[] partes_dato = dato.toString().split(": ");
                    
                    if ((ladoIzqTipo.equals(partes_dato[1])) || (partes_dato[1].equals("var"))){
                         if(!(ladoIzqTipo.equals(partes_dato[1])) && buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_dato[0].toString(), "id") == null){
                            //Manejo error semántico
                            manejoError("'" + tip +" # "+ id + " = " + partes_dato[0] + ";' " + "El ID: '"+ partes_dato[0] +"' no ha sido creado anteriormente", "semántico");
                            RESULT = "error_semantico";
                        }else{
                            if (!(ladoIzqTipo.equals(partes_dato[1])) && !(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_dato[0], "id").equals("char"))){
                                //Manejo error semántico
                                manejoError("'" + tip +" # "+ id + " = " + partes_dato[0] + ";' " + "La variable: '"+ partes_dato[0] +"' no es de tipo char", "semántico");
                                RESULT = "error_semantico";
                            }else{
                                if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null ) {
                                    // ++++ Código 3D ++++
                                    String temp = "t"+(currentTemp++); 
                                    if (currentTemp == 10){
                                        currentTemp = 0;
                                    }
                                    codIn3D.append("\ndataChar "+ladoIzqId+" = "+partes_dato[0].toString());
                                    mipsData.append("   " + ladoIzqId+": ."+"byte 0"+"\n");

                                    String mipsAsignation = "li $"+temp+", "+ partes_dato[0];
                                    mipsMain.append("\n   "+mipsAsignation);

                                    mipsAsignation = "sw "+temp+", "+ladoIzqId.toString();                            
                                    mipsMain.append("\n   "+mipsAsignation);
                                    RESULT = "char ::"+temp; 

                                    // +++ Tabla de símbolos ++++ 
                                    listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                                    RESULT = id.toString()+": "+tip.toString();
                                }else{
                                    //Manejo error semántico
                                    manejoError("'" + tip +" # "+ id + " = " + partes_dato[0] + ";' " + "El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+currentHash, "semántico");
                                    RESULT = "error_semantico";
                                }
                            }
                        }
                    }else{
                        //Manejo error semántico
                        manejoError("El ID: "+ ladoIzqId.toString() +" no ha sido creado dentro de la función", "semántico");
                        RESULT = "error_semantico";
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAASIGVARCHAR",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CREAVARCHAR ::= TIPOCHAR SEPARADOR IDENTIFICADOR ENDLINE 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		   // ++++ Análisis semántico ++++
                    if(fatherCurrentHash != null && buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), id.toString(), "id") == null){
                        if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null ) {
                            // ++++ Código 3D ++++
                            codIn3D.append("\ndataChar"+" "+id.toString());
                            mipsData.append("   " + id.toString()+": ."+"byte 0"+"\n");

                            // +++ Tabla de símbolos ++++ 
                            listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                            RESULT = id.toString()+": "+tip.toString();
                        }
                        else{
                            //Manejo error semántico
                            manejoError("El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+currentHash, "semántico");
                            RESULT = "error_semantico";
                        }
                    }
                    else if(fatherCurrentHash == null && buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null){
                            // ++++ Código 3D ++++
                            codIn3D.append("\ndataChar"+" "+id.toString());
                            mipsData.append("   " + id.toString()+": ."+"byte 0"+"\n");

                            // +++ Tabla de símbolos ++++ 
                            listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                            RESULT = id.toString()+": "+tip.toString();
                    }
                    else{
                        //Manejo error semántico
                        manejoError("El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+fatherCurrentHash, "semántico");
                        RESULT = "error_semantico";
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAVARCHAR",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VALORESCHAR ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = id+": "+"var"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESCHAR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VALORESCHAR ::= LITCHAR 
            {
              Object RESULT =null;
		int litCharleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litCharright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litChar = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litChar.toString()+": "+"char"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESCHAR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VARIABLESBOOL ::= CREAASIGVARBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESBOOL",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VARIABLESBOOL ::= CREAVARBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESBOOL",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CREAASIGVARBOOL ::= TIPOBOOL SEPARADOR IDENTIFICADOR SIGNOIGUAL SIGNEGACION VALORESBOOL ENDLINE 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		// ++++ Análisis semántico ++++
                                String ladoIzqTipo = tip.toString();
                                String ladoIzqId = id.toString();
                                String[] partes_dato = dato.toString().split(": ");

                                if ((ladoIzqTipo.equals(partes_dato[1])) || (partes_dato[1].equals("var"))){
                                     if(!(ladoIzqTipo.equals(partes_dato[1])) && buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_dato[0].toString(), "id") == null){
                                        //Manejo error semántico
                                        manejoError("'" + tip +" # "+ id + " = " + partes_dato[0] + ";' " + "El ID: '"+ partes_dato[0] +"' no ha sido creado anteriormente", "semántico");
                                        RESULT = "error_semantico";
                                    }else{
                                        if (!(ladoIzqTipo.equals(partes_dato[1])) && !(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_dato[0], "id").equals("bool"))){
                                            //Manejo error semántico
                                            manejoError("'" + tip +" # "+ id + " = " + partes_dato[0] + ";' " + "La variable: '"+ partes_dato[0] +"' no es de tipo bool", "semántico");
                                            RESULT = "error_semantico";
                                        }else{
                                            if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null ) {
                                                // ++++ Código 3D ++++
                                                if (currentTemp == 10){
                                                    currentTemp = 0;
                                                }
                                                Boolean datoFinal = false;
                                                if (partes_dato[0].equals(false)){
                                                    datoFinal=true;
                                                }
                                                codIn3D.append("\ndataBool "+ladoIzqId+" = "+datoFinal.toString());
                                                mipsData.append("   " + ladoIzqId+": ."+"word 0"+"\n");

                                                String temp = "t"+(currentTemp++); 
                                                String mipsAsignation = "li $"+temp+", "+ datoFinal.toString();
                                                mipsMain.append("\n   "+mipsAsignation);

                                                mipsAsignation = "sw "+temp+", "+ladoIzqId.toString();                            
                                                mipsMain.append("\n   "+mipsAsignation);
                                                RESULT = "bool ::"+temp; 

                                                // +++ Tabla de símbolos ++++ 
                                                listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                                                RESULT = id.toString()+": "+tip.toString();
                                            }else{
                                                //Manejo error semántico
                                                manejoError("'" + tip +" # "+ id + " = " + partes_dato[0] + ";' " + "El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+currentHash, "semántico");
                                                RESULT = "error_semantico";
                                            }
                                        }
                                    }
                                }else{
                                    //Manejo error semántico
                                    manejoError("El ID: "+ ladoIzqId.toString() +" no ha sido creado dentro de la función", "semántico");
                                    RESULT = "error_semantico";
                                } 
                            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAASIGVARBOOL",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CREAASIGVARBOOL ::= TIPOBOOL SEPARADOR IDENTIFICADOR SIGNOIGUAL VALORESBOOL ENDLINE 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 // ++++ Análisis semántico ++++
                    String ladoIzqTipo = tip.toString();
                    String ladoIzqId = id.toString();
                    String[] partes_dato = dato.toString().split(": ");
                    
                    if ((ladoIzqTipo.equals(partes_dato[1])) || (partes_dato[1].equals("var"))){
                         if(!(ladoIzqTipo.equals(partes_dato[1])) && buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_dato[0].toString(), "id") == null){
                            //Manejo error semántico
                            manejoError("'" + tip +" # "+ id + " = " + partes_dato[0] + ";' " + "El ID: '"+ partes_dato[0] +"' no ha sido creado anteriormente", "semántico");
                            RESULT = "error_semantico";
                        }else{
                            if (!(ladoIzqTipo.equals(partes_dato[1])) && !(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_dato[0], "id").equals("bool"))){
                                //Manejo error semántico
                                manejoError("'" + tip +" # "+ id + " = " + partes_dato[0] + ";' " + "La variable: '"+ partes_dato[0] +"' no es de tipo bool", "semántico");
                                RESULT = "error_semantico";
                            }else{
                                if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null ) {
                                    // ++++ Código 3D ++++
                                    String temp = "t"+(currentTemp++); 
                                    if (currentTemp == 10){
                                        currentTemp = 0;
                                    }
                                    codIn3D.append("\ndataBool "+ladoIzqId+" = "+partes_dato[0].toString());
                                    mipsData.append("   " + ladoIzqId+": ."+"word 0"+"\n");

                                    String mipsAsignation = "li $"+temp+", "+ partes_dato[0];
                                    mipsMain.append("\n   "+mipsAsignation);

                                    mipsAsignation = "sw "+temp+", "+ladoIzqId.toString();                            
                                    mipsMain.append("\n   "+mipsAsignation);
                                    RESULT = "bool ::"+temp; 

                                    // +++ Tabla de símbolos ++++ 
                                    listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                                    RESULT = id.toString()+": "+tip.toString();
                                }else{
                                    //Manejo error semántico
                                    manejoError("'" + tip +" # "+ id + " = " + partes_dato[0] + ";' " + "El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+currentHash, "semántico");
                                    RESULT = "error_semantico";
                                }
                            }
                        }
                    }else{
                        //Manejo error semántico
                        manejoError("El ID: "+ ladoIzqId.toString() +" no ha sido creado dentro de la función", "semántico");
                        RESULT = "error_semantico";
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAASIGVARBOOL",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CREAVARBOOL ::= TIPOBOOL SEPARADOR IDENTIFICADOR ENDLINE 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		   // ++++ Análisis semántico ++++
                    if(fatherCurrentHash != null && buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), id.toString(), "id") == null){
                        if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null ) {
                            // ++++ Código 3D ++++
                            codIn3D.append("\ndataBool"+" "+id.toString());
                            mipsData.append("   " + id.toString()+": ."+"word 0"+"\n");

                            // +++ Tabla de símbolos ++++ 
                            listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                            RESULT = id.toString()+": "+tip.toString();
                        }
                        else{
                            //Manejo error semántico
                            manejoError("El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+currentHash, "semántico");
                            RESULT = "error_semantico";
                        }
                    }
                    else if(fatherCurrentHash == null && buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null){
                            // ++++ Código 3D ++++
                            codIn3D.append("\ndataBool"+" "+id.toString());
                            mipsData.append("   " + id.toString()+": ."+"word 0"+"\n");

                            // +++ Tabla de símbolos ++++ 
                            listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                            RESULT = id.toString()+": "+tip.toString();
                    }
                    else{
                        //Manejo error semántico
                        manejoError("El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+fatherCurrentHash, "semántico");
                        RESULT = "error_semantico";
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAVARBOOL",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VALORESBOOL ::= OPERACIONBOOL 
            {
              Object RESULT =null;
		 System.out.println("Que paso?"); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBOOL",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VALORESBOOL ::= SIGABREPARENT OPERACIONRELAARIT SIGCIERRAPARENT 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = valor ;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBOOL",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VALORESBOOL ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = id+": "+"var"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBOOL",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VALORESBOOL ::= LITBOOL 
            {
              Object RESULT =null;
		int litBoolleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litBoolright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litBool = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litBool.toString()+": "+"bool"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBOOL",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VARIABLESFLOAT ::= CREAASIGVARFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESFLOAT",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VARIABLESFLOAT ::= CREAVARFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESFLOAT",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CREAASIGVARFLOAT ::= TIPOFLOAT SEPARADOR IDENTIFICADOR SIGNOIGUAL OPERACIONARIT ENDLINE 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		   // ++++ Análisis semántico ++++
                    String ladoIzqTipo = tip.toString();
                    String ladoIzqId = id.toString(); 
                    String[] partes_op = op.toString().split(": ");
                    if((ladoIzqTipo.equals(partes_op[1].toString())) || (partes_op[1].toString().equals("var"))){
                        if(!(ladoIzqTipo.equals(partes_op[1].toString())) && buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_op[0].toString(), "id") == null){
                            //Manejo error semántico
                            manejoError("'" + tip +" # "+ id + " = " + partes_op[0] + ";' " + "El ID: '"+ partes_op[0] +"' no ha sido creado anteriormente", "semántico");
                            RESULT = "error_semantico";
                        }else{
                            if (!(ladoIzqTipo.equals(partes_op[1])) && !(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_op[0], "id").equals("float"))){
                                //Manejo error semántico
                                manejoError("'" + tip +" # "+ id + " = " + partes_op[0] + ";' " + "La variable: '"+ partes_op[0] +"' no es de tipo float", "semántico");
                                RESULT = "error_semantico";
                            }else{
                                if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null ) {
                                    // ++++ Código 3D ++++
                                    String temp = "t"+(currentTemp++); 
                                    if (currentTemp == 10){
                                        currentTemp = 0;
                                    }
                                    codIn3D.append("\ndataFloat "+ladoIzqId+" = "+partes_op[0].toString());
                                    mipsData.append("   " + ladoIzqId+": ."+"float 0.0"+"\n");

                                    String mipsAsignation = "li $"+temp+", "+ partes_op[0];
                                    mipsMain.append("\n   "+mipsAsignation);

                                    mipsAsignation = "sw "+temp+", "+ladoIzqId.toString();                            
                                    mipsMain.append("\n   "+mipsAsignation);
                                    RESULT = "float ::"+temp; 

                                    // +++ Tabla de símbolos ++++ 
                                    listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                                    RESULT = id.toString()+": "+tip.toString();
                                }else{
                                    //Manejo error semántico
                                    manejoError("'" + tip +" # "+ id + ";' " + "El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+currentHash, "semántico");
                                    RESULT = "error_semantico";
                                }
                            }
                        }
                    }
                    else{
                        //Manejo error semántico
                        manejoError("'" + tip +" # "+ id + " = " + partes_op[0] + ";' " + "El tipo de dato de '"+partes_op[0]+"' es incompatible", "semántico");
                        RESULT = "error_semantico";
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAASIGVARFLOAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CREAVARFLOAT ::= TIPOFLOAT SEPARADOR IDENTIFICADOR ENDLINE 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		   // ++++ Análisis semántico ++++
                    if(fatherCurrentHash != null && buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), id.toString(), "id") == null){
                        if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null ) {
                            // ++++ Código 3D ++++
                            codIn3D.append("\ndataFloat"+" "+id.toString());
                            mipsData.append("   " + id.toString()+": ."+"float 0.0"+"\n");

                            // +++ Tabla de símbolos ++++ 
                            listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                            RESULT = id.toString()+": "+tip.toString();
                        }
                        else{
                            //Manejo error semántico
                            manejoError("El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+currentHash, "semántico");
                            RESULT = "error_semantico";
                        }
                    }
                    else if(fatherCurrentHash == null && buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null){
                            // ++++ Código 3D ++++
                            codIn3D.append("\ndataFloat"+" "+id.toString());
                            mipsData.append("   " + id.toString()+": ."+"float 0.0"+"\n");

                            // +++ Tabla de símbolos ++++ 
                            listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                            RESULT = id.toString()+": "+tip.toString();
                    }
                    else{
                        //Manejo error semántico
                        manejoError("El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+fatherCurrentHash, "semántico");
                        RESULT = "error_semantico";
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAVARFLOAT",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VARIABLESINT ::= CREAASIGVARINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESINT",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VARIABLESINT ::= CREAVARINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESINT",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VARIABLESINT ::= ASIGNVAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESINT",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CREAASIGVARINT ::= TIPOINT SEPARADOR IDENTIFICADOR SIGNOIGUAL OPERACIONARIT ENDLINE 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		   // ++++ Análisis semántico ++++
                    String ladoIzqTipo = tip.toString();
                    String ladoIzqId = id.toString(); 
                    String[] partes_op = op.toString().split(": ");

                    if((ladoIzqTipo.equals(partes_op[1].toString())) || (partes_op[1].toString().equals("var"))){
                        if(!(ladoIzqTipo.equals(partes_op[1].toString())) && buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_op[0].toString(), "id") == null){
                            //Manejo error semántico
                            manejoError("'" + tip +" # "+ id + " = " + partes_op[0] + ";' " + "El ID: '"+ partes_op[0] +"' no ha sido creado anteriormente", "semántico");
                            RESULT = "error_semantico";
                        }else{
                            if (!(ladoIzqTipo.equals(partes_op[1])) && !(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes_op[0], "id").equals("int"))){
                                //Manejo error semántico
                                manejoError("'" + tip +" # "+ id + " = " + partes_op[0] + ";' " + "La variable: '"+ partes_op[0] +"' no es de tipo int", "semántico");
                                RESULT = "error_semantico";
                            }else{
                                if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null ) {
                                    // ++++ Código 3D ++++
                                    String temp = "t"+(currentTemp++); 
                                    if (currentTemp == 10){
                                        currentTemp = 0;
                                    }
                                    codIn3D.append("\ndataInt "+ladoIzqId+" = "+partes_op[0].toString());
                                    mipsData.append("   " + ladoIzqId+": ."+"word 0"+"\n");

                                    String mipsAsignation = "li $"+temp+", "+ partes_op[0];
                                    mipsMain.append("\n   "+mipsAsignation);

                                    mipsAsignation = "sw "+temp+", "+ladoIzqId.toString();                            
                                    mipsMain.append("\n   "+mipsAsignation);
                                    RESULT = "int ::"+temp; 

                                    // +++ Tabla de símbolos ++++ 
                                    listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                                    RESULT = id.toString()+": "+tip.toString();
                                }else{
                                    //Manejo error semántico
                                    manejoError("'" + tip +" # "+ id + ";' " + "El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+currentHash, "semántico");
                                    RESULT = "error_semantico";
                                }
                            }
                        }
                    }
                    else{
                        //Manejo error semántico
                        manejoError("'" + tip +" # "+ id + " = " + partes_op[0] + ";' " + "El tipo de dato de '"+partes_op[0]+"' es incompatible", "semántico");
                        RESULT = "error_semantico";
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAASIGVARINT",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CREAVARINT ::= TIPOINT SEPARADOR IDENTIFICADOR ENDLINE 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		   // ++++ Análisis semántico ++++
                    if(fatherCurrentHash != null && buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), id.toString(), "id") == null){
                        if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null ) {
                            // ++++ Código 3D ++++
                            codIn3D.append("\ndataInt"+" "+id.toString());
                            mipsData.append("   " + id.toString()+": ."+"word 0"+"\n");

                            // +++ Tabla de símbolos ++++ 
                            listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                            RESULT = id.toString()+": "+tip.toString();
                        }
                        else{
                            //Manejo error semántico
                            manejoError("'" + tip +" # "+ id + ";' " + "El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+currentHash, "semántico");
                            RESULT = "error_semantico";
                        }
                    }
                    else if(fatherCurrentHash == null && buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null){
                            // ++++ Código 3D ++++
                            codIn3D.append("\ndataInt"+" "+id.toString());
                            mipsData.append("   " + id.toString()+": ."+"word 0"+"\n");

                            // +++ Tabla de símbolos ++++ 
                            listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                            RESULT = id.toString()+": "+tip.toString();
                    }
                    else{
                        //Manejo error semántico
                        manejoError("El ID: '"+id+"' ya ha sido utilizado en otra creación de variable dentro de "+fatherCurrentHash, "semántico");
                        RESULT = "error_semantico";
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAVARINT",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASIGNVAR ::= IDENTIFICADOR SIGNOIGUAL OPERACIONARIT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNVAR",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERACIONARIT ::= SIGABREPARENT OPERACIONARIT SIGCIERRAPARENT 
            {
              Object RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object valor1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = valor1 ;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONARIT",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERACIONARIT ::= VALORESARIT OPERADORESARITME OPERACIONARIT 
            {
              Object RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object valor1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object sig = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object valor2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 
                            String[] partes_valor1 = valor1.toString().split(": ");
                            String[] partes_valor2 = valor2.toString().split(": ");
                            boolean errores = false;

                            if (!(partes_valor1[1].equals("float")) && (!partes_valor1[1].equals("int")) && (!partes_valor1[1].equals("var"))){
                                //Manejo error semántico
                                errores = true;
                                manejoError("'" + valor1 + " " + sig + " " + valor2 + "' El operador: "+ valor1 +" es de un tipo incorrecto para una operacion aritmetica, dentro de "+currentHash, "semántico");
                                RESULT = "error_semantico";
                            }
                            if (!(partes_valor2[1].equals("float")) && (!partes_valor2[1].equals("int")) && (!partes_valor2[1].equals("var"))){
                                //Manejo error semántico
                                errores = true;
                                manejoError("'" + valor1 + " " + sig + " " + valor2 + "' El operador: "+ valor2 +" es de un tipo incorrecto para una operacion aritmetica, dentro de "+currentHash, "semántico");
                                RESULT = "error_semantico";                               
                            }   
                            if (partes_valor1[1].equals(partes_valor2[1]) || partes_valor1[1].equals("var") || partes_valor2[1].equals("var")){
                                if (!errores){
                                    String tipo = "";
                                    if (partes_valor1[1].equals("var")&& (!partes_valor2[1].equals("var"))){
                                        tipo = partes_valor2[1];
                                    }else{
                                        if (partes_valor2[1].equals("var")&& (!partes_valor1[1].equals("var"))){
                                            tipo = partes_valor1[1];
                                        }else{
                                            if ((!partes_valor2[1].equals("var")) && (!partes_valor1[1].equals("var"))){
                                                tipo = partes_valor1[1];
                                            }else{
                                                tipo = buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), partes_valor1[0], "id");
                                            }
                                        }
                                        
                                    }
                                    String temp = "(" + partes_valor1[0] + sig + partes_valor2[0] +")";
                                    RESULT = temp + ": " + tipo; 
                                }
                            }else{
                                //Manejo error semántico
                                manejoError("'" + valor1 + " " + sig + " " + valor2 + "' Los operadores no son del mismo tipo, dentro de "+currentHash, "semántico");
                                RESULT = "error_semantico";                                 
                            }
                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONARIT",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERACIONARIT ::= VALORESARIT 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = valor ;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONARIT",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VALORESARIT ::= OPERAUNARIA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESARIT",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VALORESARIT ::= LLAMARFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESARIT",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VALORESARIT ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = id+": "+"var"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESARIT",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VALORESARIT ::= LITFLOAT 
            {
              Object RESULT =null;
		int litfloatleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litfloatright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litfloat = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litfloat.toString()+": "+"float"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESARIT",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VALORESARIT ::= LITINT 
            {
              Object RESULT =null;
		int litIntleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litIntright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litInt = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litInt.toString()+": "+"int"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESARIT",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPERACIONUNARIA ::= OPERAUNARIA ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONUNARIA",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPERAUNARIA ::= OPERADORESUNARIOS IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERAUNARIA",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPERAUNARIA ::= IDENTIFICADOR OPERADORESUNARIOS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERAUNARIA",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTRETURN ::= RESERVRETURN SEPARADOR DATOSRETORNO ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTRETURN",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DATOSRETORNO ::= LLAMARFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DATOSRETORNO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DATOSRETORNO ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DATOSRETORNO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DATOSRETORNO ::= LITBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DATOSRETORNO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DATOSRETORNO ::= LITFLOAT 
            {
              Object RESULT =null;
		int litfloatleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litfloatright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litfloat = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litfloat.toString()+": "+"float"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DATOSRETORNO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DATOSRETORNO ::= LITINT 
            {
              Object RESULT =null;
		int litIntleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litIntright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litInt = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litInt.toString()+": "+"int"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DATOSRETORNO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // COMENTARIOS ::= COMENTARIOMULTIPLE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // COMENTARIOS ::= COMENTARIOSIMPLE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OPERADORESUNARIOS ::= SIGDIMINU 
            {
              Object RESULT =null;
		 RESULT = "--";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESUNARIOS",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // OPERADORESUNARIOS ::= SIGAUMEN 
            {
              Object RESULT =null;
		 RESULT = "++";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESUNARIOS",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // OPERADORESLOGICOS ::= SIGDISYUNCION 
            {
              Object RESULT =null;
		 RESULT = "|";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESLOGICOS",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OPERADORESLOGICOS ::= SIGCONJUNCION 
            {
              Object RESULT =null;
		 RESULT = "&";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESLOGICOS",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OPERADORESARITME ::= SIGPOT 
            {
              Object RESULT =null;
		 RESULT = "^";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESARITME",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OPERADORESARITME ::= SIGMOD 
            {
              Object RESULT =null;
		 RESULT = "%";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESARITME",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OPERADORESARITME ::= SIGDIV 
            {
              Object RESULT =null;
		 RESULT = "/";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESARITME",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OPERADORESARITME ::= SIGMULTI 
            {
              Object RESULT =null;
		 RESULT = "*";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESARITME",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OPERADORESARITME ::= SIGSUMA 
            {
              Object RESULT =null;
		 RESULT = "+";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESARITME",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OPERADORESARITME ::= SIGRESTA 
            {
              Object RESULT =null;
		 RESULT = "-";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESARITME",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LITBOOL ::= LITFALSE 
            {
              Object RESULT =null;
		 RESULT = "false"+": "+"bool"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITBOOL",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // LITBOOL ::= LITTRUE 
            {
              Object RESULT =null;
		 RESULT = "true"+": "+"bool"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITBOOL",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

